{"meta":{"title":"Azure OSS Developer Support","subtitle":"How-To's for Open Source on Azure","description":null,"author":"Azure Open Source Software Developer Support","url":"http://azureossd.github.io","root":"/"},"pages":[{"title":" Using wildfly-swarm on Azure App Service\t\t","date":"2016-07-20T04:40:37.000Z","updated":"2019-03-25T21:08:41.525Z","comments":false,"path":"using-wildfly-swarm-on-azure-app-service/index.html","permalink":"http://azureossd.github.io/using-wildfly-swarm-on-azure-app-service/index.html","excerpt":"","text":"This blog is for the customers who wants to use wildfly-swarm container which is the reconstitution of the popular WildFly Java Application Server. As you know you can bring your own customized version of Tomcat and Jetty containers are described in the blog - https://azure.microsoft.com/en-us/documentation/articles/web-sites-java-custom-upload/. On similar lines, you can use the wildfly-swarm by adding the following configuration in the web.config - You can achieve same by using the site extension Java Configurator. The advantage of using the site extension is that, it uses applicationHost.xdt file instead of web.config, so that your webapp is not restarted when you make the changes and you can control the restart when desired. Also, it avoids any manual configuration errors and you can revert it anytime you want easily."}],"posts":[{"title":" How to send emails through Azure Web Apps using Google / Gmail\t\t","slug":"how-to-send-emails-through-azure-web-apps-using-google-gmail","date":"2019-02-02T20:29:38.000Z","updated":"2019-03-27T00:49:30.648Z","comments":true,"path":"how-to-send-emails-through-azure-web-apps-using-google-gmail/","link":"","permalink":"http://azureossd.github.io/how-to-send-emails-through-azure-web-apps-using-google-gmail/","excerpt":"How to send emails through Azure Web Apps using Google / GmailPart I – Configuring Google to use App PasswordsTwo quick notes before proceeding: This is not a ‘once and done’ secret or app generation concept, this is unique to the gmail address and will need to be done for each and every email address that you wish to send emails from. Next, this sample uses the C# Open Source MailKit library. You can find more details about this here: https://github.com/jstedfast/MailKit","text":"How to send emails through Azure Web Apps using Google / GmailPart I – Configuring Google to use App PasswordsTwo quick notes before proceeding: This is not a ‘once and done’ secret or app generation concept, this is unique to the gmail address and will need to be done for each and every email address that you wish to send emails from. Next, this sample uses the C# Open Source MailKit library. You can find more details about this here: https://github.com/jstedfast/MailKit Step 1 – Login to your google account and setup your Google App Password through the security center. https://gmail.com then click in the upper right on your avatar and click “Google Account” Click Security. If you already have 2 step verification and app passwords enabled, click on App Passwords to generate a new one. If you do not, then you will need to enable these to complete this walkthrough / guide. On the step below if you do not have 2 factor authentication enabled and verified with your phone, you will need to do that, first. Next you will need to generate the password to use: Now to generate the actual password. Use whichever name you are comfortable with. Take note of the password (put it in your clipboard or notepad of choice). It will look like this: Step 2 – Install Visual Studio (if needed). Part II – Copying / ProgrammingStep 1 – Clone the GitHub Repository https://github.com/bledwards1/MailKit_AzureWebApps_Demo Step 2 – Update the variables inside of the code sample downloaded as shown in the screenshots. The only file you should have to modify is the Default.aspx Lines to modify: 30, 31, and 32 (optional), 37. Feel free to edit any of the others if you’d like to modify such as the subject line, etc. They are also commented clearly in the repository above if you forget… Step 3 – Run the code and check for an email sample!","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[{"name":"Azure Web App email send","slug":"Azure-Web-App-email-send","permalink":"http://azureossd.github.io/tags/Azure-Web-App-email-send/"},{"name":"Azure web apps gmail","slug":"Azure-web-apps-gmail","permalink":"http://azureossd.github.io/tags/Azure-web-apps-gmail/"},{"name":"Azure Web Apps Send Email gmail","slug":"Azure-Web-Apps-Send-Email-gmail","permalink":"http://azureossd.github.io/tags/Azure-Web-Apps-Send-Email-gmail/"},{"name":"C#","slug":"C","permalink":"http://azureossd.github.io/tags/C/"},{"name":"C# MailKit","slug":"C-MailKit","permalink":"http://azureossd.github.io/tags/C-MailKit/"}],"author":"bledwards1"},{"title":" Azure App Service Linux - Adding PHP Extensions\t\t","slug":"azure-app-service-linux-adding-php-extensions","date":"2019-01-29T20:14:34.000Z","updated":"2019-03-27T01:01:24.168Z","comments":true,"path":"azure-app-service-linux-adding-php-extensions/","link":"","permalink":"http://azureossd.github.io/azure-app-service-linux-adding-php-extensions/","excerpt":"Customers that need to install PHP extensions that are not available on the provided PHP images on Azure App Services Linux can perform the following steps below to install their extensions. Install PHP extensions- Go to your KUDU console https://\\&lt;sitename>.scm.azurewebsites.net Select SSH. In your SSH session, run the command highlighted in yellow. root@3628690f5888:/home/site/wwwroot# pear config-show Configuration (channel pear.php.net): ===================================== Auto-discover new Channels auto_discover &lt;not set&gt; Default Channel default_channel pear.php.net HTTP Proxy Server Address http_proxy &lt;not set&gt; PEAR server [DEPRECATED] master_server pear.php.net Default Channel Mirror preferred_mirror pear.php.net Remote Configuration File remote_config &lt;not set&gt; PEAR executables directory bin_dir /usr/local/bin PEAR documentation directory doc_dir /usr/local/lib/php/doc PHP extension directory ext_dir /usr/local/lib/php/extensions/no-debug-non-zts-20151012 PEAR directory php_dir /usr/local/lib/php PEAR Installer cache directory cache_dir /tmp/pear/cache PEAR configuration file cfg_dir /usr/local/lib/php/cfg","text":"Customers that need to install PHP extensions that are not available on the provided PHP images on Azure App Services Linux can perform the following steps below to install their extensions. Install PHP extensions- Go to your KUDU console https://\\&lt;sitename>.scm.azurewebsites.net Select SSH. In your SSH session, run the command highlighted in yellow. root@3628690f5888:/home/site/wwwroot# pear config-show Configuration (channel pear.php.net): ===================================== Auto-discover new Channels auto_discover &lt;not set&gt; Default Channel default_channel pear.php.net HTTP Proxy Server Address http_proxy &lt;not set&gt; PEAR server [DEPRECATED] master_server pear.php.net Default Channel Mirror preferred_mirror pear.php.net Remote Configuration File remote_config &lt;not set&gt; PEAR executables directory bin_dir /usr/local/bin PEAR documentation directory doc_dir /usr/local/lib/php/doc PHP extension directory ext_dir /usr/local/lib/php/extensions/no-debug-non-zts-20151012 PEAR directory php_dir /usr/local/lib/php PEAR Installer cache directory cache_dir /tmp/pear/cache PEAR configuration file cfg_dir /usr/local/lib/php/cfg In the output above, the path for ext_dir is where your extension will be downloaded. Note the path for later use. To install an extension, perform the following. I’ll be installing the PHP extension “redis” in this example. root@3628690f5888:/home/site/wwwroot# pecl install redis downloading redis-4.1.1.tgz ... Starting to download redis-4.1.1.tgz (220,894 bytes) ..............................................done: 220,894 bytes 25 source files, building running: phpize Configuring for: PHP Api Version: 20151012 Zend Module Api No: 20151012 Zend Extension Api No: 320151012 enable igbinary serializer support? [no] : enable lzf compression support? [no] : …… Build process completed successfully Installing &apos;/usr/local/lib/php/extensions/no-debug-non-zts-20151012/redis.so&apos; install ok: channel://pecl.php.net/redis-4.1.1 configuration option &quot;php_ini&quot; is not set to php.ini location You should add &quot;extension=redis.so&quot; to php.ini 6. You’ll notice the path to the newly installed extension (highlighted in green) is also returned after it’s installed and matches the “ext_dir” path returned from the Pear configurations. Now that the extension is installed, we’ll need to create an “ext” directory under “/home/site” and copy the extension to that directory so that the extension persists if the container is restarted. Below are the commands to do this. root@9a793907fbb0:/home/site/wwwroot# mkdir /home/site/ext root@9a793907fbb0:/home/site/wwwroot# cp /home/site/ext/usr/local/lib/php/extensions/no-debug-non-zts-20151012/redis.so /home/site/ext Note: The text may continue and look *garbled. Don’t worry, keep entering the command. The command highlighted in yellow creates the “ext” directory and the one in green copies the files from the installation location to the new directory. Once this is done, perform the steps provided at App Service Linux - Update PHP Settings. Recompiling PHP extensions -If you need to reconfigure an extension such as GD, please use the following steps. SSH into your container and run the following “docker-php-ext-configure gd –with-freetype-dir=/usr –with-jpeg-dir=/usr” “docker-php-ext-install gd” cp /usr/local/lib/php/extensions/no-debug-non-zts-20151012/gd.so /home/site/ext To test, run “service apache2 reload” then go your PHP info page to see if the “freetype” is listed under GD. If so, update the “extensions.ini” as shown in the “Adding the Extension” section. We will need to make some further modifications to avoid a conflict with the GD extension if the site were to be rebooted. In your Application Settings, add the following so that the “extensions.ini” is loaded before the ones under “/usr/local/etc/php/conf.d” Additionally, you can perform the additional steps to move the other INI files to the “/home/site/ini” directory. In step 3, we’ll rename the INI for GD so that it doesn’t load the original GD extension on startup but continues to load other extensions. cp /usr/local/etc/php/conf.d/* /home/site/ini cd /home/site/ini mv docker-php-ext-gd.ini docker-php-ext-gd.old Adding the Extension-Once the steps performed at App Service Linux - Updating PHP settings are complete, you’ll have an “extensions.ini” in your “/home/site/ini” directory. Below are some options for modifying the extensions.ini file to include our new PHP extension. Option #1 - Echo Change directories to /home/site/ini. Type the following. echo “extensions=/home/site/ext/redis.so” &gt;&gt; extensions.ini Option #2 - Vi Change directories to /home/site/ini. Perform the following a) vi extensions.ini\\b) Press “i” on your keyboard to start editing and add the following. extension=/home/site/ext/redis.so c) Press “Esc”, then “:wq!” and enter to save. Once you’re done, restart the site using the Azure Portal and you’ll now see the extension installed in your PHPInfo page.","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[],"author":"toanms"},{"title":" Azure App Service Linux - Update PHP Settings\t\t","slug":"azure-app-service-linux-update-php-settings","date":"2019-01-29T19:50:06.000Z","updated":"2019-03-27T01:00:51.639Z","comments":true,"path":"azure-app-service-linux-update-php-settings/","link":"","permalink":"http://azureossd.github.io/azure-app-service-linux-update-php-settings/","excerpt":"Azure App Service Linux provides PHP images with preconfigured settings and extensions. If you need to adjust your PHP settings, follow the steps provided below. Updating PHP Settings- Settings such as upload_max_filesize, expose_php, and others can be modified using a custom “ini” file. You can use either SSH or Bash to accomplish this.","text":"Azure App Service Linux provides PHP images with preconfigured settings and extensions. If you need to adjust your PHP settings, follow the steps provided below. Updating PHP Settings- Settings such as upload_max_filesize, expose_php, and others can be modified using a custom “ini” file. You can use either SSH or Bash to accomplish this. Go to your KUDU site https://.scm.azurewebsites.net. Select Bash or SSH from the top menu. In Bash/SSH, go to your “/home/site” directory. Create a directory called “ini” (i.e. mkdir ini) Change directories to “ini”. We’ll need to create an “ini” file to add our settings to. In this example, I’m using “extensions.ini”. There are no file editors such as Vi, Vim, or Nano so we’ll simply use echo to add the settings to the file. I’m changing the “upload_max_filesize” from 2M to 50M. Below is the command that I used to add the setting and create an “extensions.ini” file if one doesn’t already exist. NOTE: If you already have an extensions.ini file, you can use the same command which will add the new setting to the file. /home/site/ini&gt;echo “upload_max_filesize=50M” &gt;&gt; extensions.ini /home/site/ini&gt;cat extensions.ini upload_max_filesize=50M /home/site/ini&gt; If using SSH, you can use vi to create/edit the extensions file using the following commands. a) vi extensions.ini b) Press “i” on your keyboard to start editing and add the following. upload_max_filesize=50M c) Press “Esc”, then “:wq!” and enter to save. Add an Application Setting- We’ll now need to go to the Azure Portal and add an Application Setting to scan the “ini” directory that we just created to apply the change for upload_max_filesize. Go to the Azure Portal (https://portal.azure.com) and select your App Service Linux PHP application. Select Application Settings for the app. Under the Application settings section, press the “+ Add new setting”. For the App Setting Name, enter “PHP_INI_SCAN_DIR”. For the value, enter “/usr/local/etc/php/conf.d:/home/site/ini” NOTE: If you’re you’ve recompiled a PHP extension such as GD, perform the steps at “Recompiling PHP Extensions” at Azure App Service - Adding PHP Extensions and enter a value of “/home/site/ini” and omit the “/usr/local/etc/php/conf.d:” portion. The first portion of the value is the location of other ini files that come with the Docker container and the second part (after the “:”) is the directory that contains our new ini file. Press the save button. Testing- 1. You should now see the upload_max_filesize increase from 2M to 50M if you have a PHP info page. If not, create one by going to your /home/site/wwwroot directory and perform the following. echo &quot;&lt;?php phpinfo();&quot; &gt;&gt; info.php 2. You should now see the values by going to https://.azurewebsites.net/info.php","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[],"author":"toanms"},{"title":" Building Python Functions App that use Native Modules – Custom Docker\t\t","slug":"building-python-functions-app-that-use-native-modules-custom-docker","date":"2018-10-31T21:23:43.000Z","updated":"2019-03-26T05:52:02.040Z","comments":true,"path":"building-python-functions-app-that-use-native-modules-custom-docker/","link":"","permalink":"http://azureossd.github.io/building-python-functions-app-that-use-native-modules-custom-docker/","excerpt":"","text":"PrerequisitesTo build and test locally, you will need to: Install Python 3.6 Install Docker Install Azure Functions Core Tools version 2.0.3 or later To install Azure Functions Core tools you will need also these requirements: Install .NET Core 2.1 for Windows. Install Node.js, which includes npm. For version 2.x of the tools, only Node.js 8.5 and later versions are supported. Install the Core Tools package: npm install -g azure-functions-core-tools Create and activate a virtual environmentTo create a Functions project, it is required that you work in a Python 3.6 virtual environment. Run the following commands to create and activate a virtual environment named env. # In Bash python3.6 -m venv env source env/bin/activate # In PowerShell py -3.6 -m venv env env\\scripts\\activate # In CMD python -m venv env env\\scripts\\activate Create a local Functions ProjectTo create a Functions project, it is required that you work in a Python 3.6 virtual environment. Run the following commands to create and activate a virtual environment named env. In the terminal window or from a command prompt, run the following command: func init MyFunctionProj –worker-runtime python –docker func init . –worker-runtime python –docker You will see something like the following output. Installing wheel package Installing azure-functions==1.0.0a5 package Installing azure-functions-worker==1.0.0a6 package Running pip freeze Writing .funcignore Writing .gitignore Writing host.json Writing local.settings.json Writing D:\\__Documents\\WebAppProjects\\functions-python-3\\.vscode\\extensions.json Writing Dockerfile This generates a Dockerfile with the following content: FROM mcr.microsoft.com/azure-functions/python:2.0 COPY . /home/site/wwwroot RUN cd /home/site/wwwroot &amp;&amp; \\ pip install -r requirements.txt Create a functionhttps://github.com/Azure/azure-functions-python-worker/wiki/Create-your-first-Python-function#create-a-function Run the function locallyhttps://github.com/Azure/azure-functions-python-worker/wiki/Create-your-first-Python-function#run-the-function-locally Run locally as Docker containerUsing Docker, run the following command. Replace and with preferred names. docker build . –tag : (example) docker build . – pythonfunction:v1 Once image has been build you could run the following command to start the image: docker run -p : : (example) docker run -p 8080:80 pythonfunction:v1 Once started, you could browse to http://localhost:8080 (using example) to view your function running. Deploy your function appYou could use Docker Hub or Azure Container Registry to deploy your Docker image. Push image to Docker Hubhttps://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal#push-image-to-acr First Create a container registryhttps://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal#create-a-container-registry Log in to ACRhttps://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal#create-a-container-registry Push image to ACRhttps://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal#push-image-to-acr Create function app via Azure PortalSelect the New button found on the upper left-hand corner of the Azure portal, then select Compute &gt; Function App. When configuring the settings, select Linux (Preview) for OS and Docker Image for Publish. Under Configure Container, select either Azure container Registry or Docker Hub depending on how you deployed your Docker image. Once deployed, you will be able to access the Function Apps page Once deployed, you can test your Function App: Be sure to change and with your functions values. https://.azurewebsites.com/api/","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"python","slug":"Azure-App-Service-Web-App/python","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/python/"}],"tags":[{"name":"Azure Linux Web App","slug":"Azure-Linux-Web-App","permalink":"http://azureossd.github.io/tags/Azure-Linux-Web-App/"},{"name":"functions app","slug":"functions-app","permalink":"http://azureossd.github.io/tags/functions-app/"},{"name":"python","slug":"python","permalink":"http://azureossd.github.io/tags/python/"},{"name":"python functions app","slug":"python-functions-app","permalink":"http://azureossd.github.io/tags/python-functions-app/"}],"author":"aadsso-1live.com00037ffeda808cc5"},{"title":" Restrict access to login for the WordPress running on Azure web app container\t\t","slug":"restrict-access-to-login-for-the-wordpress-running-on-azure-web-app-container","date":"2018-10-13T02:17:52.000Z","updated":"2019-03-26T17:49:48.089Z","comments":true,"path":"restrict-access-to-login-for-the-wordpress-running-on-azure-web-app-container/","link":"","permalink":"http://azureossd.github.io/restrict-access-to-login-for-the-wordpress-running-on-azure-web-app-container/","excerpt":"","text":"For WordPress sites that running on Apache server in Azure web app for containers, here is sample code to restrict access to login pages, such as wp-login.php or wp-admin 1. FTP to files in /home/site/wwwroot, find the file “.htaccess” (create one if it does not exist) 2. Add the code below to “.htaccess”, replace the IP “xx.xx.xx.xx” by that you allow to access wp-login.php &lt;Files wp-login.php&gt; Order Deny,Allow Deny from all SetENVIf X-Client-IP &quot;xx.xx.xx.xx&quot; AllowAccess Allow from env=AllowAccess &lt;/Files&gt; Note: Since /wp-admin will direct to wp-login.php, no need to define the rule for wp-admin","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"http://azureossd.github.io/tags/wordpress/"},{"name":".htaccess","slug":"htaccess","permalink":"http://azureossd.github.io/tags/htaccess/"},{"name":"IP restrict","slug":"IP-restrict","permalink":"http://azureossd.github.io/tags/IP-restrict/"}],"author":"yiwang88"},{"title":" RewriteRule sample for WordPress in subdirectory\t\t","slug":"web-config-sample-for-wordpress-nested-in-subdirectory","date":"2018-10-01T20:45:27.000Z","updated":"2019-03-26T20:53:34.265Z","comments":true,"path":"web-config-sample-for-wordpress-nested-in-subdirectory/","link":"","permalink":"http://azureossd.github.io/web-config-sample-for-wordpress-nested-in-subdirectory/","excerpt":"","text":"In the case you installed another instance of WordPress in a subdirectory of main WordPress site in Azure web app for Windows, your WordPress installation may be like this, if use “Post name” Permalink setting, with default web.config, articles in subdirectory might give 404 (not found), for example, For this problem, you can modify web.config to exclude subdirectory “blogs” from main site rewrite rules, here is sample web.config, &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;rule name=&quot;Imported Rule 1&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^index.php$&quot; ignoreCase=&quot;false&quot; /&gt; &lt;action type=&quot;None&quot; /&gt; &lt;/rule&gt; &lt;rule name=&quot;Imported Rule 2&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;.&quot; ignoreCase=&quot;false&quot; /&gt; &lt;conditions&gt; &lt;!--# Include in the next line all folders to exclude--&gt; &lt;add input=&quot;{URL}&quot; pattern=&quot;(blogs)&quot; negate=&quot;true&quot; /&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsFile&quot; ignoreCase=&quot;false&quot; negate=&quot;true&quot; /&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsDirectory&quot; ignoreCase=&quot;false&quot; negate=&quot;true&quot; /&gt; &lt;/conditions&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;/index.php&quot; /&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; If the WordPress sites are hosted on Apache on Azure web app for containers, modify wwwroot/.htaccess, for example, \\# BEGIN WordPress RewriteEngine On RewriteBase / RewriteRule ^index.php$ - [L] # Include in the next line all folders to exclude RewriteCond %{REQUEST_URI} !(blogs) [NC] RewriteCond %{REQUEST_FILENAME} !-f RewriteCond %{REQUEST_FILENAME} !-d RewriteRule . /index.php [L] # END WordPress","categories":[{"name":"WordPress","slug":"WordPress","permalink":"http://azureossd.github.io/categories/WordPress/"}],"tags":[{"name":"web.config","slug":"web-config","permalink":"http://azureossd.github.io/tags/web-config/"},{"name":"wordpress","slug":"wordpress","permalink":"http://azureossd.github.io/tags/wordpress/"},{"name":".htaccess","slug":"htaccess","permalink":"http://azureossd.github.io/tags/htaccess/"}],"author":"yiwang88"},{"title":" How to change memory_limit on Wordpress Web App for Linux on Azure\t\t","slug":"how-to-change-memory-limit-on-wordpress-web-app-for-linux-on-azure","date":"2018-09-27T19:41:37.000Z","updated":"2019-03-25T21:08:41.376Z","comments":true,"path":"how-to-change-memory-limit-on-wordpress-web-app-for-linux-on-azure/","link":"","permalink":"http://azureossd.github.io/how-to-change-memory-limit-on-wordpress-web-app-for-linux-on-azure/","excerpt":"","text":"Do you need to edit the memory_limit and post_max_size PHP settingson your Linux Web App hosted with MS Azure? I can show you how to do this without needing to install anything via SSH (which by the way is not recommended. Read up on why here). Step 1: Login to the portal and go to the “Advanced Tools” section and go to the SSH option. Step 2: Copy these entries and place them in the .htaccess file located at /home/site/wwwroot/ using your preferred method. I prefer to use vi. php_value memory_limit 256M php_value post_max_size 256M php_value upload_max_filesize 128M Step 3: Save the file using vi to add these entries into the .htaccess file. It should look something like this once you are done: Step 4: Confirm they have been set by creating a phpinfo.php file and make sure the settings are correct. Or, you can check in the Wordpress Media Upload tool: You can see that these settings have now been updated and no need to make a custom Docker image just to edit a few PHP variables. Let me know what other interesting settings work in our .htaccess files in the comments below!","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[{"name":"Azure Linux Web App","slug":"Azure-Linux-Web-App","permalink":"http://azureossd.github.io/tags/Azure-Linux-Web-App/"},{"name":"Azure Linux php ini","slug":"Azure-Linux-php-ini","permalink":"http://azureossd.github.io/tags/Azure-Linux-php-ini/"},{"name":"Azure Linux Web App PHP Settings","slug":"Azure-Linux-Web-App-PHP-Settings","permalink":"http://azureossd.github.io/tags/Azure-Linux-Web-App-PHP-Settings/"},{"name":"Azure memory_limit change","slug":"Azure-memory-limit-change","permalink":"http://azureossd.github.io/tags/Azure-memory-limit-change/"},{"name":"php ini change azure web apps linux","slug":"php-ini-change-azure-web-apps-linux","permalink":"http://azureossd.github.io/tags/php-ini-change-azure-web-apps-linux/"}]},{"title":" How to set node version for Windows node.js webapp from Azure Portal\t\t","slug":"how-to-set-node-version-for-windows-node-js-webapp-from-azure-portal","date":"2018-09-25T23:35:42.000Z","updated":"2019-03-27T00:49:54.601Z","comments":true,"path":"how-to-set-node-version-for-windows-node-js-webapp-from-azure-portal/","link":"","permalink":"http://azureossd.github.io/how-to-set-node-version-for-windows-node-js-webapp-from-azure-portal/","excerpt":"Create the Azure WebApp Create new WebApp using Azure portal Set the App name, Resource Group and click “Create”","text":"Create the Azure WebApp Create new WebApp using Azure portal Set the App name, Resource Group and click “Create” Wait for deployment to succeed and then click on Application Settings for the new Webapp. Add a new setting with App Setting Name “WEBSITE_NODE_DEFAULT_VERSION” and Value “8.9.4” and click Save. If you would like to use a different version of node, please refer to the section “How to find available node.js versions for Windows Webapps“ below. You can now start developing your node.js application in Azure Environment. How to find available node.js versions for Windows Webapps.For nodejs release schedule, please refer to https://github.com/nodejs/Release To find current nodejs versions available in Azure Windows WebApps, navigate to this link: https://\\&lt;yourwebappname>.scm.azurewebsites.net/api/diagnostics/runtime You can only use the versions available in this list. New versions are added regularly, so please check for newer versions using the /api/diagnostics/runtime url above. Common Error that indicates the node.js version is missing or incorrect.If your application is getting the following error, please check whether [WEBSITE_NODE_DEFAULT_VERSION]{style=”float: none;background-color: transparent;color: #333333;cursor: text;font-family: Georgia,’Times New Roman’,’Bitstream Charter’,Times,serif;font-size: 16px;font-style: normal;font-variant: normal;font-weight: 400;letter-spacing: normal;text-align: left;text-decoration: none;text-indent: 0px”} is set to a valid value. Application has thrown an uncaught exception and is terminated: SyntaxError: Unexpected token { at Module._compile (module.js:434:25) at Object..js (module.js:464:10) at Module.load (module.js:353:31) at Function._load (module.js:311:12) at Module.require (module.js:359:17) at require (module.js:375:17) at Object.&lt;anonymous&gt; (D:\\Program Files (x86)\\iisnode\\interceptor.js:459:1) at Module._compile (module.js:446:26) at Object..js (module.js:464:10) at Module.load (module.js:353:31)","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"nodejs","slug":"Azure-App-Service-Web-App/nodejs","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/nodejs/"}],"tags":[],"author":"milindvb"},{"title":" Configuring node.js application on Azure App Service with Azure Blob Storage\t\t","slug":"configuring-node-js-application-on-azure-app-service-with-azure-blob-storage","date":"2018-08-30T12:39:51.000Z","updated":"2019-03-26T06:06:07.444Z","comments":true,"path":"configuring-node-js-application-on-azure-app-service-with-azure-blob-storage/","link":"","permalink":"http://azureossd.github.io/configuring-node-js-application-on-azure-app-service-with-azure-blob-storage/","excerpt":"","text":"In this article, we will learn about configuring the node js applications deployed on Azure App Services with the Azure blob storage. If you would like to store the application logs in a blob storage on azure for the node.js applications, you would need to follow the steps below. It basically includes 2 main steps: Enabling from Portal Configuring from the code Enabling from Portal · Navigate to your webapp from the azure portal · Choose the Diagnostic Logs blade. For application level logging, choose Blob storage as shown below. If you would like to choose file system, please check out the blog post here Configuring from the code In your application, install the packages winston &amp; winston-azure-blob-transport by the running the commands below npm install winston npm install winston-azure-blob-transport Now, use the code below in order to configure them from the application var winston = require(“winston”); require(“winston-azure-blob-transport”); var logger = new (winston.Logger)({ transports: [ new (winston.transports.AzureBlob)({ account: { name: process.env.ACCOUNT_NAME, key: process.env.ACCOUNT_KEY }, containerName: process.env.CONTAINER_NAME, blobName: “test.log“, level: “info” }) ] }); logger.info(“Hello!”); test.log in the above code snippet is the name of the blob where the logs get stored. You would be able to get the Account name, Account key and the container name from the Azure storage account view You would need to make use of Storage Explorer in order to check the log file as shown below.","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[],"author":"krvillia"},{"title":" Debugging Node.js applications on Azure App Services Linux/containers\t\t","slug":"debugging-node-js-applications-on-azure-app-services-linux-containers","date":"2018-08-30T10:50:42.000Z","updated":"2019-03-26T06:40:34.257Z","comments":true,"path":"debugging-node-js-applications-on-azure-app-services-linux-containers/","link":"","permalink":"http://azureossd.github.io/debugging-node-js-applications-on-azure-app-services-linux-containers/","excerpt":"","text":"This is the continuation of the earlier post where I had explained how to enable logging for node applications on App Service Windows. In this blog, you will learn how to debug the node.js applications that are hosted on Azure App Service Linux / Azure webapp for containers. Enabling logs on linux offerings of AppService is fairly easier and pretty straight forward when compared to Windows. Enable Logging on Linux Navigate to your webapp from the azure portal Choose the Diagnostic Logs blade. Here we have only one option to enable logs which is docker container logs unlike in Windows, where we have the storage option as well. As of today, we do not have the option of storing the logs to blob storage in App Service Linux. Choose File System, specify the retention period of your choice. This will delete the logs that are older than specified number of days This will gather all the STDOUT and STDERR logs of the container into /home/LogFiles folder Once you have configured using above step, you will be able to access these log files by following the steps below Go to your file system by browsing https://{webapp_name}.scm.azurewebsites.net url (called as kudu site) Click on Debug Console –&gt; Bash. If it is app service Linux, you can alternatively choose SSH option Please note that SSH works only for App Service Linux. But for Webapp Containers, you would need to configure it by following the official documentation here Navigate to the LogFiles folder by running the command “cd LogFiles” Now run the command “ls -lrt” to list all the log files with the latest one in the bottom. The stderr and stdout logs are stored in the file that ends with default_docker.log as shown below You can view this by running the command cat . If your application has any stdout/stderr configured, it will be seen in this log file. You can also download it using FTP and steps to follow are specified here If you are only looking for the latest docker logs, the quickest way is to go to Kudu console and click on Current Docker Logs option as shown below. However, this will only give the information related to the container, but not the stdout/stderr logs. Once you click on this link, you will be redirected to a new page with all the details related to the latest docker logs Now, copy paste the link that is highlighted into the new tab and you should see the output as below","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"nodejs","slug":"Azure-App-Service-Web-App/nodejs","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/nodejs/"}],"tags":[],"author":"krvillia"},{"title":" Debugging Node.js apps on Azure App Services\t\t","slug":"debugging-node-js-apps-on-azure-app-services","date":"2018-08-03T14:30:40.000Z","updated":"2019-03-26T06:41:54.144Z","comments":true,"path":"debugging-node-js-apps-on-azure-app-services/","link":"","permalink":"http://azureossd.github.io/debugging-node-js-apps-on-azure-app-services/","excerpt":"","text":"A large part of software development involves troubleshooting. Logging is one of the mechanisms that is used to make it easier to enables the developers to see what the code is really doing. Therefore, It is necessary to have the proper logging to troubleshoot the issues faster , which otherwise will become nearly impossible to nail down the application issues. Here, in this article, I will explain how to enable node.js application level logging on Azure App Service(Windows) to visualize the logs that are placed in your code. Azure App services comes in 2 offerings App Service Windows App Service Linux(Blessed/Custom Images) : Refer to the article here for detailed information of logging on App Service Linux Enable logging on Windows: Below are the two ways of achieving it Using portal Using iisnode.yml file Using Portal Navigate to your webapp from the azure portal Choose the Diagnostic Logs blade. For application level logging, You can either choose Filesystem or Blob storage Below is the snapshot of the Filesystem option Notice that the logging will get turned off automatically after 12 hrs. The reason being you have a limited set of storage you have on the local file system, which will be 1GB - 250GB depending on your App Service Plan (size). This could affect the site performance due to excessive writing to the file system. You also get to choose the logging level here. This limitation is not applicable if you choose blob storage option. However, for node.js it is not straight forward to store the logs in the blob storage. Check out the article here to know how to use this option in node.js to store the logs to azure storage. Once the above step is done, You can view these logs on your file system by following the steps below Go to your file system by browsing https://{webapp_name}.scm.azurewebsites.net (called as kudu site) url Click on Debug Console –&gt; cmd –&gt; LogFiles –&gt; Application Files of interest here: index.html and logging-errors.txt Click on the download symbol beside the index.html to get a pretty view of the stderr and stdout logging. Below is the screenshot of the same. Once you click on the log link, you will be able to see the details of the message The logging-errors.txt captures all the uncaught exceptions that occur at the run time of your application. Using iisnode.yml This option requires you to create a new file called iisnode.yml (This specifies all the configuration at the iisnode level) Go to the kudu site of your webapp (https://{webapp_name}.scm.azurewebsites.net) Click on Debug Console –&gt; cmd –&gt; site –&gt; wwwroot Create a file named iisnode.yml and place the content below loggingEnabled: true Once this is done, you can view the logs again by following the same method as described above in “Using Portal” Section by going to Debug Console –&gt; cmd –&gt; LogFiles –&gt; Application Notice that this logging will also be turned off after 12 hrs for the same reason as described above under “Using Portal” section","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[],"author":"krvillia"},{"title":" Configure WordPress Database Connection on Azure App Services\t\t","slug":"configure-wordpress-database-connection-on-azure-app-services","date":"2018-05-22T23:36:27.000Z","updated":"2019-03-26T06:03:03.064Z","comments":true,"path":"configure-wordpress-database-connection-on-azure-app-services/","link":"","permalink":"http://azureossd.github.io/configure-wordpress-database-connection-on-azure-app-services/","excerpt":"","text":"Configure WordPress Database Connection on Azure App Services For WordPress sites hosted on Azure App Services, there are two ways to configure database connection in wp-config.php. When you modify database connection for WordPress, verify the connection from wp-config.php. 1. Current WordPress installed on Azure App Services pull database connection information from hosting environment- code in wp-config.php reads data from environment variable. If using MySQL in-app, connection info is in “D:\\home\\data\\mysql\\MYSQLCONNSTR_localdb.txt” , no connection string needed in Application Settings. If using Azure database for MySQL or other database services, define connection string in Application Settings, e.g. Database=database-name;Data Source=database-host;User Id=database-username;Password=database-password Code in wp-config.php : $connectstr_dbhost = &apos;&apos;; $connectstr_dbname = &apos;&apos;; $connectstr_dbusername = &apos;&apos;; $connectstr_dbpassword = &apos;&apos;; foreach ($_SERVER as $key =&gt; $value) { if (strpos($key, &quot;MYSQLCONNSTR_localdb&quot;) !== 0) { continue; } $connectstr_dbhost = preg_replace(&quot;/^.*Data Source=(.+?);.*$/&quot;, &quot;\\\\1&quot;, $value); $connectstr_dbname = preg_replace(&quot;/^.*Database=(.+?);.*$/&quot;, &quot;\\\\1&quot;, $value); $connectstr_dbusername = preg_replace(&quot;/^.*User Id=(.+?);.*$/&quot;, &quot;\\\\1&quot;, $value); $connectstr_dbpassword = preg_replace(&quot;/^.*Password=(.+?)$/&quot;, &quot;\\\\1&quot;, $value); } // ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define(&apos;DB_NAME&apos;, $connectstr_dbname); /** MySQL database username */ define(&apos;DB_USER&apos;, $connectstr_dbusername); /** MySQL database password */ define(&apos;DB_PASSWORD&apos;, $connectstr_dbpassword); /** MySQL hostname : this contains the port number in this format host:port . Port is not 3306 when using this feature*/ define(&apos;DB_HOST&apos;, $connectstr_dbhost); 2. Some WordPress prefer to store the hard coded database information in wp-config.php - in this case, the connection is not impacted by connection string in Application Settings. Code in wp-config.php: /** MySQL database name */ define(&apos;DB_NAME&apos;, &apos;database-name&apos;); /** MySQL database username */ define(&apos;DB_USER&apos;, &apos;database-username&apos;); /** MySQL database password */ define(&apos;DB_PASSWORD&apos;, &apos;database-password&apos;); /** MySQL hostname */ define(&apos;DB_HOST&apos;, &apos;database-host&apos;);","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"MySQL","slug":"Azure-App-Service-Web-App/MySQL","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/MySQL/"},{"name":"PHP","slug":"Azure-App-Service-Web-App/MySQL/PHP","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/MySQL/PHP/"},{"name":"WordPress","slug":"Azure-App-Service-Web-App/MySQL/PHP/WordPress","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/MySQL/PHP/WordPress/"}],"tags":[]},{"title":" Change PHP_INI_SYSTEM configuration settings\t\t","slug":"change-php-ini-system-configuration-settings","date":"2018-03-10T02:56:35.000Z","updated":"2019-03-26T05:56:54.103Z","comments":true,"path":"change-php-ini-system-configuration-settings/","link":"","permalink":"http://azureossd.github.io/change-php-ini-system-configuration-settings/","excerpt":"","text":"PHP_INI_SYSTEM level settings cannot be changed from .user.ini or ini_set function. To make change for PHP_INI_SYSTEM settings on Azure web app, follow the steps, 1. Add an App Setting to your Web App with the key PHP_INI_SCAN_DIR and value d:\\home\\site\\ini 2. Create an settings.ini file using Kudu Console (http://\\&lt;site-name>.scm.azurewebsite.net) in the d:\\home\\site\\ini directory. 3. Add configuration settings to the settings.ini file using the same syntax you would use in a php.ini file. For example, if you wanted to point the curl.cainfo setting to a *.crt file and set ‘wincache.maxfilesize’ setting to 512K, your settings.ini file would contain this text: ; Example Settings curl.cainfo=&quot;%ProgramFiles(x86)%\\Git\\bin\\curl-ca-bundle.crt&quot; wincache.maxfilesize=512 4. Restart your Web App to load the changes Reference: https://docs.microsoft.com/en-us/azure/app-service/web-sites-php-configure","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[],"author":"yiwang88@hotmail.com"},{"title":" Adding SSH support to Asp.Net Core Docker Container created in Visual Studio 2017\t\t","slug":"adding-ssh-support-to-asp-net-core-docker-container-created-in-visual-studio-2017","date":"2018-02-22T23:31:33.000Z","updated":"2019-03-26T21:24:57.445Z","comments":true,"path":"adding-ssh-support-to-asp-net-core-docker-container-created-in-visual-studio-2017/","link":"","permalink":"http://azureossd.github.io/adding-ssh-support-to-asp-net-core-docker-container-created-in-visual-studio-2017/","excerpt":"","text":"When creating a Docker container used in Azure App Service Web App for Containers, a common requirement is to add SSH support so that we can log into the application container from the Kudu console. There are various different methods to make this work and the general process is documented here: https://docs.microsoft.com/en-us/azure/app-service/containers/app-service-linux-ssh-support. This blog shows how to incorporate these basic requirements into an Asp.Net Core Docker Container that was created by Visual Studio 2017. Visual Studio 2017 offers a wizard to create an Asp.Net Core Docker Container suitable for use in Azure App Service Web App for Containers. This wizard is available under the .Net Core group of templates: Other Languages – Visual C# - .NET Core – ASP.NET Core Web Application. Make sure to select Linux support on the next screen: The created Dockerfile is very basic and does not have SSH support to begin with: FROM microsoft/aspnetcore:2.0 ARG source WORKDIR /app EXPOSE 80 COPY ${source:-obj/Docker/publish} . ENTRYPOINT [&quot;dotnet&quot;, &quot;DockerHelloWorld.dll&quot;] You can take the following steps to add SSH support using the above template. Create a new file named sshd_config (no extension) in the directory where the .csproj for your web app is and paste in the content below into it. The file will show up in your Solution Explorer automatically and does not need to be modified in Visual Studio anymore. We borrowed the contents of this file from the following location: https://github.com/Azure-App-Service/node/blob/master/8.2.1/sshd_config In Solution Explorer, expand the Dockerfile to expose .dockerignore and add the following line to the bottom of the file to unignore the sshd_config file: !sshd_config Modify the Dockerfile from the original to look like the Dockerfile below. Replace the name of the dll with the appropriate dll name that matches your project. Build and deploy the project to an Azure App Service Web App for Containers. Once you start the application successfully, you should be able to go to the Kudu console and select the SSH option to connect to the application container. # This is ssh server systemwide configuration file. # # /etc/sshd_config Port 2222 ListenAddress 0.0.0.0 LoginGraceTime 180 X11Forwarding yes Ciphers aes128-cbc,3des-cbc,aes256-cbc MACs hmac-sha1,hmac-sha1-96 StrictModes yes SyslogFacility DAEMON PasswordAuthentication yes PermitEmptyPasswords no PermitRootLogin yes Final Dockerfile contents: FROM microsoft/aspnetcore:2.0 ARG source WORKDIR /app EXPOSE 2222 80 RUN apt update \\ &amp;&amp; apt install -y --no-install-recommends openssh-server \\ &amp;&amp; mkdir -p /run/sshd \\ &amp;&amp; echo &quot;root:Docker!&quot; | chpasswd COPY ${source:-obj/Docker/publish} . COPY sshd_config /etc/ssh/sshd_config ENTRYPOINT [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;/usr/sbin/sshd &amp;&amp; dotnet DockerHelloWorld.dll&quot;]","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"app service","slug":"app-service","permalink":"http://azureossd.github.io/tags/app-service/"},{"name":"azure app service web app","slug":"azure-app-service-web-app","permalink":"http://azureossd.github.io/tags/azure-app-service-web-app/"},{"name":"Azure webapp","slug":"Azure-webapp","permalink":"http://azureossd.github.io/tags/Azure-webapp/"},{"name":"Container","slug":"Container","permalink":"http://azureossd.github.io/tags/Container/"},{"name":"Docker","slug":"Docker","permalink":"http://azureossd.github.io/tags/Docker/"},{"name":"Linux","slug":"Linux","permalink":"http://azureossd.github.io/tags/Linux/"}],"author":"kamil.sykora"},{"title":" Run PHP Webjob on Azure App Service (Windows)\t\t","slug":"run-php-webjob-on-azure-app-service-windows","date":"2017-10-28T00:17:42.000Z","updated":"2019-03-26T17:52:25.925Z","comments":true,"path":"run-php-webjob-on-azure-app-service-windows/","link":"","permalink":"http://azureossd.github.io/run-php-webjob-on-azure-app-service-windows/","excerpt":"","text":"When you deploy a webjob to run PHP program, there are few items to verify and help to understand the PHP runtime for webjobs. 1. How to create a PHP webjob\\ Execute a .php file\\ Create batch to execute .php file\\ Create shell to execute .php file 2. PHP runtime for webjob uses the PHP in Kudu container, which is difference from the PHP runtime for webapp, to verify the PHP runtime, you can trigger a webjob export phpinfo, or run the following command from Kudu ‘Debug console’, php -i &gt; phpinfo.txt 3. From phpinfo.txt (if you run a phpinfo from webjob, check the output log), - find the php.ini location\\Loaded Configuration File => D:\\Program Files (x86)\\PHP\\v7.1\\php.ini - find PHP_INI_SCAN_DIR\\Scan this dir for additional .ini files => d:\\home\\site\\ini\\Additional .ini files parsed => d:\\home\\site\\ini\\settings.ini You can define PHP_INI_SCAN_DIR in App Settings: - find if PHP error log is enabled\\ log_errors => Off => Off - find PHP error log file location (you can modify this location in additional .ini file defined in PHP_INI_SCAN_DIR, e.g. d:\\home\\site\\ini\\settings.ini)\\ error_log => D:\\Windows\\temp\\php71_errors.log => d:\\Windows\\temp\\php71_errors.log - Enable PHP extensions\\Check from Kudu, default installed PHP extensions are listed in D:\\Program Files (x86)\\PHP\\v7.x\\ext\\If you use PHP 7.x 64-bit, check from D:\\Program Files\\PHP\\v7.x\\ext\\To enable an extension in this list, add it in additional .ini file, for example, extension=php_ldap.dll - Install PHP extensions\\If the PHP extension is not available from default extension list, download the matching version, for example, you can put it in d:\\home\\site\\ext, then add the extension in additional .ini file, e.g. extension=”D:\\home\\site\\ext\\php_redis.dll” - Use “-c” option to specify php.ini in command, e.g. php -c [Path to php.ini file] [Path to .php file]","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[]},{"title":" Setup SMTP in Drupal 8 on Azure Webapp\t\t","slug":"setup-smtp-in-drupal-8-on-azure-webapp","date":"2017-10-09T21:33:51.000Z","updated":"2019-03-26T19:54:11.992Z","comments":true,"path":"setup-smtp-in-drupal-8-on-azure-webapp/","link":"","permalink":"http://azureossd.github.io/setup-smtp-in-drupal-8-on-azure-webapp/","excerpt":"","text":"Example of setup SMTP in Drupal 8 using O365 SMTP server for the Drupal8 site hosted on Azure Webapp: 1.Download smtp module 8.x-1.x-dev from https://www.drupal.org/project/smtp/releases/8.x-1.x-dev 2.Extract “smtp-8.x-1.x-dev” and copy “smtp” folder to “D:\\home\\site\\wwwroot\\modules” 3.Login as Drupal admin, find Extend -&gt; MAIL-&gt;SMTP Authentication Support, check it and click install 4.Configure SMTP module, find Configuration -&gt; SYSTEM -&gt; SMTP Authentication Support 5.Save the settings, you should see the message and notification that test email has sent 6.Verify from your email,","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[],"author":"yiwang88"},{"title":" Debugging Java containers\t\t","slug":"debugging-java-containers","date":"2017-09-27T00:12:47.000Z","updated":"2019-03-26T06:39:38.953Z","comments":true,"path":"debugging-java-containers/","link":"","permalink":"http://azureossd.github.io/debugging-java-containers/","excerpt":"","text":"Can you debug Java applications within your container? Yes. How? Check below… \\ 1. Modify your dockerfile To expose JPDA params &lt;font color=&quot;#d16349&quot; size=&quot;2&quot;&gt;*ENV JPDA\\_OPTS=&quot;-agentlib:jdwp=transport=dt\\_socket,address=8000,server=y,suspend=n&quot;*&lt;/font&gt; To expose the debug port along with application port *&lt;font color=&quot;#c0504d&quot;&gt;EXPOSE 7080 **&lt;font&gt;8000&lt;/font&gt;**&lt;/font&gt;* To add the options in your command *&lt;font color=&quot;#c0504d&quot;&gt;CMD \\[&quot;sh&quot;, &quot;-c&quot;, &quot;java **&lt;font&gt;\\$JPDA\\_OPTS&lt;/font&gt;** -Durl=\\$url -jar app.jar&quot;\\]&lt;/font&gt;* \\ 2. Build the docker and run with exposing the app port and debug port. *&lt;font color=&quot;#c0504d&quot;&gt;docker run –d -p 7080:7080 \\&lt;docker image\\&gt;&lt;/font&gt;* \\ 3. Open the project in Eclipse and create a debug configuration with Host and debug port 4. Set the breakpoints and Launch the debug configuration. Voila! You are debugging the application in running container.","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[],"author":"prasadker@outlook.com"},{"title":" Use JpGraph library with Azure Web App\t\t","slug":"use-jpgrapg-package-with-azure-web-app","date":"2017-09-14T20:26:32.000Z","updated":"2019-03-26T20:32:53.133Z","comments":true,"path":"use-jpgrapg-package-with-azure-web-app/","link":"","permalink":"http://azureossd.github.io/use-jpgrapg-package-with-azure-web-app/","excerpt":"","text":"JpGraph is a graph creating library for PHP5 and PHP7.0. The library is completely written in PHP and ready to be used in any PHP app. Here is a demo how to use it with web app on azure App Services. Download JpGraph PHP5 and PHP7 version from http://jpgraph.net/download/ (Pro. version require license) After downloading the library, extract and FTP “src” folder to web app. In this demo, I put it at D:\\home\\site\\wwwroot\\jpgraph Add the library to include_path in “.user.ini”, e.g. include_path=’.;D:\\home\\site\\wwwroot\\jpgraph\\src’ From your PHP script, require the libraries you need, e.g. &lt;?php // Example for use of JpGraph, require_once (&apos;jpgraph.php&apos;); require_once (&apos;jpgraph_bar.php&apos;); … 5. Test the sample page,","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"jpgraph","slug":"jpgraph","permalink":"http://azureossd.github.io/tags/jpgraph/"}],"author":"yiwang88"},{"title":" Profile Python Applications in Azure App Services\t\t","slug":"profile-python-applications-in-azure-app-services","date":"2017-09-01T18:15:27.000Z","updated":"2019-03-26T17:38:22.622Z","comments":true,"path":"profile-python-applications-in-azure-app-services/","link":"","permalink":"http://azureossd.github.io/profile-python-applications-in-azure-app-services/","excerpt":"","text":"Slow application performance issues tend to be challenging to troubleshoot regardless of the platform in which your application is running. This is due in great part to the sometimes random nature of these issues. These types of issues also often do not result in a specific error being logged. If you think your Python application is running slow and takes more than few seconds to receive response. Below info may help you analyze where itâ€™s taking longer time and also checks for memory leaks If you are running Python App on Azure App Services(Windows). I would recommend to use HttpPlatform Handler instead of fastcgi. Follow my blogs below for details Django app with HttpPlatformHandler in Azure App Services (Windows) Running Flask app with HttpPlatformHandler in Azure App Services DjangoSample Project: I followed instructions in my Django blog listed above to deploy a sample app. Later I have added below two functions to calculate nth Fibonacci number. Change Commit Info def fibnonci_normal(n): if n == 0: return 0 elif n == 1: return 1 else: return fibnonci_normal(n - 1) + fibnonci_normal(n - 2) def fibnonci_easy(n): return ((1 + sqrt(5))**n - (1 - sqrt(5))**n) / (2**n * sqrt(5)) As you can see below, each request takes longer with higher the number of query param. With below profilers we would try to find where our web app is spending its time and catch Fibonacci functions we included. 1) Pyinstrument: A Python profiler that records the call stack of the executing code, instead of just the final function in it Install Pyinstrument using pip and create a profiles folder in wwwroot. Add below two variables to settings.py PYINSTRUMENT_PROFILE_DIR = ‘profiles’PYINSTRUMENT_USE_SIGNAL = False Add pyinstrument.middleware.ProfilerMiddleware to MIDDLEWARE_CLASSES There is a known issue in Pyinstrument while running in newer versions of Django. I have sent a Pull request that should fix this. Meanwhile make these changes manually in D:\\home\\Python27\\Lib\\site-packages\\pyinstrument\\middleware.py file Above changes would write .html files in profiles folder which we created earlier in wwwroot folder Open .html files in your favorite browser and you should see something like below which should help you 2) Silk: A live profiling and inspection tool for the Django framework. Silk intercepts and stores HTTP requests and database queries before presenting them in a user interface for further inspection. Below is the sample screenshot of all the requests I had and time taken for each. None of my url’s were interacting with database so queries show 0ms. If you click on a request, it would take you to individual request level details and with profiling enabled using decorators it would provide time spent at each function level. You can follow steps @ https://github.com/django-silk/silk to configure it. Their documentation is good and it was really easy. 3) django-dowser : This is based on dozer that can be used directly with Django app, except that this module gives you option to filter based on number of objects (issue tracking it). you might have to make little changes in original module and use below to install module instead of normal pip install from PyPl pip install git+git://github.com/munhitsu/django-dowser.git Other Approaches, I haven’t tried and looks promising django-debug-toolbar pyringe (stale project but liked idea of attaching to process) objgraph Pympler guppy FlaskProfilerMiddleware: Simple WSGI profiler middleware for finding bottlenecks in Flask web application. Below is my sample Flask App using ProfilerMiddleware. It generates pstat files in profiles folder, later can be visualized using tools like snakeviz, runsnakerun. from flask import Flask from werkzeug.contrib.profiler import ProfilerMiddleware app = Flask(__name__) @app.route(&quot;/&quot;) def hello(): fibnonci_normal(10) return &quot;Hello World!&quot; def fibnonci_normal(n): if n == 0: return 0 elif n == 1: return 1 else: return fibnonci_normal(n - 1) + fibnonci_normal(n - 2) app = ProfilerMiddleware(app,profile_dir=&quot;profiles&quot;) if __name__ == &quot;__main__&quot;: app.run() If you remove profile_dir, it would write logs to STDOUT. Check their documentation on details for adding restrictions/sort data. Other Approaches, I haven’t tried and looks promising flask-debugtoolbar dozer (Works for Django too)","categories":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/tags/python/"}],"author":"prashanthmadi"},{"title":" Running Flask App with HttpPlatformHandler in Azure App Services(Windows)\t\t","slug":"running-flask-app-with-httpplatformhandler-in-azure-app-serviceswindows","date":"2017-09-01T18:13:32.000Z","updated":"2019-03-26T17:52:58.088Z","comments":true,"path":"running-flask-app-with-httpplatformhandler-in-azure-app-serviceswindows/","link":"","permalink":"http://azureossd.github.io/running-flask-app-with-httpplatformhandler-in-azure-app-serviceswindows/","excerpt":"","text":"Flask is a micro web framework written in Python and based on the Werkzeug toolkit and Jinja2 template engine. Below are list of steps we would follow Create Sample Project Create Azure WebApp and Use Site Extension to Upgrade Python Create and Change Deployment script Adding web.config (for production app with waitress) Publish App You can find a Sample Python Flask project with above operations @ GitHub Link Create Sample Project in local environment Create index.py file with below content from flask import Flaskapp = Flask(name) @app.route(“/“)def hello(): return &quot;Hello World!&quot; if name == “main“: app.run() Create requirements.txt file with below content Flask==0.12 Install dependencies listed in requirements.txt file using below command. pip install –upgrade -r requirements.txt Run app in local environment using below command $ python index.py Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) Navigate to http://127.0.0.1:5000/ and you should see app up and running Create Azure WebApp and Use Site Extension to Upgrade PythonNavigate to Azure portal Create a new web app Setup Continuous Deployment Navigate to your App Service blade, select Extensions and then Add. From the list of extensions, scroll down until you spot the Python logos, then choose the version you need For this blog I’m choosing Python 2.7.12 x64, It would install new version of python @ D:\\home\\Python27 If you choose Python 3.5.2 x64, It would install new version of python @ D:\\home\\Python35 Create and Change Deployment scriptI have explained more on how to utilize deployment script and what it does @ link. you can use this script to run commands on Azure App Services after moving code to it. Install Azure Cli using below command npm install azure-cli -g Use Below command to create deployment script. azure site deploymentscript --python Above step would create below two files .deployment deploy.cmd Note: If you haven’t used nodejs/npm earlier, Create above files manually and copy content for these files from https://github.com/prashanthmadi/azure-flask-httpplatformhandler Replace content of deploy.cmd file with content at Link We are changing default deployment script(removing virtual environment creation and others) and adding below content to install packages listed in requirements.txt :: 2. Install packages echo Pip install requirements. D:\\home\\Python27\\python.exe -m pip install --upgrade -r requirements.txt IF !ERRORLEVEL! NEQ 0 goto error If you are using Python35 site extension change path from D:\\home\\Python27\\python.exe to D:\\home\\Python35\\python.exe in deploy.sh D:\\home\\Python35\\python.exe -m pip install --upgrade -r requirements.txt Adding web.config(Production Mode - Using Waitress)Waitress is meant to be a production-quality pure-Python WSGI server with very acceptable performance Create web.config file with below content &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;handlers&gt; &lt;add name=&quot;httpPlatformHandler&quot; path=&quot;*&quot; verb=&quot;*&quot; modules=&quot;httpPlatformHandler&quot; resourceType=&quot;Unspecified&quot; /&gt; &lt;/handlers&gt; &lt;httpPlatform processPath=&quot;D:\\home\\Python27\\python.exe&quot; arguments=&quot;run_waitress_server.py&quot; requestTimeout=&quot;00:04:00&quot; startupTimeLimit=&quot;120&quot; startupRetryCount=&quot;3&quot; stdoutLogEnabled=&quot;true&quot;&gt; &lt;environmentVariables&gt; &lt;environmentVariable name=&quot;PYTHONPATH&quot; value=&quot;D:\\home\\site\\wwwroot&quot; /&gt; &lt;environmentVariable name=&quot;PORT&quot; value=&quot;%HTTP_PLATFORM_PORT%&quot; /&gt; &lt;/environmentVariables&gt; &lt;/httpPlatform&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; If you observe carefully, we have httpplatform arguments section to run run_waitress_server.py file Added new evnironmentVariable PORT to pass the internal port number we use in waitress If you use Python35 site extension, change web.config content to use D:\\home\\Python35\\python.exe for processPath &lt;httpPlatform processPath=&quot;D:\\home\\Python35\\python.exe&quot; arguments=&quot;run_waitress_server.py&quot; requestTimeout=&quot;00:04:00&quot; startupTimeLimit=&quot;120&quot; startupRetryCount=&quot;3&quot; stdoutLogEnabled=&quot;true&quot;&gt; Add below line at the end in requirements.txt file. This would install waitress module during deployment waitress==1.0.1 Create a new file run_waitress_server.py with below content import os from waitress import serve from index import app serve(app,host=&quot;0.0.0.0&quot;,port=os.environ[&quot;PORT&quot;]) Publish AppNavigate to your root folder and commit your changes to WEB_APP_GIT_URL git init git add . git commit -m &quot;initial commit&quot; git remote add sampleflaskapp WEB_APP_GIT_URL git push sampleflaskapp master Here is my App on Azure After publish You can find a Sample Python Flask project with above operations @ GitHub Link","categories":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/tags/python/"}],"author":"prashanthmadi"},{"title":" Django app with HttpPlatformHandler in Azure App Services (Windows)\t\t","slug":"django-app-with-httpplatformhandler-in-azure-app-services-windows","date":"2017-09-01T18:11:46.000Z","updated":"2019-03-26T06:44:53.049Z","comments":true,"path":"django-app-with-httpplatformhandler-in-azure-app-services-windows/","link":"","permalink":"http://azureossd.github.io/django-app-with-httpplatformhandler-in-azure-app-services-windows/","excerpt":"","text":"In my previous blog Deploying Django App to Azure App Services using Git, I have provided detailed steps on how to run Django app in Azure App services using wfastcgi wfastcgi.py provides a bridge between IIS and Python using WSGI and FastCGI, similar to what mod_python provides for Apache HTTP Server.Even though using wfastcgi was preferred way to run Python apps in IIS. I would like to provide an alternate solution using HTTP Platform Handler in this blog.Below are list of steps we would follow- Create Sample Project- Create Azure WebApp and Use Site Extension to Upgrade Python- Create and Change Deployment script- Adding web.config (for production app use second option with waitress)- Publish AppYou can find a Sample Python Django project with above operations @ GitHub Link#### Create Sample ProjectFollow https://www.djangoproject.com/start/ to get started with Django- Install Django and- Write your first Django app(or)If you have PyCharm, Follow details at below link to create a sample app\\https://www.jetbrains.com/help/pycharm/2016.1/creating-django-project.html#### Create Azure WebApp and Use Site Extension to Upgrade PythonNavigate to Azure portal- Create a new web app- Setup Continuous Deployment- Navigate to your App Service blade, select Extensions and then Add.- From the list of extensions, scroll down until you spot the Python logos, then choose the version you need {.full-img}For this blog I’m choosing Python 2.7.12 x64, It would install new version of python @ D:\\home\\Python27#### Create and Change Deployment scriptI have explained more on how to utilize deployment script and what it does @ link. you can use this script to run commands on Azure App after moving code to it.Install Azure Cli using below command npm install azure-cli -gUse Below command to create deployment script. azure site deploymentscript –pythonAbove step would create below two files- .deployment- deploy.cmdNote: If you haven’t used nodejs/npm earlier, Create above files manually and copy content for these files from https://github.com/prashanthmadi/azure-django-httphandlerReplace content of deploy.cmd file with content at LinkWe are changing default deployment script(removing virtual environment creation and others) and adding below content to install packages listed in requirements.txt :: 2. Install packages echo Pip install requirements. D:\\home\\Python27\\python.exe -m pip install –upgrade -r requirements.txt IF !ERRORLEVEL! NEQ 0 goto error#### Adding web.config(Development Mode)Note: Ignore this section for production appAzure web apps would use IIS which can be configured using web.config file. In our web.config file we would ask the requests to use httpplatformhandler and forward them to python.exeCreate below file at root folder and copy content from linkweb.config &lt;?xml version=”1.0” encoding=”UTF-8”?&gt; &lt;system.webServer&gt; &lt;/system.webServer&gt; #### Adding web.config(Production Mode - Using Waitress)Waitress is meant to be a production-quality pure-Python WSGI server with very acceptable performanceDjango app by default uses a development server which would be started when we execute manage.py file. I would provide steps to use Waitress instead belowCreate web.config file with below content &lt;?xml version=”1.0” encoding=”UTF-8”?&gt; &lt;system.webServer&gt; &lt;/system.webServer&gt; If you observe carefully, we have changed- httpplatform arguments section to run_waitress_server.py instead of manage.py runserver %HTTP_PLATFORM_PORT%- Added new evnironmentVariable PORT to pass the internal port number we use in waitressAdd below line at the end in requirements.txt file. This would install waitress module during deployment waitress==1.0.1Create a new file run_waitress_server.py with below content import os from waitress import serve from django.core.wsgi import get_wsgi_application os.environ.setdefault(“DJANGO_SETTINGS_MODULE”, “djangosql.settings”) application = get_wsgi_application() serve(application,host=”0.0.0.0”,port=os.environ[“PORT”])I have seen some Azure users facing issue with ssl. set url_scheme to resolve the issue as below serve(application,host=”0.0.0.0”,port=os.environ[“PORT”],url_scheme=’https’)#### Publish AppNavigate to your root folder and commit your changes to WEB_APP_GIT_URL git init git add . git commit -m “initial commit” git remote add sampledjangoapp WEB_APP_GIT_URL git push sampledjangoapp masterHere is my App on Azure After publishYou can find a Sample Python Django project with above operations @ GitHub Link#### Serving Static FilesI have seen couple of users complaining about static files. Here is the fix for itUse below line of code(at D:\\home\\site\\wwwroot using kudu console) to generate static file folder in Django app, we can also stitch this inside deploy.cmd to automate it. Version number in url may change based on your python installation. D:\\home\\python27\\python.exe manage.py collectstatic –noinputOnce you have static folder in D:\\home\\site\\wwwroot folder as above screenshot- Navigate to Azure Portal and add a new section in Virtual application and directories under Application Settings with below values key : /static value : site\\wwwroot\\static mark the application checkbox- Navigate to D:\\home\\site\\wwwroot\\static folder and add web.config file with below content D:\\home\\site\\wwwroot\\static\\web.config content &lt;?xml version=”1.0”?&gt; &lt;system.webServer&gt; &lt;/system.webServer&gt; #### Final Output (with static files working):::","categories":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/tags/python/"}],"author":"prashanthmadi@outlook.com"},{"title":" Nodejs App Performance Tweaks - Azure App Services (Windows)\t\t","slug":"nodejs-app-performance-tweaks-azure-app-services-windows","date":"2017-09-01T18:08:23.000Z","updated":"2019-03-26T17:27:49.219Z","comments":true,"path":"nodejs-app-performance-tweaks-azure-app-services-windows/","link":"","permalink":"http://azureossd.github.io/nodejs-app-performance-tweaks-azure-app-services-windows/","excerpt":"","text":"Node.js is a JavaScript runtime built on Chrome’s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. At some point of your application lifecycle you might end-up with performance issue in any web application. This blog would help you fix such issue on nodejs app hosted in Azure App Services.As i have explained in Nodejs Architecture Blog, Azure App services has IIS which makes named pipe connection with node.exe using iisnode to server requests. These are the three main places where your app can experience bottleneck While transferring request to app instance(Front-end to worker Instance/ Before reaching IIS in worker role - happens very rare). Delay in IISnode making named-pipe connection with node.exe(most common in production apps). CPU intensive work in Nodejs Code. First Scenario is very rare. Useful Tools/logs Use New Relic to monitor application real time. More info @ https://newrelic.com/nodejs Gives full picture of nodejs applicaiton Response time for your applications Time taken by database and others. Finding Memory Leaks and CPU Usage - Link Check Failed Request Tracing/ FREB logs Performance TweaksIncrease number of node.exe’s per instance:By Default, every app instance would use only one node.exe process in Azure App Service. Let’s say if you are on a medium/Large instance of app service plan(with &gt;1 core processor) than you might not be fully utilizing machine. To increase number of node.exe’s per instance, Create a iisnode.yml file in app root folder and add below line of code nodeProcessCountPerApplication:0 nodeProcessCountPerApplication This setting controls the number of node processes that are launched per IIS application. Default value is 1. You can launch as many node.exeâ€™s as your VM core count by setting this to 0. Recommended value is 0 for most application so you can utilize all of the cores on your machine. Node.exe is single threaded so one node.exe will consume a maximum of 1 core and to get maximum performance out of your node application you would want to utilize all cores. Disable Session Affinity (Sharing load with all serves equally)If you have scaled-out your app to more than one instance. You can turn-off session affinity which might help overload issues . More details on this can be found at Disable Session affinity cookie (ARR cookie) for Azure web apps Check if issue is due to third-party services/database transactions.If you use newrelic, it would provide time spent on each query to database which might help in this case. Use Browser CacheRefer Enable Browser Cache Serve Static files at IIS level/ Use CDNCheck if your web.config file has a Static Content rule and make sure to serve all static files at IIS level. &lt;!-- First we consider whether the incoming URL matches a physical file in the /public folder --&gt; &lt;rule name=&quot;StaticContent&quot;&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;public{REQUEST_URI}&quot;/&gt; &lt;/rule&gt; In General Scenario, url hits IIS -&gt; url navigates to IISNODE -&gt; response is fetched for that url from node.exe By Adding Static Content rule, url hits IIS -&gt; IIS responds with data (aka static urlâ€™s are served by IIS and not nodejs)","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"nodejs","slug":"Azure-App-Service-Web-App/nodejs","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/nodejs/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"}],"author":"prashanthmadi"},{"title":" Enable PHP extensions on Azure Web App on Windows\t\t","slug":"enable-php-extensions-on-azure-web-app-on-windows","date":"2017-08-21T20:15:31.000Z","updated":"2019-03-26T06:45:26.411Z","comments":true,"path":"enable-php-extensions-on-azure-web-app-on-windows/","link":"","permalink":"http://azureossd.github.io/enable-php-extensions-on-azure-web-app-on-windows/","excerpt":"","text":"For the case your web app is hosted on Azure App Service on Windows, if the PHP extensions are not available, you need to install or enable them. Some PHP extensions that are available in default PHP but not enabled, such as php_gmp, php_ldap, php_sockets, etc. You can verify this from Kudu. If you use PHP on 32-bit platform, preinstalled PHP extensions are under “D:\\Program Files (x86)\\PHP\\\\&lt;your-php-version>\\ext”. If you use PHP 7 on 64-bit, check “D:\\Program Files\\PHP\\\\&lt;your-php-version>\\ext”. Here is how to enable them for your Azure App, Create the a file in d:\\home\\site\\ini (create the folder “ini” if the folder does not exist) and name it “extensions.ini” , Add the extension(s) in “extensions.ini” file, e.g. extension=php_gmp.dll extension=php_ldap.dll 3. Add PHP_INI_SCAN_DIR in App settings from Azure portal Key = PHP_INI_SCAN_DIR Value = d:\\home\\site\\ini Verify the extension from phpinfo page, if you see the extension section from phpinfo page, it is enabled. Reference, https://docs.microsoft.com/en-us/azure/app-service-web/web-sites-php-configure","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[],"author":"yiwang88"},{"title":" HTTP to HTTPS redirect for WordPress on Azure Web App on Linux\t\t","slug":"http-to-https-redirect-for-wordpress-on-azure-web-app-on-linux","date":"2017-08-04T19:00:24.000Z","updated":"2019-03-26T07:06:21.116Z","comments":true,"path":"http-to-https-redirect-for-wordpress-on-azure-web-app-on-linux/","link":"","permalink":"http://azureossd.github.io/http-to-https-redirect-for-wordpress-on-azure-web-app-on-linux/","excerpt":"","text":"If you host WordPress site on Azure Web App on Linux running Apache, here are the steps to implement HTTP to HTTPS redirect: 1. Add RewriteRule in .htaccess in WordPress application root RewriteCond %{HTTP:X-ARR-SSL} ^$ RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] 2. Once this RewriteRule is added, you may see wp-admin page lost style like this, this is caused by loading mixed content from http and https, Here is a way to fix this, add following code in wp-config.php, define(&apos;FORCE_SSL_ADMIN&apos;, true); if ( isset($_SERVER[&apos;HTTP_X_ARR_SSL&apos;]) ) $_SERVER[&apos;HTTPS&apos;]=&apos;on&apos;;","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"WordPress","slug":"Azure-App-Service-Web-App/WordPress","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/WordPress/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"http://azureossd.github.io/tags/wordpress/"},{"name":"https","slug":"https","permalink":"http://azureossd.github.io/tags/https/"}],"author":"yiwang88"},{"title":" Migrate WordPress content to Azure blob storage\t\t","slug":"migrate-wordpress-content-to-azure-blob-storage","date":"2017-06-21T18:23:44.000Z","updated":"2019-03-26T17:14:40.922Z","comments":true,"path":"migrate-wordpress-content-to-azure-blob-storage/","link":"","permalink":"http://azureossd.github.io/migrate-wordpress-content-to-azure-blob-storage/","excerpt":"","text":"Azure storage provides solution for applications requiring scalable, durable, and highly available storage for their data. In this blog, we cover the steps how to migrate existing WordPress content from file system to Azure blob storage. 1. Create storage blob Create an Azure storage account Create blob storage Create a blob container to store the images 2. Install “Windows Azure Storage for WordPress” plugin from https://wordpress.org/plugins/windows-azure-storage/ Once this plugin is installed, test to upload a image to Azure blob storage, you can detect the file path, and follow the same path structure when moving existing content files to blob storage. The path will be like this, 3. Upload wp-content to Azure storage To upload files to Blob storage, you can launch storage explorer from Azure portal, Azcopy is command line tool to download/upload files to Blob storage, to upload files, AzCopy /Source:C:\\\\myfolder /Dest:https://myaccount.blob.core.windows.net/mycontainer /DestKey:key /S (Specifying option /S uploads the contents of the specified directory to Blob storage recursively, meaning that all subfolders and their files will be uploaded as well.) Refer to the document https://docs.microsoft.com/en-us/azure/storage/storage-use-azcopy 4. Modify WordPress content URLs, point to the content in azure storage There are few ways to update content links. For example, use “Velvet Blues Update URLs” plugin in this blog, https://wordpress.org/plugins/velvet-blues-update-urls/ File path on file system is &lt;site-url&gt;/wp-content/uploads (the old URL) From “Velvet Blues Update URLs” plugin, replace it by &lt;storage-url&gt;/&lt;container-name&gt; (the new URL) E.g. 5. Test from from web app - Find an image from an article, the URL is pointing to blog storage now","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"http://azureossd.github.io/tags/wordpress/"},{"name":"blob storage","slug":"blob-storage","permalink":"http://azureossd.github.io/tags/blob-storage/"}],"author":"yiwang88"},{"title":" Redirect HTTP to HTTPS from .htaccess for Azure Web App on Linux on Apache\t\t","slug":"http-to-https-redirect-for-azure-web-app-on-linux","date":"2017-06-20T00:46:50.000Z","updated":"2019-03-26T07:05:41.042Z","comments":true,"path":"http-to-https-redirect-for-azure-web-app-on-linux/","link":"","permalink":"http://azureossd.github.io/http-to-https-redirect-for-azure-web-app-on-linux/","excerpt":"","text":"1. To verify the request is sent from HTTP or HTTPS for Web App on Linux: Unlike the application running on Web App on Windows, the server variable “HTTPS” is not defined for Web App on Linux. Check for “X-ARR-SSL”, this variable is set if the request is HTTPS. This information may be verified from Apache server variables, but not showing from header in Fiddler. 2. Implement rewrite rule in .htaccess to allow HTTP to HTTPS redirect: Instead of using system variable “HTTPS”, modify the RewriteCond to use “HTTP:X-ARR-SSL”, sample code in .htaccess: 123RewriteEngine OnRewriteCond %&#123;HTTP:X-ARR-SSL&#125; ^$RewriteRule ^(.*)$ https://%&#123;HTTP_HOST&#125;%&#123;REQUEST_URI&#125; [L,R=301]","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[{"name":".htaccess","slug":"htaccess","permalink":"http://azureossd.github.io/tags/htaccess/"},{"name":"web app on Linux","slug":"web-app-on-Linux","permalink":"http://azureossd.github.io/tags/web-app-on-Linux/"}],"author":"yiwang88"},{"title":" First steps with Bitnami WordPress in Azure VM\t\t","slug":"first-steps-with-bitnami-wordpress-in-azure-vm","date":"2017-05-26T20:08:57.000Z","updated":"2019-03-26T06:51:02.289Z","comments":true,"path":"first-steps-with-bitnami-wordpress-in-azure-vm/","link":"","permalink":"http://azureossd.github.io/first-steps-with-bitnami-wordpress-in-azure-vm/","excerpt":"","text":"If you choose Bitnami WordPress VM from Azure Market, you need to take the following considerations: 1.- Review the username &amp; password for WordPress Application in the installation step. For example, the username is “user“ The password will be shown in the Boot Diagnostics the first time after creating the VM, you need to save this password. You will use this password for logging into WordPress administration portal. 2.- Know how to connect to Bitnami VM and check structure folder: You can use SSH terminal to connect to Bitnami VM. For Windows you can use PuTTY or terminal for Linux or Mac, you will find all the information here: https://docs.bitnami.com/azure/faq/#how-to-access-a-server-using-an-ssh-tunnel I will use PuTTY for this blog. You can find the application installed by Bitnami using the following path: /opt/bitnami/apps For services you need to use the following path: /opt/bitnami In this case you can find apache2/, mysql/, php/ You can find more information about this directory structure here: https://docs.bitnami.com/azure/faq/#what-is-the-directory-structure 3.- How to modify php.ini in Bitnami: You will find php.ini in this directory: /opt/bitnami/php/etc/php.ini 4.- To start or stop services in Bitnami, you need to use the following commands: a) To review the status of the services: sudo /opt/bitnami/ctlscript.sh status b) To start/stop/restart these services you can use: sudo /opt/bitnami/ctlscript.sh restart apache You can find more information in the following reference: https://docs.bitnami.com/azure/faq/#how-to-start-or-stop-the-services 5.- How to enter to phpmyadmin. By default phpmyadmin is for just 127.0.0.1, if you try to browse you will get this message: In this situation you need to create a SSH tunnel. You will find all the steps described here: https://docs.bitnami.com/azure/components/phpmyadmin/ If you are using PuTTY, you need to create a tunnel that will redirect from 80 to 8888 After creating this tunnel, you can browse phpmyadmin using http://127.0.0.1:8888/phpmyadmin and you need to set “root” user and password is the same of the application password that you saved in the boot diagnostics. 6.- Logging into WordPress admin and how to find WordPress files in directory: To can use 127.0.0.1 with port 8888 http://127.0.0.1:8888/wp-admin or use the public ip address that azure assigned or custom domain you have already configured. The first time you need to use “user” and password “generated from boot diagnostics” Then you can add or change this password in WordPress Administration or phpMyAdmin, but remember that you need to change the same in root for MySQL as well. You will find WordPress files in the following location: /opt/bitnami/apps/wordpress/htdocs You can find user/password for database in wp-config.php file. 7.- How to connect by sftp to Bitnami You can use SSH to connect to Bitnami with port 22 and ssh username and password defined in azure portal and the same that you use for ssh. Or using VsFTPd with the following reference: https://docs.bitnami.com/azure/components/vsftpd/ If you want more information about azure and Bitnami you can find it in the following reference: https://docs.bitnami.com/azure/faq/","categories":[{"name":"WordPress","slug":"WordPress","permalink":"http://azureossd.github.io/categories/WordPress/"}],"tags":[{"name":"Azure VM","slug":"Azure-VM","permalink":"http://azureossd.github.io/tags/Azure-VM/"},{"name":"Bitnami","slug":"Bitnami","permalink":"http://azureossd.github.io/tags/Bitnami/"}]},{"title":" Azure App Service Java CICD with Maven\t\t","slug":"azure-app-service-java-cicd-with-maven","date":"2017-05-09T17:37:52.000Z","updated":"2019-03-26T05:10:52.097Z","comments":true,"path":"azure-app-service-java-cicd-with-maven/","link":"","permalink":"http://azureossd.github.io/azure-app-service-java-cicd-with-maven/","excerpt":"","text":"Azure App Service provides integration with Github, Bitbucket, etc however, for Java webapps, it does not provide a default way to build and deploy the webapp directly from github. But the good news is, it does provide hooks by which you can modify the Kudu deployment script to achieve the continuous integration and continuous build functionality. Steps to achieve CICD - 1. Copy the required Apache Maven directory in your repo. 2. Create 2 files – .deployment and deploy.cmd .deployment contents: [config] **command = deploy.cmd** deploy.cmd contents: set MAVEN_OPTS=-Djava.net.preferIPv4Stack=true -Djava.net.preferIPv6Addresses=false **.\\apache-maven-3.3.9\\bin\\mvn clean install -Ddir=D:\\home\\site\\wwwroot\\webapps** 3. After this setup a continuous integration point with your Java app service on Azure. Next time onwards, whenever you push something to your repo, it’ll trigger the build and deploy the changes in your webapp. For each deployment, it’ll rebuild the project. Please refer the Github link - https://github.com/pker/AzureJavaWebapp-CICDwithMaven for sample Java webapp project with CICD configured.","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[],"author":"prasadker@outlook.com"},{"title":" WordPress Migration: Easy as A-B-C, 1-2-3\t\t","slug":"wordpress-migration-easy-as-a-b-c-1-2-3","date":"2017-04-28T23:04:42.000Z","updated":"2019-03-26T20:55:56.134Z","comments":true,"path":"wordpress-migration-easy-as-a-b-c-1-2-3/","link":"","permalink":"http://azureossd.github.io/wordpress-migration-easy-as-a-b-c-1-2-3/","excerpt":"","text":"Fig 1. WordPress Migration Components There are 3 steps to migrating a WordPress website to Azure App Service Web Apps. Copy WordPress files Migrate the MySQL Database Configure WordPress Step 1. Copy WordPress files Make a backup of the current WordPress website. Tools commonly used for this is FTP Software like FileZilla or WinSCP. Sample WordPress Installation Folder: Again, use FTP software or Kudu (http://&lt;webappname&gt;.scm.azurewebsites.net) to upload the files to your web app. Step 2. Migrate the MySQL Database If the DB is visible externally, you can use tools such as WP Buddy+ to migrate the MySQL contents. Other popular methods are MySQL Workbench, PHPMyAdmin or command-line in Kudu. Step 3. Configure WordPress Now that the contents and database have been migrated. The next step is to configure WordPress to talk to the new database. This is done in wp-config.php. Open this file and ensure the appropriate credentials are being used to communicate with the MySQL Database. Once the DB is working, use tools such as WordPress Buddy+ to update the HOME and SITE_URL. More on this here (see WordPress Tools). MySQL In-App Sample","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[],"author":"msangapu"},{"title":" Capture Java VM Traffic using Fiddler\t\t","slug":"capture-java-vm-traffic-using-fiddler","date":"2017-04-26T19:25:21.000Z","updated":"2019-03-26T05:55:56.791Z","comments":true,"path":"capture-java-vm-traffic-using-fiddler/","link":"","permalink":"http://azureossd.github.io/capture-java-vm-traffic-using-fiddler/","excerpt":"","text":"Customer’s using the Azure SDK for Java may need to capture network traffic for the REST API requests to troubleshoot issues. Below are the steps to configure Fiddler and Eclipse to capture the API requests. Telerik provides documentation for configuring your Java app to send traffic to Fiddler available here, however, additional steps will be need to capture secure traffic which is provided in this article. Other development tools can be used but this article covers Eclipse and IntelliJ IDEA. To use other tools, use the VM arguments described in either the Eclipse or IntelliJ IDEA sections. Prerequisites Networking Tracing- Fiddler - https://www.telerik.com/download/fiddler Development Tools Eclipse - https://www.eclipse.org/downloads/ or IntelliJ IDEA Community - https://www.jetbrains.com/idea/download/ Configuring Fiddler By default, Fiddler is not configured to decode any encoded traffic. To enable this feature you can select an encoded request/response and select the “click to decode” message. TIP: Stop capturing of all traffic from Fiddler by pressing f12. All traffic sent from the Java App will still be captured in Fiddler when traffic is sent using the proxy settings. This makes it easier to troubleshoot the requests coming from the app. You will also need to perform the following. 1) Select the Tools menu. 2) Choose Telerik Fiddler Options. 3) Select the HTTPS tab and check the following Capture HTTPS CONNECTs Decrypt HTTPS Traffic 4) We’ll need to export the certificate used by Fiddler to use with Eclipse later. Perform the following. Select the “Actions” button. Choose “Export Root Certificate to Desktop. Press the OK button. 5) To create a keystore with this certificate, perform the following. Open the command line as administrator. echo %JAVA_HOME% Change directories to the variable provided (I.e. C:\\Program Files\\Java\\jdk1.8.0_121 in my case). Cd bin keytool.exe -import -file C:\\Users\\\\Desktop\\FiddlerRoot.cer -keystore FiddlerKeystore -alias Fiddler Enter a password and confirm the password. Trust this certificate? [no]: y Example screenshot below. Configure Eclipse 1) In Eclipse, select the Run menu and choose “Run Configurations”. 2) Select your Project and choose the “Arguments” tab. 3) Enter the following in the VM arguments section. -DproxySet=true -DproxyHost=127.0.0.1 -DproxyPort=8888 -Djavax.net.ssl.trustStore=&quot;path\\\\to\\\\java_home\\\\bin\\\\FiddlerKeyStore&quot; -Djavax.net.ssl.trustStorePassword=&quot;password\\_used\\_during\\_keystore\\_creation&quot; 4) Press Apply and Run. Configuring IntelliJ IDEA Select the Run menu and choose “Edit Configurations” Select your Java Application on the left and enter the following “VM Options”. -DproxySet=true-DproxyHost=127.0.0.1-DproxyPort=8888-Djavax.net.ssl.trustStore=”path\\to\\java_home\\bin\\FiddlerKeyStore”-Djavax.net.ssl.trustStorePassword=”password_used_during_keystore_creation” Press OK, Apply, and Run the App. Fiddler Capture Examples 1) HTTP 401 response showing the JSON output for the authentication request from the Azure SDK for Java. 2) HTTP 200 with JSON response for a REST API to the Azure Resource Management Service from the Azure SDK for Java","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"Java","slug":"Azure-App-Service-Web-App/Java","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/Java/"}],"tags":[],"author":"toanms"},{"title":" An Example of Setting WordPress Email with Office 365 SMTP\t\t","slug":"an-example-of-setting-wordpress-email-with-office-365-smtp","date":"2017-04-20T22:24:19.000Z","updated":"2019-03-26T05:12:56.224Z","comments":true,"path":"an-example-of-setting-wordpress-email-with-office-365-smtp/","link":"","permalink":"http://azureossd.github.io/an-example-of-setting-wordpress-email-with-office-365-smtp/","excerpt":"","text":"Install “WP Mail SMTP“ plugin in WordPress (use this plugin as example) Configure WP Mail SMTP using ‘smtp.office365.com’, e.g. Test send Email","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[],"author":"yiwang88@hotmail.com"},{"title":" Send email on App Service using Office 365 (O365)\t\t","slug":"send-mail-on-app-service-using-php-mailer-and-o365","date":"2017-03-27T22:06:02.000Z","updated":"2019-03-26T19:37:32.772Z","comments":true,"path":"send-mail-on-app-service-using-php-mailer-and-o365/","link":"","permalink":"http://azureossd.github.io/send-mail-on-app-service-using-php-mailer-and-o365/","excerpt":"","text":"For PHP - This is a Proof of Concept to send email using the PHP Mailer library and Office 365. From the PHPMailer GitHub site, follow the “Minimal installation” section and download class.phpmailer.php and class.smtp.php. Copy-paste the code from “A Simple Example” section or use the following: &lt;?php require &apos;class.phpmailer.php&apos;; require &apos;class.smtp.php&apos;; $mail = new PHPMailer; //$mail-&gt;SMTPDebug = 3; // Enable verbose debug output $mail-&gt;isSMTP(); // Set mailer to use SMTP $mail-&gt;Host = &apos;smtp.office365.com&apos;; // Specify main and backup SMTP servers $mail-&gt;SMTPAuth = true; // Enable SMTP authentication $mail-&gt;Username = &apos;from.email@domain.com&apos;; // SMTP username $mail-&gt;Password = &apos;password&apos;; // SMTP password $mail-&gt;SMTPSecure = &apos;tls&apos;; // Enable TLS encryption, `ssl` also accepted $mail-&gt;Port = 25; // TCP port to connect to $mail-&gt;setFrom(&apos;from.email@domain.com&apos;, &apos;Name&apos;); $mail-&gt;addAddress(&apos;recipient.email@domain.com&apos;); // Add a recipient //$mail-&gt;addAttachment(&apos;/var/tmp/file.tar.gz&apos;); // Add attachments //$mail-&gt;addAttachment(&apos;/tmp/image.jpg&apos;, &apos;new.jpg&apos;); // Optional name $mail-&gt;isHTML(true); // Set email format to HTML $mail-&gt;Subject = &apos;Here is the subject&apos;; $mail-&gt;Body = &apos;This is the HTML message body &lt;b&gt;in bold!&lt;/b&gt;&apos;; $mail-&gt;AltBody = &apos;This is the body in plain text for non-HTML mail clients&apos;; if(!$mail-&gt;send()) { echo &apos;Message could not be sent.&apos;; echo &apos;Mailer Error: &apos; . $mail-&gt;ErrorInfo; } else { echo &apos;Message has been sent&apos;; } I did the above using kudu, so my folder looked like this: And I ran the script from the command-line “php mail.php”. Here’s the message that was sent: For Java - Please check the sample below and modify it according to your application - import org.apache.commons.mail.DefaultAuthenticator; import org.apache.commons.mail.EmailException; import org.apache.commons.mail.HtmlEmail; public class JavaMailer { public static void main(String[] args) { HtmlEmail htmlemail = new HtmlEmail(); htmlemail.setHostName(“hostname”); htmlemail.setSmtpPort(“port”); htmlemail.setAuthenticator(new DefaultAuthenticator(“user”, “password”)); htmlemail.setStartTLSEnabled(true); try { htmlemail.setFrom(“abc@microsoft.com”); htmlemail.setSubject(“Test Subject”); htmlemail.setMsg(“This is a test &lt;b&gt; html email &lt;/b&gt; … :-)” ); htmlemail.addTo(“abc@microsoft.com”); htmlemail.send(); System.out.println(“Your email is sent successfully”); } catch (EmailException e) { e.printStackTrace(); } } } Make sure you add the commons-email-1.4.jar and javax.mail.jar in your classpath. You can run this from command line like - java –cp ./commons-email-1.4.jar;./javax.mail.jar JavaMailer","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[],"author":"msangapu"},{"title":" Increase Import Max File Size for PHPMyAdmin - Azure App Service\t\t","slug":"increase-import-max-file-size-for-phpmyadmin-azure-app-service","date":"2017-03-08T02:38:50.000Z","updated":"2019-03-26T07:10:43.787Z","comments":true,"path":"increase-import-max-file-size-for-phpmyadmin-azure-app-service/","link":"","permalink":"http://azureossd.github.io/increase-import-max-file-size-for-phpmyadmin-azure-app-service/","excerpt":"","text":"When using PHPMyAdmin via SiteExtension or with MySQL in-app on Azure Web Apps, the maximum upload size when Importing a SQL file is set to 8,192KiB. This is due to the default upload_max_filesize and post_max_size for PHP on Azure Web Apps. To increase the value, you’ll need to modify both the local and master values for PHP. NOTE: If you’re planning to import a very large SQL file, please consider performing the steps at Migrating data between MySQL databases using kudu console – Azure App Service. In the Azure Portal, select your web app and go to “Application Settings”. Go to the App Settings section and add the following key and value and press save. 12KEY = PHP_INI_SCAN_DIRVALUE = D:\\home\\site\\ini 3. Go to the KUDU site for your web app (https://\\&lt;sitename>.scm.azurewebsites.net/debugconsole). 4. Go to site directory and press the “+” button and create an “ini” directory. 5. In the ini directory, create an “extensions.ini” file. 6. Press the edit button next to the file. 7. Add the following to the file and save. This will modify the Master values. 12upload_max_filesize=30Mpost_max_size=30M 8. Go to the wwwroot directory and create a “.user.ini” file. 9. Edit the file and add the same values as mentioned in step 7 above. This will modify the Local values. 10. Restart the site using the Azure Portal. 11. PHPMyAdmin Import page will also reflect the changes.","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"MySQL","slug":"Azure-App-Service-Web-App/MySQL","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/MySQL/"},{"name":"PHP","slug":"Azure-App-Service-Web-App/MySQL/PHP","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/MySQL/PHP/"}],"tags":[],"author":"toanms"},{"title":" How to enable PHP LDAP in Azure Web Apps\t\t","slug":"how-to-enable-php-ldap-in-azure-web-apps","date":"2017-03-03T20:01:45.000Z","updated":"2019-03-26T07:01:03.784Z","comments":true,"path":"how-to-enable-php-ldap-in-azure-web-apps/","link":"","permalink":"http://azureossd.github.io/how-to-enable-php-ldap-in-azure-web-apps/","excerpt":"","text":"PHP LDAP extension is not enabled by default in Azure Web App, you need the following steps: How to enable extensions in the default PHP runtime Go to https://portal.azure.com Select your web app and go to App Settings Add an app setting called PHP_INI_SCAN_DIR with value d:\\home\\site\\ini Go to Kudu Console https://%3Cyourwebappname%3E.scm.azurewebsites.net/DebugConsole Navigate to site and create a new folder called ini with mkdir ini command. Create the file extensions.ini inside this folder with touch extensions.ini command. Write the following line: extension=php_ldap.dll Restart the web app and test. You can check LDAP Documentation for more information: http://php.net/manual/en/function.ldap-bind.php // Authentication example $ldaprdn = &apos;uname&apos;; // ldap rdn or dn $ldappass = &apos;password&apos;; // associated password // Connection to LDAP server $ldapconn = ldap_connect(&quot;ldap.example.com&quot;) or die(&quot;Could not connect to LDAP server.&quot;); if ($ldapconn) { $ldapbind = ldap_bind($ldapconn, $ldaprdn, $ldappass); if ($ldapbind) { echo &quot;LDAP bind successful...&quot;; } else { echo &quot;LDAP bind failed...&quot;; } }","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"PHP","slug":"Azure-App-Service-Web-App/PHP","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"LDAP","slug":"LDAP","permalink":"http://azureossd.github.io/tags/LDAP/"}],"author":"msedison"},{"title":" Steps to Enable Xdebug for PHP Profiling \t\t","slug":"steps-to-enable-xdebug-for-php-profiling","date":"2017-01-09T17:57:41.000Z","updated":"2019-03-26T20:01:18.805Z","comments":true,"path":"steps-to-enable-xdebug-for-php-profiling/","link":"","permalink":"http://azureossd.github.io/steps-to-enable-xdebug-for-php-profiling/","excerpt":"","text":"By Yi Wang and Mangesh Sangapu Find the matching version of xdebug extension from “D:\\devtools\\xdebug\\2.4.0\\“,for example, if you have PHP 5.6, use “D:\\devtools\\xdebug\\2.4.0\\php_5.6\\php_xdebug-2.4.0-5.6-vc11-nts.dll”. To access D: drive, use Kudu &lt;your-website-name&gt;.scm.azurewebsites.net, or “Advanced Tools” in Azure portal, Add Xdebug extension in Application Settings-&gt;App settings: PHP_ZENDEXTENSIONS = D:\\devtools\\xdebug\\2.4.0\\php_5.6\\php_xdebug-2.4.0-5.6-vc11-nts.dll Create Xdebug profile output directory “D:\\home\\site\\wwwroot\\bin\\xdebug_profiles” Create “D:\\home\\site\\wwwroot\\.user.ini”, add follow in settings in “.user.ini” xdebug.profiler_enable=0 xdebug.profiler_output_dir=”D:\\home\\site\\wwwroot\\bin\\xdebug_profiles” xdebug.profiler_enable_trigger=1 (Note: To enable Xdebug all the time, set “xdebug.profiler_enable=1”, and remove “xdebug.profiler_enable_trigger” ) Trigger Xdebug profiling as “http://&lt;your-site&gt;/&lt;page-name&gt;.php?XDEBUG_PROFILE=1” Additional Settings To append the filename to the xdebug output filename, use the following setting in .user.ini: xdebug.trace_output_name = cachegrind.out.%s Specifier Meaning Example Format Example Filename %s script name 2 cachegrind.out.%s cachegrind.out._home_httpd_html_test_xdebug_test_php Links to Xdebug Profile Viewers Wincache Grind QCacheGrind Xdebug Reference Documentation https://xdebug.org/docs/ More reference Troubleshooting PHP Performance in Microsoft Azure Web Sites with Xdebug","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"PHP","slug":"Azure-App-Service-Web-App/PHP","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"Xdebug","slug":"Xdebug","permalink":"http://azureossd.github.io/tags/Xdebug/"}],"author":"yiwang88"},{"title":" Install ionCube Loader extension for PHP site on Azure App\t\t","slug":"install-ioncube-loader-extension-for-php-site-on-azure-app","date":"2016-12-28T23:34:19.000Z","updated":"2019-03-26T16:26:42.871Z","comments":true,"path":"install-ioncube-loader-extension-for-php-site-on-azure-app/","link":"","permalink":"http://azureossd.github.io/install-ioncube-loader-extension-for-php-site-on-azure-app/","excerpt":"","text":"As required by this extension, ionCube should be the first Zend extension installed before any other Zend extensions. Simply adding PHP extension in application Settings could not meet this requirement. In this case, we need to edit php.ini, here are the steps: Follow this link to create custom php.ini, https://github.com/projectkudu/kudu/wiki/Xdt-transform-samples#using-a-custom-phpini . Find the correct php.ini from “D:\\local\\Config\\PHP-xxx\\php.ini, copy it to D:\\home\\site. Download the correct version of ionCube extension from https://www.ioncube.com/loaders.php (check Compiler and Architecture from phpinfo page, use Non-TS 32 bit, e.g. Windows VC11 (Non-TS) 32 bits in this example)[ Copy ioncube_loader .dll to D:\\home\\site\\ext, for example, if you have PHP 5.6, copy “ioncube_loader_win_5.6.dl” to D:\\home\\site\\ext\\ioncube_loader_win_5.6.dll Edit D:\\home\\site\\php.ini, put “ioncube_loader_win_5.6.dll” as first Zend extension, e.g. Verify from phpinfo page for the extension, you should see the extension if installed successfully, e.g.","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"}],"author":"yiwang88"},{"title":" Best Practices for WordPress Security on Azure\t\t","slug":"best-practices-for-wordpress-security-on-azure","date":"2016-12-26T18:00:33.000Z","updated":"2019-03-26T05:50:53.328Z","comments":true,"path":"best-practices-for-wordpress-security-on-azure/","link":"","permalink":"http://azureossd.github.io/best-practices-for-wordpress-security-on-azure/","excerpt":"","text":"This article was put together by Mangesh Sangapu and Yi Wang. Shout-out to Cory Fowler and Sunitha Muthukrishna for additional tips. WordPress Security is often an overlooked feature. Customers are quick to configure their site, but often forget to fine tune the security aspect. Here we have compiled steps that will help make your WordPress site more robust on Azure. More information can also be found at the official WordPress.org site: https://codex.wordpress.org/Hardening_WordPress 1) wp-config.php Customize and modify default settings in wp-config.php By default, WordPress use table prefix “wp_“ to create database tables during installation, to secure the access to database tables,\\recommend to use different table prefix from the default value. As WordPress use bare cookies instead of PHP sessions to track login state, it is important to have authentication cookie for the website. While installing WordPress, you are asked to provide the values of keys &amp; salts, however, you may choose to skip this step for faster installation. In this case, WordPress insert default value for keys &amp; salts (‘put your unique phrase here’).After the WordPress site is installed, you can edit wp-config.php, using the secret-key service link to generate a set of keys &amp; salts. 2) WordPress admin Username and Password The default or commonly used administrator login name can be “admin” or “administrator”, do not use them as the username. During WordPress installation, you are provided a strong admin login password, use the strong password, don’t use weak passwords like test123, which are easy to guess and break through. 3) Keep WordPress updated WordPress can automatically update itself to a new minor release without any user input. For major updates, WordPress shows a notification that an update is available and a user can initiate the update. WordPress has auto update enabled by default, you should keep this default setting. In the case you have disabled auto update, you should update WordPress periodically. You should also keep all plugins and theme updated with most current version as well. 4) Disable File Editing WordPress provide a built-in editor for editing files from your browser. This feature is enabled by default, allows administrator users to edit PHP files for plugins and theme from WordPress Dashboard. However, this is also give attackers a tool to execute code if they break login. WordPress has a constant ‘DISALLOW_FILE_EDIT’, to disable editing from Dashboard. You can modify it in wp-config.php: define(‘DISALLOW_FILE_EDIT’, true); It removes the ‘edit_themes’, ‘edit_plugins’ and ‘edit_files’ capabilities of all users. This will stop some attacks from inserting and executing malicious code. 5) Backup regularly Azure provides functionality to backup your web sites automatically. Read more about it here. 6) web.config Use web.config to disable access to wp-config.php and limit access to wp-login.php Restrict web access to wp-config.php 123456789&lt;system.webserver&gt; &lt;security&gt; &lt;requestFiltering&gt; &lt;denyUrlSequences&gt; &lt;add sequence=&quot;wp-config.php&quot; /&gt; &lt;/denyUrlSequences&gt; &lt;/requestFiltering&gt; &lt;/security&gt;&lt;/system.webserver&gt; Restrict access to wp-login.php by IP addresses &lt;location path=&quot;wp-login.php&quot;&gt; &lt;system.webServer&gt; &lt;security&gt; &lt;!-- this line blocks all IP addresses, except those listed below --&gt; &lt;ipSecurity allowUnlisted=&quot;false&quot;&gt; &lt;add ipAddress=&quot;xxx.xxx.xxx.xxx&quot; allowed=&quot;true&quot; /&gt; &lt;add ipAddress=&quot;xxx.xxx.xxx.xxx&quot; allowed=&quot;true&quot; /&gt; &lt;/ipSecurity&gt; &lt;/security&gt; &lt;/system.webServer&gt; &lt;/location&gt; Consider renaming this file (ex: login.php or secure_xyz_login.php) In addition to the WordPress login/password, use PHP HTTP Authentication 7) Xml-rpc.php This is WordPress API and if you don’t have any plugins requiring it, then you should disallow access by renaming it. 8) Dynamic and Static IP Security If you find that unauthorized IP addresses are requesting access to the site, consider implimenting Static IP Restrictions. Alternatively, you can also restrict Dynamic IP Addresses. 9) Reduce XSS Attacks In .user.ini, use the following setting to reduce XSS attacks: session.cookie_httponly = false More information here. 10) Prevent clickjacking attacks To configure IIS to send the X-Frame-Options header, add this your site’s Web.config file: .xml .line-numbers .language-xml style123456789&lt;system.webServer&gt; ... &lt;httpProtocol&gt; &lt;customHeaders&gt; &lt;add name=&quot;X-Frame-Options&quot; value=&quot;SAMEORIGIN&quot; /&gt; &lt;/customHeaders&gt; &lt;/httpProtocol&gt; ...&lt;/system.webServer&gt; More information here.","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"PHP","slug":"Azure-App-Service-Web-App/PHP","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/PHP/"},{"name":"WordPress","slug":"Azure-App-Service-Web-App/PHP/WordPress","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/PHP/WordPress/"}],"tags":[{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"best practice","slug":"best-practice","permalink":"http://azureossd.github.io/tags/best-practice/"},{"name":"hack","slug":"hack","permalink":"http://azureossd.github.io/tags/hack/"},{"name":"hacked","slug":"hacked","permalink":"http://azureossd.github.io/tags/hacked/"},{"name":"security","slug":"security","permalink":"http://azureossd.github.io/tags/security/"},{"name":"site","slug":"site","permalink":"http://azureossd.github.io/tags/site/"},{"name":"wordpress","slug":"wordpress","permalink":"http://azureossd.github.io/tags/wordpress/"}],"author":"msangapu@outlook.com"},{"title":" Running Python Webjob on Azure App Services using non-default python version\t\t","slug":"running-python-webjob-on-azure-app-services-using-non-default-python-version","date":"2016-12-10T00:46:24.000Z","updated":"2019-03-26T19:32:06.485Z","comments":true,"path":"running-python-webjob-on-azure-app-services-using-non-default-python-version/","link":"","permalink":"http://azureossd.github.io/running-python-webjob-on-azure-app-services-using-non-default-python-version/","excerpt":"","text":"You can run programs or scripts in WebJobs in your Azure App Service web app in three ways: on demand, continuously, or on a schedule. There is no additional cost to use WebJobs. This article shows how to run Python Webjob on Azure App Services using non-default python version. we would follow below list of steps to do this Create a sample app in local Create Azure WebApp and Use Site Extension to Upgrade Python Add run.cmd file to change default Python version Upload the app Install dependencies Create a sample app in localex: start.py import sys print(sys.version) Create Azure WebApp and Use Site Extension to Upgrade Python Navigate to Azure portal Create a new web app Navigate to your App Service blade, select Extensions and then Add. From the list of extensions, scroll down until you spot the Python logos, then choose the version you need For this blog I’m choosing Python 3.5.2 x64, It would install new version of python @ D:\\home\\Python35 Add run.cmd file to change default Python versionTo give little background, We use the following logic to decide which file is the script to run within the job’s directory: Per file type we look first for a file named: run.{file type extension} (for example run.cmd or run.exe ). If it doesn’t exists for all file types, we’ll then look for the first file with a supported file type extension. The order of file types extension used is: .cmd , .bat , .exe , .ps1 , .sh , .php , .py , .js . The recommended script file to have in your job directory is: run.cmd . Source: https://github.com/projectkudu/kudu/wiki/Web-jobs In order for us to use custom python version instead of default python27, we add run.cmd file with below content in it D:\\home\\Python35\\python.exe start.py you can use any other file instead of start.py and python version above as per your requirement. Upload the app zip all your app content in local Navigate to Azure portal Navigate to your App Service blade, select WebJobs and then Add. Provide Necessary details like type and others After clicking Ok, you should see new webjob available to run Below is my webjob output, where i’m printing python version used to run it Install dependenciesRefer Below link for details https://blogs.msdn.microsoft.com/azureossds/2015/06/29/install-native-python-modules-on-azure-web-apps-api-apps/","categories":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/tags/python/"},{"name":"Python-Wheel","slug":"Python-Wheel","permalink":"http://azureossd.github.io/tags/Python-Wheel/"},{"name":"pip","slug":"pip","permalink":"http://azureossd.github.io/tags/pip/"}],"author":"prashanthmadi"},{"title":" MySQL In-App Configuration for PHP Content Management Systems\t\t","slug":"mysql-in-app-configuration-for-php-content-management-systems","date":"2016-12-09T22:29:26.000Z","updated":"2019-03-26T17:25:05.080Z","comments":true,"path":"mysql-in-app-configuration-for-php-content-management-systems/","link":"","permalink":"http://azureossd.github.io/mysql-in-app-configuration-for-php-content-management-systems/","excerpt":"","text":"Read more about MySQL In-App here. Content Management Systems such as WordPress, Drupal, Joomla contain the database credentials within a configuration file. If you decide to use MySQL In-App for development purposes, you will quickly realize that you need to modify these credentials to work with MySQL In-App. Below is a table containing the default configuration, followed by In-App credentials and configuration. To update your configuration with MySQL In-App, copy-paste both Part 1 and Part 2 for your respective CMS. WordPress 4+Joomla 3+Drupal 8+Configuration Locationwwwroot/wp-config.phpwwwroot/configuration.phpwwwroot/sites/default/settings.phpDefault Configuration/** The name of the database for WordPress */ define(&#39;DB_NAME&#39;, &#39;databaseName&#39;);/** MySQL database username */ define(&#39;DB_USER&#39;, &#39;databaseUserName&#39;);/** MySQL database password */ define(&#39;DB_PASSWORD&#39;, &#39;databasePassword&#39;);/** MySQL hostname */ define(&#39;DB_HOST&#39;, &#39;databaseHostName&#39;);public \\$dbtype = ‘mysql’;\\public \\$host = ‘databaseHostName’;\\public \\$user = ‘databaseUserName’;\\public \\$password = ‘databasePassword’;\\public \\$db = ‘databaseName’;\\public \\$dbprefix = ‘jos_‘;\\$databases[‘default’][‘default’] = array (\\‘database’ => ‘databasename’,\\‘username’ => ‘sqlusername’,\\‘password’ => ‘sqlpassword’,\\‘host’ => ‘localhost’,\\‘port’ => ‘3306’,\\‘driver’ => ‘mysql’,\\‘prefix’ => ‘’,\\‘collation’ => ‘utf8mb4_general_ci’,);MySQL In-App\\Part 1 - Connection String$connectstr_dbhost = &#39;&#39;; $connectstr_dbname = &#39;&#39;; $connectstr_dbusername = &#39;&#39;; $connectstr_dbpassword = &#39;&#39;;foreach ($_SERVER as $key =&gt; $value) { if (strpos($key, &quot;MYSQLCONNSTR_localdb&quot;) !== 0) { continue; }$connectstr_dbhost = preg_replace(&quot;/^.*Data Source=(.+?);.*$/&quot;, &quot;\\\\1&quot;, $value); $connectstr_dbname = preg_replace(&quot;/^.*Database=(.+?);.*$/&quot;, &quot;\\\\1&quot;, $value); $connectstr_dbusername = preg_replace(&quot;/^.*User Id=(.+?);.*$/&quot;, &quot;\\\\1&quot;, $value); $connectstr_dbpassword = preg_replace(&quot;/^.*Password=(.+?)$/&quot;, &quot;\\\\1&quot;, $value); }WordPress 4+Joomla 3+Drupal 8+MySQL In-App\\Part 2 - Configuration// ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define(&#39;DB_NAME&#39;, $connectstr_dbname); /** MySQL database username */ define(&#39;DB_USER&#39;, $connectstr_dbusername); /** MySQL database password */ define(&#39;DB_PASSWORD&#39;, $connectstr_dbpassword); /** MySQL hostname : this contains the port number in this format host:port. /** Port is not 3306 when using this feature*/ define(&#39;DB_HOST&#39;, $connectstr_dbhost);public $dbtype = &#39;mysql&#39;; public $host = DB_HOST; public $user = DB_USER; public $password = DB_PASSWORD; public $db = DB_NAME; public $dbprefix = &#39;jos_&#39;;\\$databases[‘default’][‘default’] = array (\\‘database’ => \\$connectstr_dbname,\\‘username’ => \\$connectstr_dbusername,\\‘password’ => \\$connectstr_dbpassword,\\‘prefix’ => ‘’,\\‘host’ => \\$connectstr_dbhost,\\‘port’ => \\$_SERVER[‘WEBSITE_MYSQL_PORT’],\\‘driver’ => ‘mysql’,\\‘namespace’ => ‘Drupal\\\\Core\\\\Database\\\\Driver\\\\mysql’,\\‘collation’ => ‘utf8mb4_general_ci’,\\);","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"CMS","slug":"CMS","permalink":"http://azureossd.github.io/tags/CMS/"},{"name":"credentials","slug":"credentials","permalink":"http://azureossd.github.io/tags/credentials/"},{"name":"database","slug":"database","permalink":"http://azureossd.github.io/tags/database/"},{"name":"MySQL In-App","slug":"MySQL-In-App","permalink":"http://azureossd.github.io/tags/MySQL-In-App/"}],"author":"msangapu"},{"title":" How to identify/review PHP errors on Azure Web Apps using Log Stream service\t\t","slug":"how-to-identifyreview-errors-on-php-applications-in-azure-web-apps-using-log-stream-service","date":"2016-09-28T20:22:59.000Z","updated":"2019-03-26T07:01:58.387Z","comments":true,"path":"how-to-identifyreview-errors-on-php-applications-in-azure-web-apps-using-log-stream-service/","link":"","permalink":"http://azureossd.github.io/how-to-identifyreview-errors-on-php-applications-in-azure-web-apps-using-log-stream-service/","excerpt":"","text":"If you are getting internal server errors (HTTP error 500) trying to request your PHP application inside Azure Web Apps, You can do the following: 1.- Create .user.ini file and set log_errors = on to check if there a php error related, following this reference from step 1 to 4: Login PHP errors 2.- But sometimes there are not php errors related, could be related to configuration, auth permissions, cache, file issues, etc. In this situation you can use Log stream feature inside your web app. To use this feature you need to activate Diagnostics Logs on azure portal for your web app. You can follow this reference for more information: Enable Diagnostics Logs in Azure Web Apps Then go to Log stream and Start this service. Just remember that this service will be logging all requests to the current web app. Try to request again the web app that is throwing the HTTP 500 error and you will get a better detail of what is failing in your site. In this example. My web app is having some access issues with web.config, probably the web app doesn’t have any web.config or the correct permissions to access this file. You can clear the log stream service and check the error. In this case my web app didn’t have any correct configuration in web.config file. I fixed the problem and I was able to request successfully the php application. You can request again web app after you fix the problem and you will start getting 200 successful requests. You can run this service from Kudu Console or your command prompt using cURL using the following command: curl -u {username} https://{YOURWEBAPPNAME}.scm.azurewebsites.net/logstream Or using Powershell or CLI following these references: Diagnostics Log Stream in Kudu Console Streaming with Azure PowerShell or Command-Line Interface For example if you are using CLI: azure site log tail {yourwebapp} If you get another internal server error: You can activate the error filter in CLI using this command: azure site log tail {yourwebapp} --filter Error In this case my web.config was not well-formed XML and I was able to detect and fix the issue. Usually PHP fatal errors could map to internal server error,s but not all HTTP 500 error map to PHP error, take a look on php error log for more details on this. I hope this can help you to identify php errors. This service is useful for all applications inside Azure Web App.","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"PHP","slug":"Azure-App-Service-Web-App/PHP","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"error-logs","slug":"error-logs","permalink":"http://azureossd.github.io/tags/error-logs/"},{"name":"LogStream","slug":"LogStream","permalink":"http://azureossd.github.io/tags/LogStream/"}],"author":"msedison"},{"title":" Deploying Django App to Azure App Services using Git and new version of Python\t\t","slug":"deploying-django-app-to-azure-app-services-using-git-and-new-version-of-python","date":"2016-08-25T17:38:27.000Z","updated":"2019-03-26T21:38:33.572Z","comments":true,"path":"deploying-django-app-to-azure-app-services-using-git-and-new-version-of-python/","link":"","permalink":"http://azureossd.github.io/deploying-django-app-to-azure-app-services-using-git-and-new-version-of-python/","excerpt":"","text":"Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It’s free and open source. Below are list of steps which we would follow in this blog to create and deploy Django app to Azure App Services Create Sample Project Create Azure WebApp and Use Site Extension to Upgrade Python Create Deployment script Change Deployment script Copy necessary files Publish App You can find a Sample Python Django project with above operations @ GitHub Link Create Sample Project Follow https://www.djangoproject.com/start/ to get started with Django Install Django and Create your first project (or) If you have PyCharm, Follow details at below link to create a sample app\\https://www.jetbrains.com/help/pycharm/2016.1/creating-django-project.html Create Azure WebApp and Use Site Extension to Upgrade Python Navigate to Azure portal Create a new web app Setup Continuous Deployment Follow below blog on how to upgrade python using site extension\\https://blogs.msdn.microsoft.com/pythonengineering/2016/08/04/upgrading-python-on-azure-app-service/ As Steve has mentioned in his blog at above link, add site extension to your web app.\\For this blog I’m choosing Python 2.7.12 x64, It would install new version of python @ D:\\home\\Python27 Create Deployment script I have explained more on how to utilize deployment script and what it does @link Install Azure Cli using below command npm install azure-cli -g Use Below command to create deployment script. azure site deploymentscript --python Above step would create below two files .deployment deploy.cmd Change Deployment script ContentReplace content of deploy.cmd file with content at Link I have changed the code to utilize new python executable available @ D:\\home\\Python27 Copy necessary filesCreate below two new files at root folder and copy content from link web.config - used to configure IIS ptvs_virtualenv_proxy.py - Helper python file to activate virtual environment Create requirements.txt file and add app required modules in it. you can find a sample @ link Publish AppNavigate to your root folder and commit your changes to WEB_APP_GIT_URL git init git add . git commit -m &quot;initial commit&quot; git remote add sampledjangoapp WEB_APP_GIT_URL git push sampledjangoapp master Here is my App on Azure After publish You can find a Sample Python Django project with above operations @ GitHub Link","categories":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/tags/python/"},{"name":"Git","slug":"Git","permalink":"http://azureossd.github.io/tags/Git/"},{"name":"Django","slug":"Django","permalink":"http://azureossd.github.io/tags/Django/"}],"author":"prashanthmadi@outlook.com"},{"title":" Meteor 1.4 App on Azure App Services\t\t","slug":"meteor-1-4-on-azure-app-services","date":"2016-08-24T17:13:17.000Z","updated":"2019-03-26T17:05:22.402Z","comments":true,"path":"meteor-1-4-on-azure-app-services/","link":"","permalink":"http://azureossd.github.io/meteor-1-4-on-azure-app-services/","excerpt":"","text":"Meteor is a full-stack JavaScript platform for developing modern web and mobile applications. Meteor includes a key set of technologies for building connected-client reactive applications, a build tool, and a curated set of packages from the Nodejs and general JavaScript community. This Blog would help you create a sample meteor app in local environment and later we would help you move sample app to Azure Web Apps Creating Sample Meteor App:Use Below command to install meteor on local environment curl https://install.meteor.com/ | sh Check for your meteor version. we highly recommend using &gt; 1.4 meteor --version Use Below command to create a sample meteor app meteor create simple-todos Above command would create a new folder with few files for our sample app as in below screenshot Using Demeteorizer to convert app into node.js formatUse below cmd to install Demeteorizer npm install -g demeteorizer Navigate to your meteor app root folder and enter below cmd &gt;demeteorizer It would create a new .demeteorized folder Navigate to .demeteorized/bundle/programs/server using below cmd cd .demeteorized/bundle/programs/server Please Use npm &gt; 3 if you are getting any long path issues.. Use NVM(https://github.com/coreybutler/nvm-windows) to easily change node/npm version in local environment. Enter below cmd to install all the required node.js modules npm install Running App on Local EnvUse below cmd to execute demeteorized/converted nodejs app in local environment PORT=8080 ROOT_URL=http://localhost:8080 npm start Moving App to AzureCreate a new web app on azure and Setup continuous deployment and get the git url. Below link has details on it https://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/ Add below app setting to your web app inside Azure portal App Settings Key : ROOT_URL Value : web app url(ex: http://Your_APP_Name.azurewebsites.net/) Create a web.config file @ .demeteorized/bundle/ and insert below link content https://raw.githubusercontent.com/christopheranderson/azure-demeteorizer/master/resources/web.config Navigate to .demeteorized/bundle/ folder and Commit your changes to WEB_APP_GIT_URL git init git add . git commit -m &quot;initial commit&quot; git remote add samplemeteorapp WEB_APP_GIT_URL git push samplemeteorapp master","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"nodejs","slug":"Azure-App-Service-Web-App/nodejs","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/nodejs/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"meteor","slug":"meteor","permalink":"http://azureossd.github.io/tags/meteor/"}],"author":"prashanthmadi"},{"title":" Accessing storage blob using SAS with Java\t\t","slug":"accessing-storage-blob-using-sas-with-java","date":"2016-08-16T01:13:04.000Z","updated":"2019-03-26T21:20:34.350Z","comments":true,"path":"accessing-storage-blob-using-sas-with-java/","link":"","permalink":"http://azureossd.github.io/accessing-storage-blob-using-sas-with-java/","excerpt":"","text":"In order to access your storage blob using SAS with Java, please follow below steps - 1. Configure the SAS access service in your Blob for your storage account. Navigate to Shared access signature setting as shown below - 2. Copy the Blob Service SAS URL. (This is required to access the blob) 3. Access your Blob in your Java code as shown in below snippet - try { HttpURLConnection httpClient = (HttpURLConnection) new URL(Copy Blob service SAS URL with container).openConnection(); httpClient.setRequestMethod(“PUT”); httpClient.setDoOutput(true); httpClient.setRequestProperty(“x-ms-blob-type”, “BlockBlob”); OutputStreamWriter out = new OutputStreamWriter(httpClient.getOutputStream()); out.write(“This is test”); out.close(); httpClient.getInputStream(); } catch (MalformedURLException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } Where – storageurl = “https://&lt;storage_account_name&gt;.blob.core.windows.net/&lt;container_name&gt;/“+file.name+“sas_content“","categories":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/categories/Java/"}],"tags":[{"name":"Azure Storage","slug":"Azure-Storage","permalink":"http://azureossd.github.io/tags/Azure-Storage/"},{"name":"blob","slug":"blob","permalink":"http://azureossd.github.io/tags/blob/"},{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"java configuration","slug":"java-configuration","permalink":"http://azureossd.github.io/tags/java-configuration/"},{"name":"SAS","slug":"SAS","permalink":"http://azureossd.github.io/tags/SAS/"}],"author":"prasadker"},{"title":" Setup Single Sign On with AAD using SimpleSAMLphp\t\t","slug":"setup-single-sign-on-with-aad-using-simplesamlphp","date":"2016-08-15T21:00:16.000Z","updated":"2019-03-26T19:52:05.107Z","comments":true,"path":"setup-single-sign-on-with-aad-using-simplesamlphp/","link":"","permalink":"http://azureossd.github.io/setup-single-sign-on-with-aad-using-simplesamlphp/","excerpt":"","text":"This blog provides step-by-step instruction on how to setup Single Sign On with Azure AD using SimpleSMPLphp API (apply to MediaWiki site as an example). Install and configure SimpleSAMLphp To download SimpleSAMLphp, https://simplesamlphp.org/download , extract the download to wwwroot/simplesamlphp Configure admin: Edit wwwroot/simplesamlphp/config/config.php, Modify baseurlpath: ‘baseurlpath’ =&gt; ‘simplesamlphp/www/‘ Set admin login passwoed: ‘auth.adminpassword’ =&gt; ‘&lt;your-admin-password&gt;’ Browse to simplasamlphp admin page, &lt;your-site-url&gt;/simplesamlphp/www/, login with ‘admin’ and the password you set in config.php Generate metadata in XML: Click Federation tab, choose “XML to simpleSAMLphp metadata converter, \\- Copy raw XML from [https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/FederationMetadata/2007-06/FederationMetadata.xml ](https://login.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/FederationMetadata/2007-06/FederationMetadata.xml) paste to &quot;XML metadata&quot; area, and click &quot;Parse&quot;, you will see the PHP code populated in &quot;Converted metadata&quot; area. \\- Copy the PHP code into wwwroot/simplesamlphp/metadata/saml20-idp-remote.php Configure authsources: Add following PHP code in wwwroot/simplesamlphp/config/authsources.php: Find $config = array( &apos;default-sp&apos; =&gt; array(...), ); Add the code: &apos;idp&apos; =&gt; &apos;https://sts.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/&apos;, 5. Check the default settings for php sessions, if session.phpsession.cookiename is ‘null’, set it to ‘PHPSESSID’. Integrate with MediaWiki site: Download SimpleSamlAuth extension from https://github.com/jornane/mwSimpleSamlAuth/releases , extract to wwwroot/extensions/SimpleSamlAuth Modify LocalSettings.php to require authentication: require_once &quot;$IP/extensions/mwSimpleSamlAuth/SimpleSamlAuth.php&quot;; $wgSamlRequirement = SAML_REQUIRED; $wgSamlCreateUser = true; $wgSamlUsernameAttr = &apos;[http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name&apos;](http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name&apos;); $wgSamlRealnameAttr = &apos;[http://schemas.microsoft.com/identity/claims/displayname&apos;](http://schemas.microsoft.com/identity/claims/displayname&apos;); $wgSamlMailAttr = &apos;[http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name&apos;](http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name&apos;); $wgSamlSspRoot = &apos;/libraries/simplesamlphp&apos;; $wgSamlAuthSource = &apos;default-sp&apos;; $wgSamlPostLogoutRedirect = NULL; Configure authentication in Azure AD: In Azure management portal (classic), select Active Directory from menu, choose Microsoft tenant Select Application tab, Add your application Select a name for your application, keep “Web application and/or web API”, click next In “Sign on URL”, use home url of your site, for “App ID URL”, use the URL to default-sp, e.g. http://&lt;your-site-url&gt;/libraries/simplesamlphp/www/module.php/saml/sp/metadata.php/default-sp From Configure tab of your application, find “permission to other applications” section, check Enable “sign in and read users’ profiles” and “read directory data” under Delegated Permission,save the change. References: https://simplesamlphp.org/ https://www.mediawiki.org/wiki/Extension:SimpleSamlAuth","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"MediaWiki","slug":"MediaWiki","permalink":"http://azureossd.github.io/tags/MediaWiki/"},{"name":"SSO","slug":"SSO","permalink":"http://azureossd.github.io/tags/SSO/"}],"author":"yiwang88"},{"title":" Run NPM, Bower, Composer, Gulp & Grunt In Azure App Services During Deployment\t\t","slug":"run-npm-bower-composer-gulp-grunt-in-azure-app-services-during-deployment","date":"2016-08-12T16:44:39.000Z","updated":"2019-03-26T17:50:23.089Z","comments":true,"path":"run-npm-bower-composer-gulp-grunt-in-azure-app-services-during-deployment/","link":"","permalink":"http://azureossd.github.io/run-npm-bower-composer-gulp-grunt-in-azure-app-services-during-deployment/","excerpt":"","text":"Azure Source Control deployment process would involve below steps Moves content to azure web app Creates default deployment script, if there is no .deployment file in web app root folder Run’s deployment script. In case of a nodejs app it would do npm install here At Step 2, Instead of deployment process creating a default script. We can include custom deployment script and change it’s content to Install modules listed in package.json file. Install modules listed in bower.json file Install modules listed in composer.json file Run Gulp Tasks Run Grunt Tasks Unzip files You can find a Sample Nodejs project with above operations @ GitHub Link Below steps would help you generate custom deployment script : Install the azure-cli tool, it’ll also give you some cool features on managing azure related resources directly from the command-line: npm install azure-cli -g Go to the root of your repository (from which you deploy your site). Run the custom deployment script generator command: (i have used –node option but you can choose others) azure site deploymentscript --node Above command will generate the files required to deploy your site, mainly: .deployment - Contains the command to run for deploying your site. deploy.cmd - Contains the deployment script. Modify your deploy.cmd/deploy.sh file based on your requirement with below content. Link for Sample deploy.sh file at Github with below modifications 1. Install modules listed in package.json file.# 3. Install NPM packages if [ -e &quot;$DEPLOYMENT_TARGET/package.json&quot; ]; then cd &quot;$DEPLOYMENT_TARGET&quot; eval $NPM_CMD install --production exitWithMessageOnError &quot;npm failed&quot; cd - &gt; /dev/null fi 2. Install modules listed in bower.json file. Make sure you have bower listed in package.json file Here’s the code: # 4. Install Bower modules if [ -e &quot;$DEPLOYMENT_TARGET/bower.json&quot; ]; then cd &quot;$DEPLOYMENT_TARGET&quot; eval ./node_modules/.bin/bower install exitWithMessageOnError &quot;bower failed&quot; cd - &gt; /dev/null fi 3. Install modules listed in composer.json file. Download composer.phar and include it in root folder Here’s the code: # 5. Install Composer modules if [ -e &quot;$DEPLOYMENT_TARGET/composer.json&quot; ]; then cd &quot;$DEPLOYMENT_TARGET&quot; eval php composer.phar install exitWithMessageOnError &quot;composer failed&quot; cd - &gt; /dev/null fi 4. Run Gulp Make sure you have gulp listed in package.json file Here’s the code: # 6. Run Gulp Task if [ -e &quot;$DEPLOYMENT_TARGET/gulpfile.js&quot; ]; then cd &quot;$DEPLOYMENT_TARGET&quot; eval ./node_modules/.bin/gulp imagemin exitWithMessageOnError &quot;gulp failed&quot; cd - &gt; /dev/null fi 5. Run Grunt Make sure you have grunt listed in package.json file Here’s the code: # 7. Run Grunt Task if [ -e &quot;$DEPLOYMENT_TARGET/Gruntfile.js&quot; ]; then cd &quot;$DEPLOYMENT_TARGET&quot; eval ./node_modules/.bin/grunt exitWithMessageOnError &quot;Grunt failed&quot; cd - &gt; /dev/null fi 6. Unzip Files#7. Unzip file cd &quot;$DEPLOYMENT_TARGET&quot; eval unzip -o Archive.zip cd - &gt; /dev/null Final OutputAs you can see in below screenshot, After deployment it has created bower_components(Bower output) node_modules(NPM output) vendor(Composer Output) build(output of image-min task in gulp) You can find a Sample Nodejs project with above operations @ GitHub Link Troubleshoot If deployment fails, check for View log in Azure Portal as below image Navigate to Azure portal click on your app Click on Deployment Options Select your recent deployment Click on View log for Running Deployment Script. Azure Site command is not workingIf you fail to generate deployment script using azure cli. please make sure you are in asm mode. azure config mode asm","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/categories/nodejs/"}],"tags":[{"name":"composer","slug":"composer","permalink":"http://azureossd.github.io/tags/composer/"},{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"npm","slug":"npm","permalink":"http://azureossd.github.io/tags/npm/"},{"name":"bower","slug":"bower","permalink":"http://azureossd.github.io/tags/bower/"},{"name":"deployment","slug":"deployment","permalink":"http://azureossd.github.io/tags/deployment/"},{"name":"grunt","slug":"grunt","permalink":"http://azureossd.github.io/tags/grunt/"},{"name":"gulp","slug":"gulp","permalink":"http://azureossd.github.io/tags/gulp/"}],"author":"prashanthmadi"},{"title":" Query strings exceed 1,024 characters using OAuth 2.0/AD with Node.js Azure Web Apps\t\t","slug":"query-strings-exceed-1024-characters-using-oauth-2-0ad-with-node-js-azure-web-apps","date":"2016-07-25T19:05:18.000Z","updated":"2019-03-26T17:43:37.691Z","comments":true,"path":"query-strings-exceed-1024-characters-using-oauth-2-0ad-with-node-js-azure-web-apps/","link":"","permalink":"http://azureossd.github.io/query-strings-exceed-1024-characters-using-oauth-2-0ad-with-node-js-azure-web-apps/","excerpt":"","text":"If you are implementing OAuth 2.0 protocol with Active Directory, you need to consider that Access tokens responses can increase to more than 1024 characters in some scenarios and you can get http 404.15 errors {Query String Too Long }, by default Azure Web Apps have a limit on Query String length, you can modify this limit with the following configuration:","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/categories/nodejs/"}],"tags":[],"author":"msedison"},{"title":" Using wildfly-swarm on Azure App Service\t\t","slug":"using-wildfly-swarm-on-azure-app-service","date":"2016-07-20T06:50:50.000Z","updated":"2019-03-26T20:45:57.157Z","comments":true,"path":"using-wildfly-swarm-on-azure-app-service/","link":"","permalink":"http://azureossd.github.io/using-wildfly-swarm-on-azure-app-service/","excerpt":"","text":"This blog is for the customers who wants to use wildfly-swarm container which is the reconstitution of the popular WildFly Java Application Server. As you know you can bring your own customized version of Tomcat and Jetty containers are described in the blog - https://azure.microsoft.com/en-us/documentation/articles/web-sites-java-custom-upload/. On similar lines, you can use the wildfly-swarm by adding the following configuration in the web.config - You can achieve same by using the site extension Java Configurator. The advantage of using the site extension is that, it uses applicationHost.xdt file instead of web.config, so that your webapp is not restarted when you make the changes and you can control the restart when desired. Also, it avoids any manual configuration errors and you can revert it anytime you want easily.","categories":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/categories/Java/"}],"tags":[{"name":"java configuration","slug":"java-configuration","permalink":"http://azureossd.github.io/tags/java-configuration/"},{"name":"azure app service web app","slug":"azure-app-service-web-app","permalink":"http://azureossd.github.io/tags/azure-app-service-web-app/"}],"author":"prasadker"},{"title":" WordPress: Redirecting to wrong URL!!\t\t","slug":"wordpress-redirecting-to-wrong-url","date":"2016-07-12T21:57:55.000Z","updated":"2019-03-26T20:58:34.865Z","comments":true,"path":"wordpress-redirecting-to-wrong-url/","link":"","permalink":"http://azureossd.github.io/wordpress-redirecting-to-wrong-url/","excerpt":"","text":"Problem:While trying to browse to http://www.example.com, it keeps redirecting to http://example.azurewebsites.net!! Redirection ScenariosThere are a couple situations where one may face the WordPress Redirection issue: Migrated from another host Changed your custom domain name and it’s going to your old domain! Understanding The IssueThis redirection can occur for two reasons: URL settings on the database. There are two fields named SITEURL and HOME within the wp_options table that control the URL redirects. Defined constants in wp-config.php _MySQL Workbench showing URL settings from wp_options table_ Wp-config.php showing defined constants affecting URL Redirection. To update these URLs, follow (C). Stopping The Redirection (and taking control of the site)Not everyone is comfortable with making updates on a database so there are _several _options given below. Here are a few methods to fix this issue: A) *Recommended Method* Through WordPress Admin 1) Login to WordPress Admin 2) Click on Settings -&gt; General 3) Find the WordPress Address (URL) and Site Address (URL) fields: 4) Update it to your new URL as shown: 5) Save Changes B) If you no longer have access to WordPress admin, set the site in “Relocate” mode within wp-config.php 1) Edit wp-config.php 2) Before the comment line “That’s all, stop editing!”, insert a new line: define(‘RELOCATE’, true); 3) Save wp-config.php file 4) In your browser, open wp-login.php on your new site. Example: For the domain, http://www.mysite.com, the URL would be: http://www.mysite.com/wp-login.php 5) Login 6) Verify the address bar is correct 7) In WordPress Admin, go to Settings -&gt; General 8) Verify WordPress Address (URL) and Site Address (URL) are correct 9) Save changes 10) Go back to wp-config.php 11) Remove the define from step #2. C) If you are unable to log into WordPress Admin, define new settings within wp-config.php Note: This will hardcode the URLs and they will be disabled through the WordPress Admin -&gt; Settings -&gt; General Area. Because of this reason, it is not recommended. define(‘WP_HOME’,’http://example.com’);define(‘WP_SITEURL’,’http://example.com’); D) Manually update the HOME and SITEURL through a client like MySQL Workbench or PHPMyAdmin Apply the following two queries to your WP_OPTIONS table: __________________________________________________________________ UPDATE wp_options SET option_value=’http://www.newaddress.com&#39; WHERE option_name = ‘home’ LIMIT 1; __________________________________________________________________ UPDATE wp_options SET option_value=’http://www.newaddress.com&#39; WHERE option_name = ‘siteurl’ LIMIT 1; __________________________________________________________________ Reference: https://codex.wordpress.org/Changing_The_Site_URL","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"WordPress","slug":"Azure-App-Service-Web-App/WordPress","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/WordPress/"}],"tags":[{"name":"wordpress","slug":"wordpress","permalink":"http://azureossd.github.io/tags/wordpress/"},{"name":"custom domain","slug":"custom-domain","permalink":"http://azureossd.github.io/tags/custom-domain/"},{"name":"redirect","slug":"redirect","permalink":"http://azureossd.github.io/tags/redirect/"},{"name":"redirection","slug":"redirection","permalink":"http://azureossd.github.io/tags/redirection/"},{"name":"url","slug":"url","permalink":"http://azureossd.github.io/tags/url/"}],"author":"msangapu"},{"title":" Uploading Images to Azure Storage from AngularJS App\t\t","slug":"uploading-images-to-azure-storage-from-angularjs-app","date":"2016-06-29T21:00:36.000Z","updated":"2019-03-26T20:26:59.714Z","comments":true,"path":"uploading-images-to-azure-storage-from-angularjs-app/","link":"","permalink":"http://azureossd.github.io/uploading-images-to-azure-storage-from-angularjs-app/","excerpt":"","text":"Azure Storage is the cloud storage solution for modern applications that rely on durability, availability, and scalability to meet the needs of their customers. More Info : https://azure.microsoft.com/en-us/documentation/articles/storage-python-how-to-use-blob-storage/ I had a few customers asking how to create an application that can upload images from AngularJS without a backend App, so I decided to go ahead and create a sample application with this implementation Navigate to portal and create a new storage account Create a container and provide required access level Copy Access Key from portal Make a note of below items during above steps Storage account name Container name Access Key Create an Azure Web App - Optional Steps (if you are using Azure Web Apps) I’m using Visual Studio online for convenience here but you may choose other options of development/deployment processes. I used ng-file-upload for this sample app but there are other great modules to upload images from angular app to remote servers. https://github.com/danialfarid/ng-file-upload Click on Open console option in left of visual studio online and enter below command to install ng-file-upload module npm install ng-file-upload Replace content in hostingstart.html file with below content. Change the values in storage url appropriately storageurl = “https://&lt;storage_account_name&gt;.blob.core.windows.net/&lt;container_name&gt;/“+file.name+”sas_content” For More Details on Blob upload API Refer : https://msdn.microsoft.com/en-us/library/azure/dd179451.aspx You can get sas_content using below python script. Most probably you would end up with below error while uploading the file XMLHttpRequest cannot load https://prmadisampletest.blob.core.windows.net/samplecontainer/8.jpg?sr=c&amp;s…Nqb6zHI4dfgDJhNtksGYiCu2rFLtk%3D&amp;sv=2015-07-08&amp;se=2016-10-07T16%3A33%3A35Z. Response to preflight request doesn&#39;t pass access control check: No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http://azure-storage-sample.azurewebsites.net&#39; is therefore not allowed access. The response had HTTP status code 403. CORS is an HTTP feature that enables a web application running under one domain to access resources in another domain. Web browsers implement a security restriction known as same-origin policy that prevents a web page from calling APIs in a different domain. More info : https://msdn.microsoft.com/en-us/library/azure/dn535601.aspx Run Below python script by setting proper details for below ACCOUNT_NAME =”XXXXX” ACCOUNT_KEY =”XXXXX” CONTAINER_NAME=’XXXXX’ You should see images uploading successfully now. AngularJs App UI : Portal with newly uploaded file in container : Troubleshoot : How to run above Python Scripts ? Refer below link to install python and Azure python SDK https://azure.microsoft.com/en-us/documentation/articles/python-how-to-install/ use below command to run python script &gt; python script_file.py Update 12/1/2016 : Now you can add CORS settings from Azure Storage Explorer https://azure.microsoft.com/pt-br/blog/microsoft-azure-storage-explorer-november-update/","categories":[{"name":"AngularJs","slug":"AngularJs","permalink":"http://azureossd.github.io/categories/AngularJs/"}],"tags":[{"name":"Azure Storage","slug":"Azure-Storage","permalink":"http://azureossd.github.io/tags/Azure-Storage/"},{"name":"AngularJs","slug":"AngularJs","permalink":"http://azureossd.github.io/tags/AngularJs/"},{"name":"CORS","slug":"CORS","permalink":"http://azureossd.github.io/tags/CORS/"}],"author":"prashanthmadi"},{"title":" WordPress MultiSite 404 on Admin Dashboard\t\t","slug":"wordpress-multisite-404-on-admin-dashboard","date":"2016-06-23T16:26:01.000Z","updated":"2019-03-26T20:56:28.427Z","comments":true,"path":"wordpress-multisite-404-on-admin-dashboard/","link":"","permalink":"http://azureossd.github.io/wordpress-multisite-404-on-admin-dashboard/","excerpt":"","text":"If you are experiencing a 404 when switching to the dashboard of a given site, verify the web.config is accurate. We’ve found that older versions of WordPress have incorrect rules within web.config. Try the following web.config: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;rule name=&quot;WordPress Rule 1&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^index\\\\.php$&quot; ignoreCase=&quot;false&quot; /&gt; &lt;action type=&quot;None&quot; /&gt; &lt;/rule&gt; &lt;rule name=&quot;WordPress Rule 2&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^(\\[_0-9a-zA-Z-\\]+/)?wp-admin$&quot; ignoreCase=&quot;false&quot; /&gt; &lt;action type=&quot;Redirect&quot; url=&quot;{R:1}wp-admin/&quot; redirectType=&quot;Permanent&quot; /&gt; &lt;/rule&gt; &lt;rule name=&quot;WordPress Rule 3&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^&quot; ignoreCase=&quot;false&quot; /&gt; &lt;conditions logicalGrouping=&quot;MatchAny&quot;&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsFile&quot; ignoreCase=&quot;false&quot; /&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsDirectory&quot; ignoreCase=&quot;false&quot; /&gt; &lt;/conditions&gt; &lt;action type=&quot;None&quot; /&gt; &lt;/rule&gt; &lt;rule name=&quot;WordPress Rule 4&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^(\\[_0-9a-zA-Z-\\]+/)?(wp-(content|admin|includes).*)&quot; ignoreCase=&quot;false&quot; /&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;**{R:2}**&quot; /&gt; &lt;/rule&gt; &lt;rule name=&quot;WordPress Rule 5&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;**^(\\[_0-9a-zA-Z-\\]+/)?(.*\\\\.php)$**&quot; ignoreCase=&quot;false&quot; /&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;{R:2}&quot; /&gt; &lt;/rule&gt; &lt;rule name=&quot;WordPress Rule 6&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;.&quot; ignoreCase=&quot;false&quot; /&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;index.php&quot; /&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;/system.webServer&gt; &lt;/configuration&gt;","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"PHP","slug":"Azure-App-Service-Web-App/PHP","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/PHP/"},{"name":"WordPress","slug":"Azure-App-Service-Web-App/PHP/WordPress","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/PHP/WordPress/"}],"tags":[{"name":"php wordpress","slug":"php-wordpress","permalink":"http://azureossd.github.io/tags/php-wordpress/"}],"author":"msangapu"},{"title":" Media Files - HTTP 404 - Azure Web Apps\t\t","slug":"media-files-http-404-azure-web-apps","date":"2016-06-16T02:29:47.000Z","updated":"2019-03-26T17:03:52.050Z","comments":true,"path":"media-files-http-404-azure-web-apps/","link":"","permalink":"http://azureossd.github.io/media-files-http-404-azure-web-apps/","excerpt":"","text":"You’ve uploaded a media file to your WordPress site and attempt to access the files URL but receive a HTTP 404 error. You check to make sure that the file is in the correct directly but the error continues to be displayed. This can occur if the type of file you are attempting to access is not part of the default list of MIME types on IIS. You can modify the web.config file in your wwwroot directory to add the file extension and type of application associated with the file. Sample Configuration &lt;configuration&gt; &lt;system.webServer&gt; &lt;staticContent&gt; &lt;remove fileExtension=&quot;.woff&quot; /&gt; &lt;remove fileExtension=&quot;.woff2&quot; /&gt; &lt;mimeMap fileExtension=&quot;.woff&quot; mimeType=&quot;application/font-woff&quot; /&gt; &lt;mimeMap fileExtension=&quot;.woff2&quot; mimeType=&quot;application/font-woff2&quot; /&gt; &lt;mimeMap fileExtension=&quot;.mp4&quot; mimeType=&quot;video/mp4&quot; /&gt; &lt;mimeMap fileExtension=&quot;.webm&quot; mimeType=&quot;video/webm&quot; /&gt; &lt;mimeMap fileExtension=&quot;.ogv&quot; mimeType=&quot;video/ogg&quot; /&gt; &lt;/staticContent&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; A list of media types can be found at http://www.iana.org/assignments/media-types/media-types.xhtml","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"Joomla","slug":"Azure-App-Service-Web-App/Joomla","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/Joomla/"},{"name":"PHP","slug":"Azure-App-Service-Web-App/Joomla/PHP","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/Joomla/PHP/"},{"name":"WordPress","slug":"Azure-App-Service-Web-App/Joomla/PHP/WordPress","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/Joomla/PHP/WordPress/"}],"tags":[],"author":"toanms"},{"title":" Uploading Large Files to Azure Web Apps\t\t","slug":"uploading-large-files-to-azure-web-apps","date":"2016-06-16T00:25:24.000Z","updated":"2019-03-26T20:29:40.953Z","comments":true,"path":"uploading-large-files-to-azure-web-apps/","link":"","permalink":"http://azureossd.github.io/uploading-large-files-to-azure-web-apps/","excerpt":"","text":"Attempting to upload a file larger than 28.6MB to Azure Web Apps can result in a HTTP 404.13 for WordPress developers or a HTTP 502 for Tomcat Manager. This can be due to the default Request Limits value for the maxAllowedContentLength on IIS which is 30000000 (roughly 28.6MB). To modify this value, add the following to your web.config file. &lt;configuration&gt; &lt;system.webServer&gt; &lt;security&gt; &lt;requestFiltering&gt; &lt;requestLimits maxAllowedContentLength=&quot;&lt;valueInBytes&gt;&quot;/&gt; &lt;/requestFiltering&gt; &lt;/security&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; You may also need to make changes to your Web App to increase the maximum file upload size as well. Below is some additional information for how to increase the limits for popular Content Management Systems that run on PHP such as WordPress, Drupal, and Joomla!. Information for Tomcat Manager can be found here. PHP Content Management Systems (WordPress, Joomla!, etc.) WordPress and other CMS site have its own maximum file upload size which are based on the default PHP values. These can be modified by creating a “.user.ini” file. Azure Web Apps developers can create/modify this file by performing the following. 1. Go to your KUDU console (https://.scm.azurewebsites.net/debugconsole) 2. Go to the “site” directory then the “wwwroot” directory. 3. To create a “.user.ini” file, go to the console window below and type “touch .user.ini”. 4. Once the file is created, press the edit button next to the file. 5. Add the following values to the file and press Save. upload_max_filesize = 64M post_max_size = 64M 6. Restart your site. NOTE: For WordPress Multisite users, you will also need to modify the Network Admin Settings to increase the value. Select Network Admin -&gt; Settings Scroll down to the “Upload Setting” section and modify the “Max upload file size” then press “Save Changes”.","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"Joomla","slug":"Azure-App-Service-Web-App/Joomla","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/Joomla/"},{"name":"PHP","slug":"Azure-App-Service-Web-App/Joomla/PHP","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/Joomla/PHP/"},{"name":"WordPress","slug":"Azure-App-Service-Web-App/Joomla/PHP/WordPress","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/Joomla/PHP/WordPress/"}],"tags":[],"author":"toanms"},{"title":" Use MySQL server on an Azure VM\t\t","slug":"use-mysql-server-on-an-azure-vm","date":"2016-06-06T22:47:09.000Z","updated":"2019-03-26T20:37:45.772Z","comments":true,"path":"use-mysql-server-on-an-azure-vm/","link":"","permalink":"http://azureossd.github.io/use-mysql-server-on-an-azure-vm/","excerpt":"","text":"Here is an option that you can host MySQL server on an Azure VM, connect your PHP sites such as WordPress, Joomla, OpenCart, etc. to the database hosted on the server. 1. Create MySQL server on Azure VM (published by Bitnami) from Marketplace: If you already have a web site on Azure, you can use the same resource group and select the same location. When you select VM, D-series is faster than A-series, with a little more cost. For more detail, refer to https://azure.microsoft.com/en-us/pricing/details/virtual-machines/ After the VM is deployed, it is ready to use. You can make the IP of the VM to static, and the IP won’t change in the case you need to reboot the VM 2. Migrated MySQL database to the new database, you can do it from MySQL client tool, such as PHPMyAdmin, MySQL Wordkbench, or copy sql dump to the VM, import from command line, e.g. mysql -u \\&lt;user> -p\\&lt;password> \\&lt;dbname> \\&lt; sqlfile.sql 3. If you need to use MySQL client tool such as PHPMyAdmin to connect to the database, modify connectionString from application setting, e.g. Database=\\;Data Source=\\;User Id=\\;Password=\\ 4. Change database connection configuration in your web site to connect to the database hosted on the VM, for example, in WordPress change it in wp-config.php, for Joomla site, modify the database info in configuration.php, and so on. 5. If you have existing backup schedule using database on ClearDB , you will need to disable database backup, let the backup perform on web site only. You will need to create an entry for database backup in crontab (contab -e) on the VM that hosting MySQL server, for example, you want the database backup database “produtiondb” start at 11:30 PM daily 30 23 * * * date=`date -I`; /opt/bitnami/mysql/bin/mysqldump -u\\ -p\\ produtiondb > /home/dbbackup/produtiondb_\\$date.sql You can also schedule a job to purge older database backup, e.g. 45 23 * * * date=`date –date=”n days ago” -I`; rm /home/dbbackup/produtiondb_\\$date.sql","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://azureossd.github.io/categories/MySQL/"},{"name":"PHP","slug":"MySQL/PHP","permalink":"http://azureossd.github.io/categories/MySQL/PHP/"}],"tags":[],"author":"yiwang88"},{"title":" \"Test mail could not be sent.\" or \"Could not instantiate mail function\" in Joomla Mail Settings sending a test mail.\t\t","slug":"joomla-mail-settings","date":"2016-05-17T00:03:47.000Z","updated":"2019-03-26T16:38:19.405Z","comments":true,"path":"joomla-mail-settings/","link":"","permalink":"http://azureossd.github.io/joomla-mail-settings/","excerpt":"","text":"If you are getting the following error “Test mail could not be sent.” or “Could not instantiate mail function.” trying to send a test email from the Joomla Mail Settings, this is because Azure Web Apps don’t support smtp or email service by default. Customers need to configure a third party smtp service and add it to Joomla settings. You can use SendGrid that is a cloud-based email service and add it to your Joomla site configuration. Please review the following reference to know more about this service. https://azure.microsoft.com/en-us/documentation/articles/store-sendgrid-mobile-services-send-email-scripts How to create a SendGrid account Create a SendGrid is easy, you just need to go to Azure portal (http://portal.azure.com) and follow these steps: Click on “New“ button. Select Marketplace and type for “SendGrid“. Choose the one that is related to “SendGrid Email Delivery“. And then clic on “Create“ button. Fill all required files on the form. (Select a pricing tier, contact information, review also the legal terms) After you set up the SendGrid account, you will see your configurations (username, smtp server, etc). You can use this information to complete Joomla Mail Settings. How to add SendGrid configuration to Joomla Mail Settings Inside the “Global Configuration“, select “Server“ tab and select the following settings: 1.- Change the Mailer option to “SMTP“ 2.- Type a “From email“ sender. 3.- Choose the SMTP Security. For example: You can set SMTP Security to none and use port 25. (SendGrid recommends customers to use port 587 to avoid any rate limiting that your server host may apply.) Or use SMTP Security to SSL and use port 465. You can find more documentation about SendGrid SMTP Ports in this reference: https://sendgrid.com/docs/Classroom/Basics/Email_Infrastructure/smtp_ports.html If everything is working fine, you are going to receive a test email like this: Check the following references for more information about PHP &amp; SendGrid: https://azure.microsoft.com/en-us/documentation/articles/store-sendgrid-php-how-to-send-email/ https://sendgrid.com/docs/Integrate/Partners/Microsoft_Azure.html","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"Joomla","slug":"Azure-App-Service-Web-App/Joomla","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/Joomla/"},{"name":"PHP","slug":"Azure-App-Service-Web-App/Joomla/PHP","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/Joomla/PHP/"}],"tags":[{"name":"Joomla","slug":"Joomla","permalink":"http://azureossd.github.io/tags/Joomla/"},{"name":"smtp","slug":"smtp","permalink":"http://azureossd.github.io/tags/smtp/"}],"author":"msedison"},{"title":" Azure Webapps - Java configurator site extension\t\t","slug":"azure-webapps-java-configurator-site-extension","date":"2016-05-04T22:29:46.000Z","updated":"2019-03-25T21:08:41.372Z","comments":true,"path":"azure-webapps-java-configurator-site-extension/","link":"","permalink":"http://azureossd.github.io/azure-webapps-java-configurator-site-extension/","excerpt":"","text":"Azure webapps environment requires certain configuration changes in order to run a Java webapp. It uses IIS module called httpPlatform which acts as proxy to connect to Java process. We can configure various parameters for this module in web.config. Refer - http://www.iis.net/learn/extensions/httpplatformhandler/httpplatformhandler-configuration-reference#\\_HttpPlatformHandler\\_Configuration for more details. Java configurator site extension provides a convenient way to set the values for some of these configurations. This tool avoids the need to know the configuration syntax and also help in eliminating the manual errors while updating the web.config. Also, this tool does not modify the web.config, but makes changes in the applicationHost.xdt file which will take effect only on manual restart, which can be from the tool, Azure portal or Kudu console’s site extension page. Changes to the web.config triggers restart automatically, which may not be desired on production site. This tool make sure you restart the site when you want with your desired configuration changes.","categories":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"java configuration","slug":"java-configuration","permalink":"http://azureossd.github.io/tags/java-configuration/"},{"name":"app service","slug":"app-service","permalink":"http://azureossd.github.io/tags/app-service/"},{"name":"azure app service web app","slug":"azure-app-service-web-app","permalink":"http://azureossd.github.io/tags/azure-app-service-web-app/"}]},{"title":" Migrating MySQL database from OS disk to Data disk on Azure Linux VM\t\t","slug":"migrating-mysql-database-from-os-disk-to-data-disk-on-azure-linux-vm","date":"2016-04-26T01:24:50.000Z","updated":"2019-03-26T17:21:21.977Z","comments":true,"path":"migrating-mysql-database-from-os-disk-to-data-disk-on-azure-linux-vm/","link":"","permalink":"http://azureossd.github.io/migrating-mysql-database-from-os-disk-to-data-disk-on-azure-linux-vm/","excerpt":"","text":"NOTE: Please take a backup of your MySQL databases before attempting migration. Taking backups is always a good process before attempting to make changes. Migrating without taking backups can lead to serious issues including data loss. There are many cases where customer installs MySQL on OS disk without his knowledge. Most of MySQL installs put data directory in /var/lib/mysql. Putting MySQL data files on OS disk can have performance impact because of I/O contention. Particularly so if you are expecting higher performance from MySQL. How do you install MySQL: Ubuntu: sudo apt install mysql-server CentOS: sudo yum install mariadb-server How to migrate Data from OS disk to Data Disk. First attach data disks to your VM. Based on IOPS performance and storage requirements, attach disks accordingly. In this blog we will attach two data disks. Follow this article to attach 2 new empty disks. Procedure is same for both V1 (Classic)/V2 (ARM) VM. https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-attach-disk-portal/ If you see an error when adding disk like this: A disk named ‘xyzabc-2016mmddetc’ already uses the same LUN: 0. This is because you added the disks in succession too fast. Wait for some time and then retry. It will succeed. Once configured you should see 2 disks like below: Create a software raid device using the disks attached. Please note that all commands are run logged in as root in this blog. You can do the same or run from individual id’s with sudo. Follow this article to achieve that: https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-configure-raid/. Below are a series of screenshots from my demo (on Ubuntu 14.04) to illustrate the steps performed to create a software raid device. You may be prompted for a window to choose mail settings. You can safely choose No Configuration and click ok. In below screenshot, i have used nobootwait. nobootwait works for ubuntu, but does not for CentOS. So you would need to replace nobootwait with nofail for CentOS. Once you followed above steps, you should see a directory /data mounted with raid device md127. You can check last image in above step. /dev/md127 is mounted as /data. Now we start the process of moving data for MySQL. First Stop MySQL Service: Ubuntu: service mysql stop CentOS: service mariadb stop Copy data from /var/lib/mysql to /data/mysql. For this cd to /data and run this command without doublequotes: “rsync -aux /var/lib/mysql .”. If you don’t find rsync, you can install rsync package. Then rename /var/lib/mysql folder to /var/lib/mysql_old. Then create a symlink to /data/mysql in /var/lib folder. This is the command from /var/lib directory: “ln -s /data/mysql mysql” Now go ahead and start mysql. Let’s see if it starts. MySQL does not startup. This is because we need to make some more changes for different flavors of Linux. For Ubuntu 14.04 or lower (Tested with 14.04). Change permissions on /var/lib/mysql. Command to run is: chown -R mysql:mysql /var/lib/mysql If AppArmor is not enabled you do not need to do below. But it is recommended to have AppArmor enabled for security. Follow below steps to allow mysql access through AppArmor: Add below two lines to allow access for mysqld process and save the file: Restart apparmor service issuing this command: service apparmor restart. Now fire up mysql service and you should see it will start up. For Ubuntu 16.04 Ubuntu 16.04 comes with MySQL 5.7.x. This introduces new folders for MySQL to handle under /var/lib. These are /var/lib/mysql-files which limits import/export operations and /var/lib/mysql-keyring for secure storage. So we need to create a folder under /data for mysql-files and mysql-keyring similar to mysql folder and create links similar to what we did in step 6 above. Then we add these folders for apparmor restrictions into /etc/apparmor.d/usr.sbin.mysqld file. Now restart apparmor service and then restart mysql service. For CentOS/Oracle Linux 7.x (Tested with CentOS 7.1 and Oracle Linux 7.0). If selinux is disabled you do not need to do below. It is not recommended, but if you want to disable selinux, you can just run “setenforce 0” and this will set selinux to permissive mode and MariaDB should startup fine without below changes. But it is recommended to have selinux enabled for security. Follow below steps to allow mysql access through selinux: First cd to /var/lib folder and change ownership on mysql symlink. It should be owned by mysql:mysql. Then run below commands to change selinux execution context for /var/lib/mysql and /data/mysql. If you see any error here, change directory to /root and try executing the semanage command again. Then run restore context, so that changes take immediate effect. This completes the steps to move MySQL data from OS disk to Data Disks. Once this has been completed, you can refer to my blog on how to performance tune your MySQL database. NOTE: Please take a backup of your MySQL databases before attempting migration. Taking backups is always a good process before attempting to make changes. Migrating without taking backups can lead to serious issues including data loss.","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://azureossd.github.io/categories/MySQL/"}],"tags":[{"name":"mysql linux migration data","slug":"mysql-linux-migration-data","permalink":"http://azureossd.github.io/tags/mysql-linux-migration-data/"},{"name":"mysql os disk data disk azure linux","slug":"mysql-os-disk-data-disk-azure-linux","permalink":"http://azureossd.github.io/tags/mysql-os-disk-data-disk-azure-linux/"}],"author":"sureddy1"},{"title":" NodeJs and NPM versions on Azure App Services\t\t","slug":"nodejs-and-npm-versions-on-azure-app-services","date":"2016-04-20T20:43:57.000Z","updated":"2019-03-26T17:26:23.061Z","comments":true,"path":"nodejs-and-npm-versions-on-azure-app-services/","link":"","permalink":"http://azureossd.github.io/nodejs-and-npm-versions-on-azure-app-services/","excerpt":"","text":"NodeJs is a JavaScript runtime built on Chrome’s V8 JavaScript engine. NodeJs uses an event-driven, non-blocking I/O model that makes it lightweight and efficient NPM is the package manager for JavaScript. How to find the NodeJs version’s that azure web app supports Navigate to kudu console (http://.scm.azurewebsites.net) and click cmd in Debug Console Click on disk image and navigate to D:\\Program Files (x86)\\nodejs You would see all the available versions NodeJs Version on Azure Apps There are two ways of setting NodeJs version in azure web Apps Using iisnode.yml (this wont change node version on kudu cli or during deployment) Using App Setting in Azure portal Note : iisnode.yml would overwrite App Setting if it exists. NPM Version NPM version corresponds to the NodeJs version you have set in web app as above. You do not need to worry about setting the npm version as the version of node you selected (see below) will use the correct npm version. Node 0.12.2 would use npm 2.7.4 Node 0.10.32 would use npm 1.4.28 Changing NodeJs Version : 1. Using App Setting Navigate to your web app in azure portal Click on Application settings in Settings blade. You can include WEBSITE_NODE_DEFAULT_VERSION as key and version of nodejs you want as value in app settings. Navigate to kudu console (http://.scm.azurewebsites.net) and you can check the nodejs version using below command node -v 2. Using iisnode.yml file As i have mentioned earlier, changing nodejs version in iisnode.yml file would only set the run-time environment which iisnode uses. your kudu cmd and others would still use nodejs version set at app settings. - Setting iisnode.yml file manually Create a iisnode.yml file in your app root folder and include below line nodeProcessCommandLine: “D:\\Program Files (x86)\\nodejs\\5.9.1\\node.exe” - Setting iisnode.yml file using package.json during source control deployment Azure Source Control deployment process would involve below steps Moves content to azure web app Creates default deployment script, if there isn’t one(deploy.cmd, .deployment files) in web app root folder Run’s deployment script where it creates iisnode.yml file if we mention nodejs version in package.json file &gt; engine “engines”: {“node”: “5.9.1”,“npm”: “3.7.3”} iisnode.yml would have below line of code nodeProcessCommandLine: “D:\\Program Files (x86)\\nodejs\\5.9.1\\node.exe” Changing NPM Version Changing NodeJs version would automatically change NPM version If you include npm version in package.json file, that would be used during deployment with source control “engines”: {“node”: “5.9.1”,“npm”: “3.7.3”} Update - 01/28/2018 To use the newer npm, you can set WEBSITE_NPM_DEFAULT_VERSION=5.6.0 in your Azure App Settings Source : https://social.msdn.microsoft.com/Forums/en-US/6f0875bb-2cb1-44ce-a50d-effbd4eb34f4/please-install-the-latest-node-with-npm-560-to-solve-a-killer-npm-install-issue?forum=windowsazurewebsitespreview Using Custom Nodejs Version Azure App services already has most of the NodeJs versions available and the list is constantly updated. If you want to use custom NodeJs version follow below steps Download your choice of NodeJs version fromhttps://nodejs.org/en/download/releases/ While writing this blog, App service doesn’t has NodeJs v4.5 I have clicked download option at above mentioned link and downloaded “node-v4.5.0-win-x86.zip” from https://nodejs.org/download/release/v4.5.0/ Move unzipped content to Azure App service Create iisnode.yml file and add below line nodeProcessCommandLine: “D:\\home\\site\\wwwroot\\node-v4.5.0-win-x86\\node.exe” Above folder name may change depending on your custom NodeJs version Output:","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/categories/nodejs/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"iisnode","slug":"iisnode","permalink":"http://azureossd.github.io/tags/iisnode/"},{"name":"npm","slug":"npm","permalink":"http://azureossd.github.io/tags/npm/"}]},{"title":" Sample Nodejs App on Azure App services\t\t","slug":"sample-nodejs-app-on-azure-app-services","date":"2016-04-18T17:18:56.000Z","updated":"2019-03-26T19:32:49.299Z","comments":true,"path":"sample-nodejs-app-on-azure-app-services/","link":"","permalink":"http://azureossd.github.io/sample-nodejs-app-on-azure-app-services/","excerpt":"","text":"Create a azure webapp Browse to Kudu In your favorite Microsoft browser, surf to http://.scm.azurewebsites.net. Ex: if your Azure App Service Web App name is “example”, then surf to http://example.scm.azurewebsite.net Once there, you will see the interface below: Click ‘Debug Console’ and select ‘CMD’ Traverse to wwwroot folder Create app.js file and enter below content: &gt; touch app.js Create web.config file and enter below content: &gt; touch web.config Navigate to http://.azurewebsites.net and you should see a “hello world” message","categories":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/categories/nodejs/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"test-app","slug":"test-app","permalink":"http://azureossd.github.io/tags/test-app/"}],"author":"prashanthmadi"},{"title":" Azure SDK for PHP: Updating Blob Properties\t\t","slug":"azure-sdk-for-php-updating-blob-properties","date":"2016-03-25T17:02:45.000Z","updated":"2019-03-26T05:37:29.222Z","comments":true,"path":"azure-sdk-for-php-updating-blob-properties/","link":"","permalink":"http://azureossd.github.io/azure-sdk-for-php-updating-blob-properties/","excerpt":"","text":"Here is sample code to update Blob Properties using Azure SDK for PHP. This code will traverse through all the blobs within the specified container and update the cache-control to “public, max-age=604800”. define(&quot;__BLOBNAME__&quot;, &quot;name&quot;); define(&quot;__CONTAINERNAME__&quot;, &quot;container&quot;); define(&quot;__BLOBKEY__&quot;, &quot;key&quot;); require_once(&apos;WindowsAzure\\WindowsAzure.php&apos;); use WindowsAzure\\Common\\ServicesBuilder; use WindowsAzure\\Common\\ServiceException; use WindowsAzure\\Common\\CloudConfigurationManager; use WindowsAzure\\Blob\\Models\\Block; use WindowsAzure\\Blob\\Models\\CreateContainerOptions; use WindowsAzure\\Blob\\Models\\ListContainersOptions; use WindowsAzure\\Blob\\Models\\CreateBlobOptions; use WindowsAzure\\Blob\\Models\\CommitBlobBlocksOptions; use WindowsAzure\\Blob\\Models\\BlobProperties; $connectionString = &quot;DefaultEndpointsProtocol=http;AccountName=&quot; . __BLOBNAME__ . &quot;;AccountKey=&quot; . __BLOBKEY__ . &quot;&quot;; if (null == $connectionString || &quot;&quot; == $connectionString) { echo &quot;Did not find a connection string whose name is &apos;StorageConnectionString&apos;.&quot;; exit(); } // Create blob REST proxy. $blobRestProxy = ServicesBuilder::getInstance()-&gt;createBlobService($connectionString); try { // List blobs. $blob_list = $blobRestProxy-&gt;listBlobs(__CONTAINERNAME__); $blobs = $blob_list-&gt;getBlobs(); // iterate over blobs foreach ($blobs as $blob) { $options = new WindowsAzure\\Blob\\Models\\CreateBlobOptions(); $options-&gt;setBlobCacheControl(&quot;public, max-age=604800&quot;); echo &apos;setting ... &apos;; $blobRestProxy-&gt;setBlobProperties(__CONTAINERNAME__,$blob-&gt;getName(), $options); } } catch (ServiceException $e) { // Handle exception based on error codes and messages. // Error codes and messages are here: // http://msdn.microsoft.com/library/azure/dd179439.aspx $code = $e-&gt;getCode(); $error_message = $e-&gt;getMessage(); echo $code . &quot;: &quot; . $error_message; }","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"blob","slug":"blob","permalink":"http://azureossd.github.io/tags/blob/"},{"name":"Azure sdk","slug":"Azure-sdk","permalink":"http://azureossd.github.io/tags/Azure-sdk/"},{"name":"cache","slug":"cache","permalink":"http://azureossd.github.io/tags/cache/"},{"name":"options","slug":"options","permalink":"http://azureossd.github.io/tags/options/"},{"name":"properties PHP Troubleshooting","slug":"properties-PHP-Troubleshooting","permalink":"http://azureossd.github.io/tags/properties-PHP-Troubleshooting/"}],"author":"msangapu@outlook.com"},{"title":" Migrating data between MySQL databases using kudu console – Azure App Service\t\t","slug":"migrating-data-between-mysql-databases-using-kudu-console-azure-app-service","date":"2016-03-03T04:49:43.000Z","updated":"2019-03-26T17:18:58.227Z","comments":true,"path":"migrating-data-between-mysql-databases-using-kudu-console-azure-app-service/","link":"","permalink":"http://azureossd.github.io/migrating-data-between-mysql-databases-using-kudu-console-azure-app-service/","excerpt":"","text":"NOTE: Always keep multiple backup’s of your database before migration. There are often times when you want to migrate data from one MySQL server to another. This maybe because you are migrating from an On-Premise environment to Azure or upgrading a ClearDB database to a different tier or other reasons. Database migration can be done in different ways as described here. If you do not want to install MySQL Workbench/PHPMyAdmin/MySQL client, then you can do this through Azure App Service Kudu console. In this blog we will cover data migration between two ClearDB databases. There is no upgrade path for ClearDB databases on Azure portal. If you are ok to add credit card to your ClearDB profile, then you can upgrade directly without migrating from ClearDB portal. You can follow this blog on how to upgrade. But if you do not want to add your credit card information multiple places, then you will have to migrate your database from one tier to another. For Ex: If you choose Venus tier while creating your Web App and later on decide to move to Jupiter tier, then you would need to create a new Jupiter tier database and migrate data from Venus tier database to Jupiter tier database. The easiest way to get to kudu console would be to go directly to http://yoursitename.scm.azurewebsites.net/DebugConsole (replace yoursitename with your actual Web App name) through browser. You can also launch kudu console from Azure portal: Once you get to kudu console, you will need to get source/destination database details. We will need these from both (source/destination) databases: Username Password Hostname Database Name Port For ClearDB, you can get these from Azure Portal: Export data from source database: Go to kudu console and change directory into a folder where you can write and want to put backup files. In this example, i use D:\\home\\data. Run below command to export after replacing Username,Password,Hostname,port (is 3306 by default) and source_database_name &quot;D:\\Program Files\\MySQL\\MySQL Server 5.1\\bin\\mysqldump.exe&quot; -uUsername -pPassword -hHostname -P3306 source_database_name &gt; dump.sql or alternatively you can use like this &quot;D:\\Program Files\\MySQL\\MySQL Server 5.1\\bin\\mysqldump.exe&quot; --user=Username --password=Password --host=Hostname --port=3306 source_database_name &gt; dump.sql Import data into destination database: In the same kudu console as above ( in directory D:\\home\\data or where you put you took your export), run below command to import after replacing Username,Password,Hostname,port (is 3306 by default) and destination_database_name: &quot;D:\\Program Files\\MySQL\\MySQL Server 5.1\\bin\\mysql.exe&quot; –uUsername –pPassword –hHostname –P3306 destination_database_name &lt; dump.sql or alternatively you can use like this &quot;D:\\Program Files\\MySQL\\MySQL Server 5.1\\bin\\mysql.exe&quot; --user=Username --password=Password --host=Hostname --port=3306 destination_database_name &lt; dump.sql You can also alternatively use the latest mysql client to import data. So you can replace &quot;D:\\Program Files\\MySQL\\MySQL Server 5.1\\bin\\mysql.exe&quot; with &quot;D:\\Program Files (x86)\\mysql\\5.7.9.0\\bin\\mysql.exe&quot; in above import statements. This should populate all your data from source MySQL database into destination MySQL database. Please find ClearDB FAQ for Azure App Service here: https://azure.microsoft.com/en-us/documentation/articles/store-cleardb-faq/","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://azureossd.github.io/categories/MySQL/"}],"tags":[{"name":"Azure web app","slug":"Azure-web-app","permalink":"http://azureossd.github.io/tags/Azure-web-app/"},{"name":"Azure webapp","slug":"Azure-webapp","permalink":"http://azureossd.github.io/tags/Azure-webapp/"},{"name":"cleardb","slug":"cleardb","permalink":"http://azureossd.github.io/tags/cleardb/"},{"name":"ClearDB upgrade","slug":"ClearDB-upgrade","permalink":"http://azureossd.github.io/tags/ClearDB-upgrade/"},{"name":"mysql","slug":"mysql","permalink":"http://azureossd.github.io/tags/mysql/"},{"name":"database migration","slug":"database-migration","permalink":"http://azureossd.github.io/tags/database-migration/"},{"name":"MySQL migrate","slug":"MySQL-migrate","permalink":"http://azureossd.github.io/tags/MySQL-migrate/"}],"author":"sureddy1"},{"title":" How to upgrade ClearDB database for Azure App Service\t\t","slug":"how-to-upgrade-cleardb-database-for-azure-app-service","date":"2016-03-01T07:03:52.000Z","updated":"2019-03-26T07:05:13.168Z","comments":true,"path":"how-to-upgrade-cleardb-database-for-azure-app-service/","link":"","permalink":"http://azureossd.github.io/how-to-upgrade-cleardb-database-for-azure-app-service/","excerpt":"","text":"If you are using ClearDB as your MySQL database on Azure, you probably know that there is no upgrade path available on Azure portal. The only way to upgrade would be through ClearDB dashboard. You will need to put your credit card information on ClearDB portal to upgrade your database. This blog talks about how to migrate to a higher plan, if you don’t want to put credit card on ClearDB portal. You can upgrade ClearDB database from ClearDB portal, but there are two ways you can get there: 1) ClearDB Upgrade URL 2) Azure Portal – Manage Database link. ClearDB Upgrade URL The url for upgrading ClearDB database is: https://www.cleardb.com/store/azure/upgrade. But when you go to upgrade url, you will be asked for a username/password/database name to get in (unless you have setup a profile already). Note: If you have a profile setup already, then you can login into ClearDB portal and upgrade directly. Below is a screen which will show up if you go to upgrade url: You would need to get the username/password and database name from your application config file which has database details specified. Below are list of config files for some applications: WordPress: d:\\home\\site\\wwwroot\\wp-config.php Drupal: d:\\home\\site\\wwwroot\\sites\\default\\settings.php Joomla: d:\\home\\site\\wwwroot\\configuration.php You can access these files from kudu console or by ftp’ing to your Web App. Azure Portal – Manage Database Link Login into Azure Portal ( http://portal.azure.com) and Click on Browse ( at bottom Left) – > Type “mysql” in Filter box –> Choose “MySQL databases” (second option) from the list. You should now see a list of databases. Click on one of the databases and you should see a “Manage Database” link like below: Click on “Manage Database” and this should take you to ClearDB dashboard portal. Note: If you do not see any databases under the list, you can create a Free (Mercury) tier database and go to ClearDB dashboard from there. It should list all databases created under your current subscription. Once you are on ClearDB dashboard portal, click on “Dashboard” tab. This will show all your databases created with ClearDB like this: Click on Upgrade and it should take you through the upgrade process. Note: Sometimes you don’t see the same database name on Azure Portal and ClearDB dashboard. This is because ClearDB creates a unique database name across its landscape. So you will see database names like acsm_db1234xyzetc. The way to find out your actual database name is again on Azure portal as shown below under connection string: Also please find ClearDB FAQ for Azure App Service here: https://azure.microsoft.com/en-us/documentation/articles/store-cleardb-faq/","categories":[{"name":"ClearDB","slug":"ClearDB","permalink":"http://azureossd.github.io/categories/ClearDB/"}],"tags":[{"name":"Azure web app","slug":"Azure-web-app","permalink":"http://azureossd.github.io/tags/Azure-web-app/"},{"name":"Azure webapp","slug":"Azure-webapp","permalink":"http://azureossd.github.io/tags/Azure-webapp/"},{"name":"cleardb","slug":"cleardb","permalink":"http://azureossd.github.io/tags/cleardb/"},{"name":"ClearDB upgrade","slug":"ClearDB-upgrade","permalink":"http://azureossd.github.io/tags/ClearDB-upgrade/"},{"name":"mysql","slug":"mysql","permalink":"http://azureossd.github.io/tags/mysql/"},{"name":"MySQL upgrade","slug":"MySQL-upgrade","permalink":"http://azureossd.github.io/tags/MySQL-upgrade/"}],"author":"sureddy1"},{"title":" Access Oracle Databases from Azure Web Apps using OCI8 drivers with PHP\t\t","slug":"access-oracle-databases-from-azure-web-apps-using-oci8-drivers-with-php","date":"2016-02-24T07:04:56.000Z","updated":"2019-03-26T21:13:09.313Z","comments":true,"path":"access-oracle-databases-from-azure-web-apps-using-oci8-drivers-with-php/","link":"","permalink":"http://azureossd.github.io/access-oracle-databases-from-azure-web-apps-using-oci8-drivers-with-php/","excerpt":"","text":"You can connect to different databases (MySQL, PostgresDB, MongoDB, MSSQL Server) from Azure Web Apps with PHP. But connecting to Oracle database is not provided by default, as this requires Oracle native client. We cannot install full blown Oracle client, but you can install Oracle instant client and connect to your Oracle databases OCI drivers are already installed on Azure Web Apps, but we need to setup Oracle instant client and configure your web app to access OCI dll’s provided by instant client. Here is how we do it. Download 32-bit Oracle Instant Client 12c (Instant Client Package - Basic) from here: http://www.oracle.com/technetwork/topics/winsoft-085727.html It should download a file instantclient-basic-nt-12.1.0.2.0.zip. Once you unzip the file you can upload instantclient_12_1 folder to d:\\home\\site\\ using ftp. You can also drag and drop the instantclient-basic-nt-12.1.0.2.0.zip to d:\\home\\site from kudu debug console (https://sitename.scm.azurewebsites.net/DebugConsole). This will unzip the contents and create instantclient_12_1 folder Once you have uploaded/copied instantclient_12_1 folder to d:\\home\\site, we need to add it to web app environment path. The way to do this on web app is by using application transform model based on XML document transformation (XDT). Create an applicationHost.xdt file under d:\\home\\site folder and add below contents to it: &lt;?xml version=&quot;1.0&quot;?&gt; &lt;configuration xmlns:xdt=&quot;http://schemas.microsoft.com/XML-Document-Transform&quot;&gt; &lt;system.webServer&gt; &lt;runtime xdt:Transform=&quot;InsertIfMissing&quot;&gt; &lt;environmentVariables xdt:Transform=&quot;InsertIfMissing&quot;&gt; &lt;add name=&quot;PATH&quot; value=&quot;%PATH%d:\\home\\site\\instantclient_12_1\\;&quot; xdt:Locator=&quot;Match(name)&quot; xdt:Transform=&quot;InsertIfMissing&quot; /&gt; &lt;/environmentVariables&gt; &lt;/runtime&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; Now we have configured Oracle instant client into our web app environment path. Next we move to enable/invoke the PHP OCI8 driver. This will be done via ini settings: From portal, browse to your App Service application settings - > App Settings and add this key PHP_INI_SCAN_DIR with value of d:\\home\\site\\ini. Now go back to the kudu debug console (https://sitename.scm.azurewebsites.net/DebugConsole) and type “cd d:\\home\\site\\ini” in command prompt window. Here add a file extensions.ini by issuing this command “touch extensions.ini”. This will create a file extensions.ini. Now we need to add a line to enable OCI8 driver for PHP. That would depend on PHP version and Oracle instant client version you want to use. Please refer to Note here http://php.net/manual/en/oci8.requirements.php to find out which Oracle database versions are supported with OCI8. PHP Version OCI8 Driver Version Oracle Instant Client Version Line to Include in extensions.ini file 5.4 1.4.10 10.2 extension=”D:\\Program Files (x86)\\PHP\\v5.4\\ext\\php_oci8.dll” 5.4 1.4.10 11.2 extension=”D:\\Program Files (x86)\\PHP\\v5.4\\ext\\php_oci8_11g.dll” 5.5 1.4.10 10.2 extension=”D:\\Program Files (x86)\\PHP\\v5.4\\ext\\php_oci8.dll” 5.5 1.4.10 11.2 extension=”D:\\Program Files (x86)\\PHP\\v5.4\\ext\\php_oci8_11g.dll” 5.6 2.0.10 12.1 extension=”D:\\Program Files (x86)\\PHP\\v5.6\\ext\\php_oci8_12c.dll” NOTE: You can also use php_pdo_oci.dll file which will enable PDO_OCI support. These files are also installed in the same directory as php_oci8.dll files. Below screenshot show how we created the extensions.ini file and also added OCI8 driver for PHP 5.6. Once this is done, if you create and browse to your phpinfo page you should see OCI8 driver loaded. Below is a screenshot from my PHP 5.6 enabled web app. Now you should be able to use OCI8 driver and connect to your Oracle database.","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"azure php oracle web app","slug":"azure-php-oracle-web-app","permalink":"http://azureossd.github.io/tags/azure-php-oracle-web-app/"},{"name":"azure webapp oracle","slug":"azure-webapp-oracle","permalink":"http://azureossd.github.io/tags/azure-webapp-oracle/"},{"name":"oracle webapp","slug":"oracle-webapp","permalink":"http://azureossd.github.io/tags/oracle-webapp/"},{"name":"php oracle webapp","slug":"php-oracle-webapp","permalink":"http://azureossd.github.io/tags/php-oracle-webapp/"}],"author":"sureddy1"},{"title":" Profiling Java process on Azure web apps\t\t","slug":"profiling-java-process-on-azure-web-apps","date":"2016-02-06T07:50:09.000Z","updated":"2019-03-26T17:43:06.585Z","comments":true,"path":"profiling-java-process-on-azure-web-apps/","link":"","permalink":"http://azureossd.github.io/profiling-java-process-on-azure-web-apps/","excerpt":"","text":"There are certain situations when your Java web application is not performing as you expect it to. To understand where the problem lies, you may need to profile your application and understand its behavior for different flows. Azure App Service environment being a sandbox environment, does not support to install JProfiler and not even expose the JMX information, which can be read by Jconsole to profile your application. The way to profile you application on Azure App Service environment is by using the New Relic tool. Follow these steps - Create a New Relic APM account on Azure portal. New Relic account Make sure you select at least the Small Pro in the pricing tier. 2. Open the New Relic APM and click on the View at New Relic link as highlighted. \\ View at New Relic 3. Click on Browser and Install a New Relic APM agent. New Relic Java agent 4. Select “Java” and then Download the Java agent mentioned at step 2. 5. Unzip the downloaded file and copy the newrelic folder to your wwwroot folder or any folder within your application. newrelic folder 6. Add the Application Settings for CATALINA_OPTS in your webapp on Azure Portal with value as -Djavaagent:”D:\\home\\site\\wwwroot\\newrelic\\newrelic.jar”. Make sure you modify the path accordingly. Note - Please add the letter “D” before javaagent only if you are using Tomcat 8 or earlier. For Tomcat 8.5 onwards, don’t use the letter “D” before javaagent. App Setting for Catalina options 7. Once your website is accessed, you should see the JVM listed on your New Relic Dashboard. New Relic Dashboard with JVMs info 8. Using the Profile JVM link, you can profile your Java process and take thread dumps. JVM Information Sample Profiled data Tree View for Profiled data Hope this helps you debugging issues with your webapp!","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"webapp","slug":"webapp","permalink":"http://azureossd.github.io/tags/webapp/"},{"name":"app service","slug":"app-service","permalink":"http://azureossd.github.io/tags/app-service/"},{"name":"profiler","slug":"profiler","permalink":"http://azureossd.github.io/tags/profiler/"},{"name":"java troubleshooting","slug":"java-troubleshooting","permalink":"http://azureossd.github.io/tags/java-troubleshooting/"},{"name":"New Relic","slug":"New-Relic","permalink":"http://azureossd.github.io/tags/New-Relic/"}],"author":"prasadker"},{"title":" Meteor 1.2 app on Azure Web Apps (OS X)\t\t","slug":"meteor-on-azure-web-apps","date":"2016-01-26T04:44:10.000Z","updated":"2019-03-26T17:08:37.085Z","comments":true,"path":"meteor-on-azure-web-apps/","link":"","permalink":"http://azureossd.github.io/meteor-on-azure-web-apps/","excerpt":"","text":"Refer Below link for running Meteor 1.4 App on Azure App Services https://blogs.msdn.microsoft.com/azureossds/2016/08/24/meteor-1-4-on-azure-app-services/ Meteor is a full-stack JavaScript platform for developing modern web and mobile applications. Meteor includes a key set of technologies for building connected-client reactive applications, a build tool, and a curated set of packages from the Nodejs and general JavaScript community. Support for Meteor on Azure WebApps has been a big ask. This Blog would help you create a sample meteor app in local environment and later we would help you move sample app to Azure Web Apps - https://feedback.azure.com/forums/169385-web-apps-formerly-websites/suggestions/6848937-add-support-for-meteor-on-azure-websites Below steps are valid for MAC OS X. If you have windows OS, please refer https://github.com/christopheranderson/azure-demeteorizer Azure by default doesn’t support meteor but we can convert your meteor app into Nodejs level using demeteorizer https://github.com/onmodulus/demeteorizer . Creating Sample Meteor App: Use Below command to install meteor on local environment curl https://install.meteor.com/ | sh Use Below command to create a sample meteor app meteor create simple-todos Above command would create a new folder with few files for our sample app as in below screenshot Now check if you have node v0.10.40 using below cmd. You can’t use latest version of nodejs for this process node -v Why i can’t use latest version of Nodejs ? Meteor has a dependency on fibers module which cant be installed with newer version of nodejs issue tracker : https://github.com/laverdet/node-fibers/issues/248 ``fibers@1.0.5 install /Users/prashanth/workspace/meterosample/simple-todos/.demeteorized/bundle/programs/server/node_modules/fibers &gt; node ./build.js (node) child_process: options.customFds option is deprecated. Use options.stdio instead. CXX(target) Release/obj.target/fibers/src/fibers.o ../src/fibers.cc:132:44: error: too many arguments to function call, expected at most 2, have 4 return Signature::New(isolate, receiver, argc, argv); ~~~~~~~~~~~~~~ ^~~~~~~~~~ /Users/prashanth/.node-gyp/4.1.2/include/node/v8.h:4675:3: note: &#39;New&#39; declared here static Local New( ^ ../src/fibers.cc:140:3: error: no member named &#39;SetResourceConstraints&#39; in namespace &#39;v8&#39;; did you mean simply &#39;SetResourceConstraints&#39;? v8::SetResourceConstraints(isolate, constraints); How to change my existing Nodejs version ? Use Below command to install nvm(node version manager) on local environment. This would help us change nodejs version easily curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash NVM - https://github.com/creationix/nvm Use Below command to install node v0.10.40 nvm install 0.10.40 Check your nodejs version again using below cmd node -v Using Demeteorizer to convert app into node.js format Use below cmd to install Demeteorizer npm install -g demeteorizer Navigate to your meteor app root folder and enter below cmd demeteorizer Navigate to .demeteorized/bundle/programs/server using below cmd cd .demeteorized/bundle/programs/server Enter below cmd to install all the required node.js modules npm install Running App on Local Env - Use below cmd to execute demeteorized/converted nodejs app in local environment &gt; PORT=8080 ROOT_URL=http://localhost:8080 npm start Moving App to Azure Create a sample web app on azure and Setup continuous deployment and get the git url. Below link has details on it https://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/ Add ROOT_URL with value as your web app url(ex: http://Your\\_APP\\_Name.azurewebsites.net/) and set WEBSITE_NODE_DEFAULT_VERSION to 0.10.40 as in below screenshot inside Azure portal App Settings Create a web.config file @ .demeteorized/bundle/ folder and insert below link content https://raw.githubusercontent.com/christopheranderson/azure-demeteorizer/master/resources/web.config Navigate to .demeteorized/bundle/ folder and Commit your changes to web app git url &gt; git init &gt; git add . &gt; git commit -m &quot;initial commit&quot; &gt; git remote add samplemeteorapp WEB_APP_GIT_URL &gt; git push samplemeteorapp master Navigate to your azure web app Troubleshoot : 1) Unaught exception: Error: `D:\\home\\site\\wwwroot\\programs\\server\\node_modules\\fibers\\bin\\win32-ia32-v8-4.5\\fibers.node` is missing. Try reinstalling `node-fibers`? Check if you are using node v0.10.40 on azure web apps Default node.exe on azure webapps are 32-bit. check if there is bin\\win32-ia32-v8-4.5\\ in fibers module 2) Unaught exception: Error: Must pass options.rootUrl or set ROOT_URL in the server environment You need to define ROOT_URL in App Settings at Azure Portal (ex: http://Your\\_APP_Name.azurewebsites.net/)","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"meteor","slug":"meteor","permalink":"http://azureossd.github.io/tags/meteor/"}],"author":"prashanthmadi"},{"title":" Using Bower in Node.js Azure WebApps\t\t","slug":"using-bower-in-node-js-azure-webapps","date":"2016-01-25T12:35:00.000Z","updated":"2019-03-26T20:40:47.377Z","comments":true,"path":"using-bower-in-node-js-azure-webapps/","link":"","permalink":"http://azureossd.github.io/using-bower-in-node-js-azure-webapps/","excerpt":"","text":"Bower is a package manager for web app. It offers a generic, unopinionated solution to the problem of front-end package management, while exposing the package dependency model via an API that can be consumed by a more opinionated build stack. Most of the web apps involve below step before moving web app to production/build process. - Download and install front-end dependencies like ionic, Bootstrap. You can list all your dependencies in a bower.json file which would be installed during deployment process into Azure web apps. Although you can achieve most of similar work using npm, still bower is pretty famous with front-end dev’s. sample app on github @ https://github.com/prashanthmadi/Azure-bower-sample Automate Bower install process : Azure Source Control deployment process would involve below steps Moves content to azure web app Creates default deployment script, if there isn’t one(deploy.cmd, .deployment files) in web app root folder Run’s deployment script where it install’s npm modules At Step 2, Instead of deployment process creating a default script. We can include custom deployment script and change it’s content to install all the modules listed in bower.json file. Below steps would help you generate custom deployment script : Install the azure-cli tool, it’ll also give you some cool features on managing azure related resources directly from the command-line: npm install azure-cli -g Go to the root of your repository (from which you deploy your site). Run the custom deployment script generator command: azure site deploymentscript –node Above command will generate the files required to deploy your site, mainly: .deployment - Contains the command to run for deploying your site. deploy.cmd - Contains the deployment script. Considering you have bower.json file in public folder as in below screenshot. Sample bower.json file { &quot;name&quot;: &quot;bowersample-app&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;dependencies&quot;: { &quot;sass-bootstrap&quot;: &quot;~3.0.0&quot;, &quot;modernizr&quot;: &quot;~2.6.2&quot;, &quot;jquery&quot;: &quot;~1.10.2&quot; }, &quot;private&quot;: true } In deploy.cmd file include below lines of code after installing npm packages (after line 110). Change bower install folder based on your requirement. IF EXIST &quot;%DEPLOYMENT_TARGET%\\public\\bower.json&quot; ( pushd &quot;%DEPLOYMENT_TARGET%\\public&quot; call ..\\node_modules\\.bin\\bower install IF !ERRORLEVEL! NEQ 0 goto error popd ) Sample Screenshot: You can git ignore bower_components folder before pushing your code to Azure Web App. Below is a screenshot of newly created bower_components folder after deployment process. Below screenshot has all the modules i have listed in bower.json file installed in public/bower_components folder.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"bower","slug":"bower","permalink":"http://azureossd.github.io/tags/bower/"}],"author":"prashanthmadi"},{"title":" Running java jar file to serve web requests on Azure App Service Web Apps\t\t","slug":"running-java-jar-file-to-serve-web-requests-on-azure-app-service-web-apps","date":"2015-12-28T23:09:20.000Z","updated":"2019-03-26T17:55:14.294Z","comments":true,"path":"running-java-jar-file-to-serve-web-requests-on-azure-app-service-web-apps/","link":"","permalink":"http://azureossd.github.io/running-java-jar-file-to-serve-web-requests-on-azure-app-service-web-apps/","excerpt":"","text":"There are several Java web servers that are supported on Azure App Service Web Apps. But if you have custom code built into a jar which allows it to act as web server, you can accomplish that as well. This blog talks about how we can achieve that. You can accomplish this with any web app from gallery/market place, but in this blog I will start with a blank web app. Below is an screenshot on how to create a blank web app Once you have finished creating an empty web app, browse to its kudu console command prompt by accessing http://yoursitename.scm.azurewebsites.net/DebugConsole (remember to change yoursitename with the actual site name) and create a directory under d:\\home\\site\\wwwroot. We will name it bin for now. Now we will copy our jar file into the bin folder created above. You can drag drop the jar file into d:\\home\\site\\wwwroot\\bin folder or ftp and copy the jar to d:\\home\\site\\wwwroot\\bin folder. Now we need to setup web.config file to run this jar file. Create a web.config file in d:\\home\\site\\wwwroot folder and add these contents: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;handlers&gt; &lt;add name=&quot;httpPlatformHandler&quot; path=&quot;*&quot; verb=&quot;*&quot; modules=&quot;httpPlatformHandler&quot; resourceType=&quot;Unspecified&quot; /&gt; &lt;/handlers&gt; &lt;httpPlatform processPath=&quot;%ProgramW6432%\\Java\\jdk1.8.0_60\\bin\\java.exe&quot; arguments=&quot;-Djava.net.preferIPv4Stack=true -Dport.http=%HTTP_PLATFORM_PORT% -jar &amp;quot;%HOME%\\site\\wwwroot\\bin\\demojar.jar&amp;quot;&quot; stdoutLogEnabled=&quot;true&quot; startupRetryCount=&apos;10&apos;&gt; &lt;/httpPlatform&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; Make note of these parameters in above code: processPath: This is where you specify the java executable path. You can use java 7 or 8 which are under %ProgramW6432%\\Java folder. arguments port.http which is set to HTTP_PLATFORM_PORT. This is where your Java Process will listen on. So you need to change your code to listen on this port. path for the jar file. This will be the path to where you place the jar file. In our case, we placed it in d:\\home\\site\\wwwroot\\bin. Also you need to include a MANIFEST.MF file in META-INF folder in your jar file. It should include which class you want to execute. This has to be set to Main-Class parameter. Below is sample code I have for running a simple web server: package com.msft.demo; import java.io.*; import java.net.*; import com.sun.net.httpserver.*; public class Demo { public static void main(String[] args) throws Exception { // TODO Auto-generated method stub // port.http is where WebApp will listen for your Java Process String listenPort = System.getProperty(&quot;port.http&quot;); System.out.println(&quot;listenPort is &quot; + listenPort); int port = Integer.parseInt(listenPort); HttpServer azServer = HttpServer.create(new InetSocketAddress(port), 0); azServer.createContext(&quot;/&quot;, new AzHandler()); azServer.setExecutor(null); azServer.start(); } static class AzHandler implements HttpHandler { public void handle(HttpExchange httpExchange) throws IOException { String response = &quot;Demoing Azure Web Apps Jar Execution&quot;; httpExchange.sendResponseHeaders(200, response.length()); OutputStream os = httpExchange.getResponseBody(); os.write(response.getBytes()); os.close(); } } } Also here is the sample MANIFEST.MF file for my sample application: Manifest-Version: 1.0 Main-Class: com.msft.demo.Demo You can also run without a manifest file, but you will need to include the jar in classpath and call out the exact class name with package path to be executed. Once you have configured your web.config and deployed your jar file, you can browse to your site and you should see this message: “Demoing Azure Web Apps Jar Execution” . You can also look into the httpplatform-stdout_*.log file and it should list the port that your Java process is listening on. If you do not want to run a jar file, there are numerous options available on Web Apps to run your java applications. For more information you can go through this article: https://azure.microsoft.com/en-us/documentation/articles/web-sites-java-get-started/","categories":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"java configuration","slug":"java-configuration","permalink":"http://azureossd.github.io/tags/java-configuration/"},{"name":"azure java webapp","slug":"azure-java-webapp","permalink":"http://azureossd.github.io/tags/azure-java-webapp/"},{"name":"java jar","slug":"java-jar","permalink":"http://azureossd.github.io/tags/java-jar/"},{"name":"run java jar webapp","slug":"run-java-jar-webapp","permalink":"http://azureossd.github.io/tags/run-java-jar-webapp/"},{"name":"webapp java","slug":"webapp-java","permalink":"http://azureossd.github.io/tags/webapp-java/"}],"author":"sureddy1"},{"title":" Triggering the PHP Process Report on Azure Web Apps\t\t","slug":"triggering-the-php-process-report-on-azure-web-apps-2","date":"2015-12-18T00:56:00.000Z","updated":"2019-03-26T20:07:15.977Z","comments":true,"path":"triggering-the-php-process-report-on-azure-web-apps-2/","link":"","permalink":"http://azureossd.github.io/triggering-the-php-process-report-on-azure-web-apps-2/","excerpt":"","text":"The PHP Process Report can be a vital tool in troubleshooting slowness or errors with your PHP Web Application. This article covers how to trigger the report based on a rule. Reference Apurva Joshi has a great article on Diagnostics as a Service (DaaS) for Azure Websites located here: https://azure.microsoft.com/en-us/blog/new-updates-to-daas-diagnostics-as-a-service-for-azure-websites/ Details on the Azure Web Apps Support Portal can be found here by Sunitha Mutukrishna: https://sunithamk.wordpress.com/category/azure/ Let’s get started! DaaS Web Job Before the Process Report can be triggered, ensure the DaaS web job is running. Browse to http://manage.windowsazure.com Click on Web Jobs Ensure DaaS is configured to run continuously Figure 1. DaaS web job is enabled and running Support Portal Now that the DaaS web job has been verified, let’s browse to the Support Portal and configure the alert rule. Browse to http://&lt;web app name&gt;.scm.azurewebsites.net/support Select Mitigate Figure 2. Mitigate area within the support portal showing the “Add new rule” button Configuring The Alert Rule There are multiple categories for the rule (Max Requests, Status Code, Slow Requests, Memory Private Set) which can be used. I’ll be using a Status Code in this example. Select Status Code Click Add New Rule Figure 3. Status Code rule configuration Setting the Action Once the rule has been set, click on Action to configure the process to trigger. Figure 4. After Status Code rule has been set, action area needs to be configured If not already set, the executable field should point to D:\\home\\data\\DaaS\\bin\\DaasConsole.exe Set the parameters to –Troubleshoot “PHP Process Report” 30 as shown below Click the green Update button Figure 5. Action area with PHP Process Report configured That’s it! You have successfully configured an Alert Rule to trigger the PHP Process Report. Please see the reference links for more information. Feel free to post comments or questions below! …. but wait, there’s more! Viewing the Reports Once a report has been executed, it can be seen within the Analyze section of the Support Portal. Figure 6. Analyze area showing the PHP Process Report In addition to the analyze area, the reports can also be found within: d:\\home\\data\\DaaS\\Reports\\&lt;web app name&gt;\\","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"Azure web app","slug":"Azure-web-app","permalink":"http://azureossd.github.io/tags/Azure-web-app/"},{"name":"wordpress","slug":"wordpress","permalink":"http://azureossd.github.io/tags/wordpress/"},{"name":"PHP troubleshooting","slug":"PHP-troubleshooting","permalink":"http://azureossd.github.io/tags/PHP-troubleshooting/"},{"name":"process report","slug":"process-report","permalink":"http://azureossd.github.io/tags/process-report/"},{"name":"troubleshooting","slug":"troubleshooting","permalink":"http://azureossd.github.io/tags/troubleshooting/"}],"author":"msangapu"},{"title":" Custom deployment folder on Azure Web Apps with Git\t\t","slug":"custom-deployment-folder-on-azure-web-apps-with-git","date":"2015-12-18T00:12:00.000Z","updated":"2019-03-26T06:28:51.238Z","comments":true,"path":"custom-deployment-folder-on-azure-web-apps-with-git/","link":"","permalink":"http://azureossd.github.io/custom-deployment-folder-on-azure-web-apps-with-git/","excerpt":"","text":"Sometimes you don’t want to deploy your application in the default webapps directory when deploying from GitHub (continuous deployment) on Azure webapp. You can do this in 2 ways - 1. Use the SCM_TARGET_PATH to set your path which can be absolute or relative to the D:\\home\\site path. ![](/wp-content/uploads/2019/03/1778.App%20Setting.JPG) 2. Create two files in your git root: .deployment .prettyprint .prettyprinted&#125;1[config] command=deploy.cmd deploy.cmd .prettyprint .prettyprinted&#125;12345678@echo off echo ---Deploying site REM ---Deploy the wwwroot folder in repository to default target (wwwroot)xcopy %DEPLOYMENT_SOURCE%\\wwwroot\\* %DEPLOYMENT_TARGET%/Y /s REM ---Deploy the myapp folder in repository to folder above default target (wwwroot\\..\\myapp)xcopy %DEPLOYMENT_SOURCE%\\myapp\\* %DEPLOYMENT_TARGET%\\..\\myapp /Y /s Commit, push Remember if you are customizing the deployment folder also set the application folder in the Azure portal accordingly, so that Azure recognizes the custom application folder - In case you have a Java webapp and want to change the default context you can refer to my blog - http://blogs.msdn.com/b/azureossds/archive/2015/12/11/use-custom-context-for-azure-tomcat-application.aspx. Good Luck!!","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Azure web app","slug":"Azure-web-app","permalink":"http://azureossd.github.io/tags/Azure-web-app/"},{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"java configuration","slug":"java-configuration","permalink":"http://azureossd.github.io/tags/java-configuration/"},{"name":"deploy","slug":"deploy","permalink":"http://azureossd.github.io/tags/deploy/"},{"name":"custom deploy","slug":"custom-deploy","permalink":"http://azureossd.github.io/tags/custom-deploy/"},{"name":"Git","slug":"Git","permalink":"http://azureossd.github.io/tags/Git/"}],"author":"prasadker@outlook.com"},{"title":" Configure log4j along with log rotation on Tomcat Web App in Azure App Service\t\t","slug":"configure-log4j-along-with-log-rotation-on-tomcat-web-app-in-azure-app-service","date":"2015-12-11T23:02:00.000Z","updated":"2019-03-26T06:01:39.637Z","comments":true,"path":"configure-log4j-along-with-log-rotation-on-tomcat-web-app-in-azure-app-service/","link":"","permalink":"http://azureossd.github.io/configure-log4j-along-with-log-rotation-on-tomcat-web-app-in-azure-app-service/","excerpt":"","text":"On Azure App Service Web App deployed with Tomcat (from marketplace), the default logger is set to java.util.logging. If your application is setup with log4j, then you will need to make some changes for it to work. You can use log4j to rotate your logs as well upto the minute. Here is how you can achieve this: Deploy Tomcat 8 Web App from gallery/marketplace. Download these jars: a. tomcat-juli.jar and tomcat-juli-adapters.jar from this url: http://archive.apache.org/dist/tomcat/tomcat-8/v8.0.28/bin/extras/ b. Download log4j-1.2.17.zip from here: http://www.apache.org/dyn/closer.cgi/logging/log4j/1.2.17/log4j-1.2.17.zip Unzip or extract log4j-1.2.17.jar from log4j-1.2.17.zip. Copy (replace) tomcat-juli.jar to D:\\home\\site\\wwwroot\\bin\\apache-tomcat-8.0.28\\bin folder on your Azure Web App. Copy tomcat-juli-adapters.jar and log4j-1.2.17.jar to D:\\home\\site\\wwwroot\\bin\\apache-tomcat-8.0.28\\lib folder on your Azure Web App. Add a file log4j.properties to D:\\home\\site\\wwwroot\\bin\\apache-tomcat-8.0.28\\lib folder on your Azure Web App. Sample log4j.properties file is below for your reference: log4j.debug=true log4j.rootLogger=INFO, CATALINA, CONSOLE # Define all the appenders log4j.appender.CATALINA = org.apache.log4j.DailyRollingFileAppender log4j.appender.CATALINA.File = ${catalina.base}/logs/catalina log4j.appender.CATALINA.Append = true log4j.appender.CATALINA.Encoding = UTF-8 # Roll-over the log once per day log4j.appender.CATALINA.DatePattern = &apos;.&apos;yyyy-MM-dd-HH-mm&apos;.log&apos; log4j.appender.CATALINA.layout = org.apache.log4j.PatternLayout log4j.appender.CATALINA.layout.ConversionPattern = %d [%t] %-5p %c- %m%n log4j.appender.LOCALHOST = org.apache.log4j.DailyRollingFileAppender log4j.appender.LOCALHOST.File = ${catalina.base}/logs/localhost log4j.appender.LOCALHOST.Append = true log4j.appender.LOCALHOST.Encoding = UTF-8 log4j.appender.LOCALHOST.DatePattern = &apos;.&apos;yyyy-MM-dd-HH-mm&apos;.log&apos; log4j.appender.LOCALHOST.layout = org.apache.log4j.PatternLayout log4j.appender.LOCALHOST.layout.ConversionPattern = %d [%t] %-5p %c- %m%n log4j.appender.MANAGER = org.apache.log4j.DailyRollingFileAppender log4j.appender.MANAGER.File = ${catalina.base}/logs/manager log4j.appender.MANAGER.Append = true log4j.appender.MANAGER.Encoding = UTF-8 log4j.appender.MANAGER.DatePattern = &apos;.&apos;yyyy-MM-dd-HH-mm&apos;.log&apos; log4j.appender.MANAGER.layout = org.apache.log4j.PatternLayout log4j.appender.MANAGER.layout.ConversionPattern = %d [%t] %-5p %c- %m%n log4j.appender.HOST-MANAGER = org.apache.log4j.DailyRollingFileAppender log4j.appender.HOST-MANAGER.File = ${catalina.base}/logs/host-manager log4j.appender.HOST-MANAGER.Append = true log4j.appender.HOST-MANAGER.Encoding = UTF-8 log4j.appender.HOST-MANAGER.DatePattern = &apos;.&apos;yyyy-MM-dd-HH-mm&apos;.log&apos; log4j.appender.HOST-MANAGER.layout = org.apache.log4j.PatternLayout log4j.appender.HOST-MANAGER.layout.ConversionPattern = %d [%t] %-5p %c- %m%n log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender log4j.appender.CONSOLE.encoding=UTF-8 log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout log4j.appender.CONSOLE.layout.conversionPattern=%d [%t] %-5p %c - %m%n # Configure which loggers log to which appenders log4j.logger.org.apache.catalina.core.ContainerBase.[Catalina].[localhost]=INFO, LOCALHOST log4j.logger.org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager]= INFO, MANAGER log4j.logger.org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager]= INFO, HOST-MANAGER Stop your Web App and rename logging.properties in D:\\home\\site\\wwwroot\\bin\\apache-tomcat-8.0.28\\conf folder to logging.properties.juli Start your application and you should see the log files under D:\\home\\site\\wwwroot\\bin\\apache-tomcat-8.0.28\\logs folder which rotate every min.","categories":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"java configuration","slug":"java-configuration","permalink":"http://azureossd.github.io/tags/java-configuration/"},{"name":"azure log rotation webapp","slug":"azure-log-rotation-webapp","permalink":"http://azureossd.github.io/tags/azure-log-rotation-webapp/"},{"name":"azure log4j","slug":"azure-log4j","permalink":"http://azureossd.github.io/tags/azure-log4j/"},{"name":"azure webapp java log4j","slug":"azure-webapp-java-log4j","permalink":"http://azureossd.github.io/tags/azure-webapp-java-log4j/"},{"name":"log4j tomcat webapp","slug":"log4j-tomcat-webapp","permalink":"http://azureossd.github.io/tags/log4j-tomcat-webapp/"},{"name":"tomcat webapp","slug":"tomcat-webapp","permalink":"http://azureossd.github.io/tags/tomcat-webapp/"}],"author":"sureddy1@outlook.com"},{"title":" Use custom context for Azure Tomcat application\t\t","slug":"use-custom-context-for-azure-tomcat-application","date":"2015-12-11T20:37:00.000Z","updated":"2019-03-26T20:31:01.671Z","comments":true,"path":"use-custom-context-for-azure-tomcat-application/","link":"","permalink":"http://azureossd.github.io/use-custom-context-for-azure-tomcat-application/","excerpt":"","text":"Sometimes, you don’t want to deploy your application in the default deployment folder for your Java webapp on Azure env. One of the best examples could be while using the Git deployment. In that case your deployment gets copied to wwwroot folder and Tomcat checks the deployments in the webapps folder, so you might want to change the default folder. There are two ways of deploying your Java web app in azure 1) Create empty web app and turn on Java in application settings 2) Install tomcat from marketplace, which comes wrapped in a new web app For the web app created using first scenario, It would use default tomcat present in D:\\Program Files\\ folder It would consider D:\\home\\site\\wwwroot as application root folder This approach is generally preferred by users who don’t want to configure much of tomcat. For the web app created using second scenario, It would come with another instance of tomcat installed at D:\\home\\site\\wwwroot\\bin folder (which doesn’t exist in previous approach) It would consider D:\\home\\site\\wwwroot\\bin\\apache-tomcat-8.0.27\\webapps as application root folder This approach is generally preferred by users who want to have custom configuration of tomcat Git always pushes content to D:\\home\\site\\wwwroot\\ folder, while the tomcat is looking for the same app in D:\\home\\site\\wwwroot\\bin\\apache-tomcat-8.0.27\\webapps This is how you can achieve it - 1. Navigate to D:\\home\\site\\wwwroot\\bin\\apache-tomcat-8.0.27\\conf folder or to your custom tomcat folder using the Kudu console 2. Open server.xml file and add below line of code within &lt;Host&gt; &lt;Context path=&quot;&quot; docBase=&quot;_\\[specify the absolute path or relative to tomcat folder\\]_&quot; reloadable=&quot;true&quot;&gt; &lt;/Context&gt; &lt;/Host&gt; After this you can deploy your application in the folder specified above and it’ll be used by tomcat container to deploy the application. Example index.jsp in the d:\\home\\site\\wwwroot folder - Note: On Azure webapps env, you can specify these values only when you are using custom tomcat version or using the marketplace tomcat version as they expose tomcat configurations.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"java configuration","slug":"java-configuration","permalink":"http://azureossd.github.io/tags/java-configuration/"},{"name":"tomcat","slug":"tomcat","permalink":"http://azureossd.github.io/tags/tomcat/"},{"name":"custom deploy","slug":"custom-deploy","permalink":"http://azureossd.github.io/tags/custom-deploy/"},{"name":"Git","slug":"Git","permalink":"http://azureossd.github.io/tags/Git/"},{"name":"azure webapps","slug":"azure-webapps","permalink":"http://azureossd.github.io/tags/azure-webapps/"},{"name":"custom context","slug":"custom-context","permalink":"http://azureossd.github.io/tags/custom-context/"}],"author":"prasadker"},{"title":" PHP ImageMagick on Azure Web Apps\t\t","slug":"php-imagemagick-on-azure-web-apps","date":"2015-12-07T19:09:00.000Z","updated":"2019-03-26T17:37:31.284Z","comments":true,"path":"php-imagemagick-on-azure-web-apps/","link":"","permalink":"http://azureossd.github.io/php-imagemagick-on-azure-web-apps/","excerpt":"","text":"This post is outdated. See alternatives: PHP 7 x64 ImageMagick 6.9.3.7 Site Extension. This can be installed through the Azure Portal or the SCM/Kudu &gt; SiteExtensions area. https://github.com/snobu/php-imagick-webapps for PHP 7.0 steps. While this post is outdated, the steps to enable this SiteExtension is still helpful. Not all versions of the Windows Application are compatible with the PHP Library Versions. Many thanks to Adrian Calinescu for providing version information. He has made a GitHub repo which you can download and install located here: https://github.com/snobu/php-imagick-webapps These steps are for PHP v5.6, ImageMagick PHP Library 3.3.0RC2 and ImageMagick Windows Application 6.9.2.7. Resource Link 1 ImageMagick 3.3.0RC2 5.6 Non Thread Safe (NTS) x86 http://windows.php.net/downloads/pecl/releases/imagick/3.3.0rc2/php_imagick-3.3.0rc2-5.6-nts-vc11-x86.zip 2 ImageMagick Windows Application 6.9.2.7 http://www.imagemagick.org/download/binaries/ImageMagick-6.9.2-7-Q16-x86-dll.exe Follow these instructions to install ImageMagick on Azure Web Apps. Download/Install 1. Download the resources above. 2. Install ImageMagick for Windows on your local computer. Uncompress ImageMagick 3.3.0rc2 NTS x86. DLL’s 3. Create directories on your web server using FTP or SCM (websitename.SCM.azurewebsites.net) a. Create d:\\home\\site\\coders6.9.2 (will contain coder DLLs from the Windows Application) b. Create d:\\home\\site\\imagick3.3.0rc2 (will contain DLLs from PHP Imagick Library) 4. Copy DLLs a. Copy CORE DLLs from C:\\Program Files (x86)\\ImageMagick-6.9.2-Q16 to your Azure Web App location d:\\home\\site\\coders6.9.2\\ b. Copy DLLs from C:\\Program Files (x86)\\ImageMagick-6.9.2-Q16\\modules\\coders to d:\\home\\site\\coders6.9.2\\ c. Copy ALL FILES from php_imagick-3.3.0rc2-5.6-nts-vc11-x86.zip to d:\\home\\site\\imagick3.3.0rc2\\ Environment Configuration 5. Copy d:\\local\\Config\\PHP-5.6.10\\php.ini to d:\\home\\site\\php56.ini Add the following attributes: extension=d:\\home\\site\\imagick3.3.0rc2\\php_imagick.dll 6. Within d:\\home\\site, create applicationHost.xdt with the contents below: &lt;?xml version=”1.0″?&gt; &lt;configuration xmlns:xdt=”http://schemas.microsoft.com/XML-Document-Transform”&gt; &lt;system.webServer&gt; &lt;fastCgi&gt; &lt;application fullPath=”D:Program Files (x86)PHPv5.6php-cgi.exe” xdt:Locator=”Match(fullPath)”&gt; &lt;environmentVariables&gt; &lt;environmentVariable name=”PHPRC” xdt:Locator=”Match(name)” value=”d:homesitephp56.ini” xdt:Transform=”SetAttributes(value)” /&gt; &lt;/environmentVariables&gt; &lt;/application&gt; &lt;/fastCgi&gt;&lt;runtime xdt:Transform=”InsertIfMissing”&gt; &lt;environmentVariables xdt:Transform=”InsertIfMissing”&gt; &lt;add name=”PATH” value=”%PATH%d:homesiteimagick3.3.0rc2;” xdt:Locator=”Match(name)” xdt:Transform=”InsertIfMissing” /&gt; &lt;add name=”MAGICK_HOME” value=”d:homesiteimagick3.3.0rc2″ xdt:Locator=”Match(name)” xdt:Transform=”InsertIfMissing” /&gt; &lt;add name=”MAGICK_CODER_MODULE_PATH” value=”d:homesitecoders6.9.2″ xdt:Locator=”Match(name)” xdt:Transform=”InsertIfMissing” /&gt; &lt;/environmentVariables&gt; &lt;/runtime&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; Verify Installation 7. Restart the server and check phpinfo(); Test ImageMagick 8. Here’s a piece a code snippet which you can use for testing: &lt;?php /* Create a new imagick object */ $im = new Imagick(); /* Create new image. This will be used as fill pattern */ $im-&gt;newPseudoImage(50, 50, &quot;gradient:red-black&quot;); /* Create imagickdraw object */ $draw = new ImagickDraw(); /* Start a new pattern called &quot;gradient&quot; */ $draw-&gt;pushPattern(&apos;gradient&apos;, 0, 0, 50, 50); /* Composite the gradient on the pattern */ $draw-&gt;composite(Imagick::COMPOSITE_OVER, 0, 0, 50, 50, $im); /* Close the pattern */ $draw-&gt;popPattern(); /* Use the pattern called &quot;gradient&quot; as the fill */ $draw-&gt;setFillPatternURL(&apos;#gradient&apos;); /* Set font size to 52 */ $draw-&gt;setFontSize(52); /* Annotate some text */ $draw-&gt;annotation(20, 50, &quot;Hello World!&quot;); /* Create a new canvas object and a white image */ $canvas = new Imagick(); $canvas-&gt;newImage(350, 70, &quot;white&quot;); /* Draw the ImagickDraw on to the canvas */ $canvas-&gt;drawImage($draw); /* 1px black border around the image */ $canvas-&gt;borderImage(&apos;black&apos;, 1, 1); /* Set the format to PNG */ $canvas-&gt;setImageFormat(&apos;gif&apos;); /* Output the image */ header(&quot;Content-Type: image/gif&quot;); echo $canvas;","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"Azure web app","slug":"Azure-web-app","permalink":"http://azureossd.github.io/tags/Azure-web-app/"},{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"app service","slug":"app-service","permalink":"http://azureossd.github.io/tags/app-service/"},{"name":"Azure webapp","slug":"Azure-webapp","permalink":"http://azureossd.github.io/tags/Azure-webapp/"},{"name":"extension","slug":"extension","permalink":"http://azureossd.github.io/tags/extension/"},{"name":"ImageMagick","slug":"ImageMagick","permalink":"http://azureossd.github.io/tags/ImageMagick/"}],"author":"msangapu"},{"title":" Azure Web App with AngularJs and NodeJs Apps on Same Instance\t\t","slug":"azure-web-app-with-angularjs-and-nodejs-apps-on-same-instance","date":"2015-12-03T20:41:00.000Z","updated":"2019-03-26T06:29:28.755Z","comments":true,"path":"azure-web-app-with-angularjs-and-nodejs-apps-on-same-instance/","link":"","permalink":"http://azureossd.github.io/azure-web-app-with-angularjs-and-nodejs-apps-on-same-instance/","excerpt":"","text":"In my previous Blog, I have wrote on hosting AngularJs app in Azure Web App. This post would provide details on how to host AngularJs App on a web app instance aside of NodeJs App. Code available on github @ https://github.com/prashanthmadi/azure-nodejs-angular 1) Install express-generator at global level, we would use this to create express(nodeJs web framework) templates. npm install -g express-generator 2) Use express cli to create a express template app express . 3) Install required modules using below command npm install 4) Use below command to start the app on local server and check if template app is working on local environment. npm start 5) Move your code to azure web app after adding below web.config file at root folder &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;!-- This configuration file is required if iisnode is used to run node processes behind IIS or IIS Express. For more information, visit: https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config --&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;!-- Visit http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx for more information on WebSocket support --&gt; &lt;webSocket enabled=&quot;false&quot; /&gt; &lt;handlers&gt; &lt;!-- Indicates that the server.js file is a node.js site to be handled by the iisnode module --&gt; &lt;add name=&quot;iisnode&quot; path=&quot;bin/www&quot; verb=&quot;*&quot; modules=&quot;iisnode&quot;/&gt; &lt;/handlers&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;!-- First we consider whether the incoming URL matches a physical file in the /public folder --&gt; &lt;rule name=&quot;StaticContent&quot;&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;public{REQUEST_URI}&quot;/&gt; &lt;/rule&gt; &lt;!-- All other URLs are mapped to the node.js site entry point --&gt; &lt;rule name=&quot;DynamicContent&quot;&gt; &lt;conditions&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsFile&quot; negate=&quot;True&quot;/&gt; &lt;/conditions&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;bin/www&quot;/&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;!-- &apos;bin&apos; directory has no special meaning in node.js and apps can be placed in it --&gt; &lt;security&gt; &lt;requestFiltering&gt; &lt;hiddenSegments&gt; &lt;remove segment=&quot;bin&quot;/&gt; &lt;/hiddenSegments&gt; &lt;/requestFiltering&gt; &lt;/security&gt; &lt;!-- Make sure error responses are left untouched --&gt; &lt;httpErrors existingResponse=&quot;PassThrough&quot; /&gt; &lt;!-- You can control how Node is hosted within IIS using the following options: * watchedFiles: semi-colon separated list of files that will be watched for changes to restart the server * node_env: will be propagated to node as NODE_ENV environment variable * debuggingEnabled - controls whether the built-in debugger is enabled See https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config for a full list of options --&gt; &lt;!--&lt;iisnode watchedFiles=&quot;web.config;*.js&quot;/&gt;--&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; 6) Check if your app is still working on azure. 7) Change app.js file at root folder to set appropriate routes as below. Order of below routes is important (all the url’s except for /users are getting routed to index.js/jade file which would load AngularJS Code) 12app.use(&apos;/users&apos;, users);app.use(&apos;/*&apos;, routes); 8) Change views/index.jade file to below content. [Red] part is to add ng-app div, [Blue] part is to add required AngularJs files, [Green] part would be used to insert templates based on incoming url. extends layout block content div(ng-app=&apos;giveCampaign&apos;) h1= title ul li a(href=&apos;/donarlist&apos;) Donar lists li a(href=&apos;/receivertrans&apos;) Receivers div(ng-view) script(src=&apos;js/angularmodules/angular.min.js&apos;) script(src=&apos;js/app.js&apos;) script(src=&apos;js/angularmodules/angular-route.min.js&apos;) 9) Add required Templates and AngularJs files in public folder @ https://github.com/prashanthmadi/azure-nodejs-angular/tree/master/public 10) For more details on individual templates/JS files, please refer http://blogs.msdn.com/b/azureossds/archive/2015/11/29/creating-an-angular-js-spa-single-page-applicaiton-with-routes-on-azure-webapps.aspx 11) Below are final output screenshots - Web App serving Node.js content at ‘/users’ url - Web App serving AngularJs content in all other url’s /receivertrans /donarlist","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"AngularJs","slug":"AngularJs","permalink":"http://azureossd.github.io/tags/AngularJs/"},{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"WAWS","slug":"WAWS","permalink":"http://azureossd.github.io/tags/WAWS/"},{"name":"web.config","slug":"web-config","permalink":"http://azureossd.github.io/tags/web-config/"}]},{"title":" Creating an AngularJS Single Page Application with routes on Azure WebApps\t\t","slug":"creating-an-angularjs-single-page-application-with-routes-on-azure-webapps","date":"2015-11-29T05:57:00.000Z","updated":"2019-03-26T06:26:04.966Z","comments":true,"path":"creating-an-angularjs-single-page-application-with-routes-on-azure-webapps/","link":"","permalink":"http://azureossd.github.io/creating-an-angularjs-single-page-application-with-routes-on-azure-webapps/","excerpt":"","text":"This Blog would provide a step-by-step procedure on creating sample AngularJS app with routes supporting SEO. Source code is available on github @ https://github.com/prashanthmadi/angularjs-azure 1) Create a new Azure web app from portal. 2) Setup continuous deployment process. 3) Create a HTML file(index.html) with below content which would act as entry point to AngularJS app. A div tag with ng-view is an important part of this file. 123456789101112131415161718&lt;html&gt; &lt;head&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;assets/bootstrap/css/bootstrap.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;assets/angularmodules/angular.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;assets/angularmodules/angular-route.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;assets/app.js&quot;&gt;&lt;/script&gt; &lt;base href=&quot;http://blogs.msdn.com/&quot;&gt; &lt;/head&gt; &lt;body ng-app=&quot;giveCampaign&quot;&gt; &lt;div class=&quot;col-md-3&quot;&gt; &lt;ul class=&quot;nav&quot;&gt; &lt;li&gt;&lt;a href=&quot;donarlist&quot;&gt; Donar List &lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;receivertrans&quot;&gt; Receive&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div ng-view&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 4) Create a new directory(assets) to store all other files. 5) Create an app.js file inside assets folder which would have our app specific angularJS code. Below is for our sample app which has two controllers and route config. 123456789101112131415161718192021222324252627282930313233(function()&#123;var app = angular.module(&quot;giveCampaign&quot;,[&apos;ngRoute&apos;]);app.config([&apos;$routeProvider&apos;,&apos;$locationProvider&apos;,function($routeProvider, $locationProvider) &#123;$routeProvider.when(&apos;/donarlist&apos;, &#123;templateUrl:&quot;assets/templates/donarlist.html&quot;,controller:&apos;DonarController&apos;&#125;).when(&apos;/receivertrans&apos;,&#123;templateUrl:&quot;assets/templates/receiver.html&quot;,controller:&apos;ReceiverController&apos;&#125;).otherwise(&#123;redirectTo: &apos;/abc&apos;&#125;);$locationProvider.hashPrefix(&apos;!&apos;).html5Mode(true);&#125;]);app.controller(&apos;DonarController&apos;, function()&#123;this.recentTrans = recentTransactions;&#125;);var recentTransactions =[&#123;donatedTo:&quot;justin Tim&quot;,item:&quot;bicycle&quot;,cost:&quot;300&quot;,donatedBy:&quot;Cristhian Uribe&quot;&#125;,&#123;donatedTo:&quot;bryan lynch&quot;,item:&quot;baseball bat&quot;,cost:&quot;200&quot;,donatedBy:&quot;richard marr&quot;&#125;];app.controller(&apos;ReceiverController&apos;,function()&#123;&#125;);&#125;)(); 6) Our AngularJS project would require few angular libraries. Either you can download them and insert in assets/angularmodules folder (or) use existing CDN in index.html file. [7) I have created two different templates inside assets/templates older to show a view based on incoming url ex: - url ending with /donarlist should show all the donars of charity foundation (donarlist.html) - url ending with /receiver should show a form to fill required details. (receiver.html) donarlist.html 12345&lt;div ng-controller=&quot;DonarController as donarCtrl&quot;&gt; &lt;div ng-repeat=&quot;transaction in donarCtrl.recentTrans&quot;&gt; &lt;div&gt;&#123;&#123;transaction.donatedBy&#125;&#125; has donated a &#123;&#123;transaction.item&#125;&#125; worth of &#123;&#123;transaction.cost | currency&#125;&#125; to &#123;&#123;transaction.donatedTo&#125;&#125;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; receriver.html 12345678910&lt;div ng-controller=&quot;ReceiverController as recCtrl&quot;&gt; &lt;form name=&quot;needForm&quot;&gt; &lt;label&gt;Name: &lt;/label&gt; &lt;input ng-model=&quot;item.name&quot; type=&quot;text&quot; /&gt; &lt;label&gt;Email: &lt;/label&gt; &lt;input ng-model=&quot;item.email&quot; type=&quot;email&quot; /&gt; &lt;label&gt;Need: &lt;/label&gt; &lt;input ng-model=&quot;item.name&quot; type=&quot;text&quot; /&gt; &lt;/form&gt;&lt;/div&gt; 8) Create a web.config file which would establish incoming url routes from IIS to index.html page. Below is a working sample 123456789101112131415161718192021222324252627&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;clear /&gt; &lt;!-- ignore static files --&gt; &lt;rule name=&quot;AngularJS Conditions&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;(app/.*|assets/.*|config/.*)&quot; /&gt; &lt;conditions logicalGrouping=&quot;MatchAll&quot; trackAllCaptures=&quot;false&quot; /&gt; &lt;action type=&quot;None&quot; /&gt; &lt;/rule&gt; &lt;!-- check if its root url and navigate to default page --&gt; &lt;rule name=&quot;Index Request&quot; enabled=&quot;true&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^$&quot; /&gt; &lt;action type=&quot;Redirect&quot; url=&quot;/receivertrans&quot; logRewrittenUrl=&quot;true&quot; /&gt; &lt;/rule&gt; &lt;!--remaining all other url&apos;s point to index.html file --&gt; &lt;rule name=&quot;AngularJS Wildcard&quot; enabled=&quot;true&quot;&gt; &lt;match url=&quot;(.*)&quot; /&gt; &lt;conditions logicalGrouping=&quot;MatchAll&quot; trackAllCaptures=&quot;false&quot; /&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;index.html&quot; /&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; [9) Code is available on github @ https://github.com/prashanthmadi/angularjs-azure 10) Below are screen shots of a sample app with above code on azure /donarlist url /receiverlist url .","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"AngularJs","slug":"AngularJs","permalink":"http://azureossd.github.io/tags/AngularJs/"},{"name":"WAWS","slug":"WAWS","permalink":"http://azureossd.github.io/tags/WAWS/"}],"author":"prashanthmadi@outlook.com"},{"title":" Using Gulp in Node.js Azure WebApps\t\t","slug":"using-gulp-in-node-js-azure-webapps","date":"2015-10-22T18:28:00.000Z","updated":"2019-03-26T20:44:50.845Z","comments":true,"path":"using-gulp-in-node-js-azure-webapps/","link":"","permalink":"http://azureossd.github.io/using-gulp-in-node-js-azure-webapps/","excerpt":"","text":"Gulp is a toolkit that will help you automate painful or time-consuming tasks in your development workflow. Most of the web apps involve below steps before moving web app to production/build process. Compressing new or modified images Concatenate and minify CSS/JS files you can automate pre-processing steps like above using gulp. We already have a gulp installed on azure web apps, available @ ‘’D:\\Program Files (x86)\\gulp” but the number of plugins could be very limited in them Using custom version of gulp - Make sure you have gulp listed in package.json file (dependencies). Sample file below(devDependencies won’t get installed as its production deployment / you may have to use customer deployment script with production flag for npm install) - This would create a gulp folder in node_modules Automate Gulp build Using Source Control Deployment : Azure Source Control deployment process would involve below steps 1) Moves content to azure web app 2) Creates default deployment script, if there isn’t one(deploy.cmd, .deployment files) in web app root folder 3) Run’s deployment script where it install’s npm modules At Step 2, Instead of deployment process creating a default script. We can include custom deployment script and change it’s content to use gulp build. Below steps would help you generate custom deployment script : - Install the azure-cli tool, it’ll also give you some cool features on managing azure related resources directly from the command-line: npm install azure-cli -g - Go to the root of your repository (from which you deploy your site) - Run the custom deployment script generator command: azure site deploymentscript --node - Above command will generate the files required to deploy your site, mainly: .deployment - Contains the command to run for deploying your site. deploy.cmd - Contains the deployment script. - In deploy.cmd file include below lines of code after installing npm packages (after line 107) IF EXIST &quot;Gulpfile.js&quot; ( pushd &quot;%DEPLOYMENT_TARGET%&quot; call .\\node_modules\\.bin\\gulp imagemin IF !ERRORLEVEL! NEQ 0 goto error popd ) Sample Screenshot In my sample app I was minifying few images, here is my output after deployment","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"webapp","slug":"webapp","permalink":"http://azureossd.github.io/tags/webapp/"},{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"gulp","slug":"gulp","permalink":"http://azureossd.github.io/tags/gulp/"}],"author":"prashanthmadi"},{"title":" WordPress: Error establishing a database connection\t\t","slug":"wordpress-error-establishing-a-database-connection","date":"2015-10-14T15:11:00.000Z","updated":"2019-03-26T20:54:45.454Z","comments":true,"path":"wordpress-error-establishing-a-database-connection/","link":"","permalink":"http://azureossd.github.io/wordpress-error-establishing-a-database-connection/","excerpt":"","text":"If you see the infamous “Error establishing a database connection“, enable WordPress Debug Logging by following the steps outlined here: http://blogs.msdn.com/b/azureossds/archive/2015/10/09/logging-php-errors-in-wordpress.aspx Debug.log will be saved within wp-content folder. Possible error messages in debug.log: [25-Jul-2016 15:34:44 UTC] PHP Warning: mysqli_real_connect(): (HY000/1045): Access denied for user ‘be96d626d450b1‘@’23.102.165.199’ (using password: YES) in D:\\home\\site\\wwwroot\\wp-includes\\wp-db.php on line 1490 [25-Jul-2016 15:34:44 UTC] PHP Warning: mysql_connect(): Access denied for user ‘be96d626d450b1‘@’23.102.165.199’ (using password: YES) in D:\\home\\site\\wwwroot\\wp-includes\\wp-db.php on line 1520 [25-Jul-2016 15:45:38 UTC] PHP Warning: mysqli_real_connect(): (HY000/2002): php_network_getaddresses: getaddrinfo failed: No such host is known. in D:\\home\\site\\wwwroot\\wp-includes\\wp-db.php on line 1490 [25-Jul-2016 15:45:38 UTC] PHP Warning: mysql_connect(): php_network_getaddresses: getaddrinfo failed: No such host is known. in D:\\home\\site\\wwwroot\\wp-includes\\wp-db.php on line 1520 After enabling the logs, if you see the messages above, verify the database credentials within wp-config.php, highlighted below: [25-Jul-2016 00:03:13 UTC] PHP Warning: mysqli_real_connect(): (HY000/1226): User ‘abcdefghijk79’ has exceeded the ‘max_user_connections’ resource (current value: 4) in D:\\home\\site\\wwwroot\\wp-includes\\wp-db.php on line 1454 If this error is apparent in your debug.log or php_errors.log, then your application is exceeding the number of connections. If you’re hosting on ClearDB, please verify the number of connections available in your service plan. Figure 1. Screen showing ClearDB Service Plans with max number of connections, outlined in red. If you need assistance with upgrading your ClearDB database, contact ClearDB by emailing support@cleardb.com.For optimizing WordPress, please see this article: https://azure.microsoft.com/en-us/blog/10-ways-to-speed-up-your-wordpress-site-on-azure-websites/","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"webapp","slug":"webapp","permalink":"http://azureossd.github.io/tags/webapp/"},{"name":"wordpress","slug":"wordpress","permalink":"http://azureossd.github.io/tags/wordpress/"},{"name":"ClearDB Troubleshooting","slug":"ClearDB-Troubleshooting","permalink":"http://azureossd.github.io/tags/ClearDB-Troubleshooting/"},{"name":"cleardb","slug":"cleardb","permalink":"http://azureossd.github.io/tags/cleardb/"},{"name":"mysql","slug":"mysql","permalink":"http://azureossd.github.io/tags/mysql/"},{"name":"php error log azure webapps","slug":"php-error-log-azure-webapps","permalink":"http://azureossd.github.io/tags/php-error-log-azure-webapps/"},{"name":"php wordpress","slug":"php-wordpress","permalink":"http://azureossd.github.io/tags/php-wordpress/"},{"name":"php error log","slug":"php-error-log","permalink":"http://azureossd.github.io/tags/php-error-log/"}],"author":"msangapu"},{"title":" Enable WordPress Error Logs\t\t","slug":"logging-php-errors-in-wordpress-2","date":"2015-10-10T04:43:30.000Z","updated":"2019-03-26T16:47:55.457Z","comments":true,"path":"logging-php-errors-in-wordpress-2/","link":"","permalink":"http://azureossd.github.io/logging-php-errors-in-wordpress-2/","excerpt":"","text":"Logs can help identify slowness, HTTP 500 Fatal Errors, WordPress “white screen of death” and other issues your Azure App Service Web App may be experiencing. To enable error logging in WordPress, you will have to make both of the following changes. Quick Instructions.user.ini Within wwwroot directory, create a file named .user.ini Add the following setting within your file: log_errors=on wp-config.php Within wwwroot directory, open wp-config.php Add the following settings BEFORE the line / That’s all, stop editing! … . / : //Enable WP_DEBUG mode define(&#39;WP_DEBUG&#39;, true); //Enable Debug Logging to /wp-content/debug.log define(&#39;WP_DEBUG_LOG&#39;, true); //Supress errors and warnings to screen define(&#39;WP_DEBUG_DISPLAY&#39;, false); //Supress PHP errors to screen ini_set(&#39;display_errors&#39;, 0); Step-by-Step instructionsThe .user.ini and wp-config.php files can be updated using either Kudu console or FTP Client (such as FileZilla). Instructions for Kudu are below: Step 1. Browse to KuduIn your favorite Microsoft browser, surf to http://“sitename”.scm.azurewebsites.net. Ex: if your Azure App Service Web App name is “example”, then surf to http://example.scm.azurewebsite.net Once there, you will see the interface below: Click ‘Debug Console’ and select ‘CMD’ Step 2. Traverse to wwwroot folder Step 3. Create .user.ini fileIf .user.ini already exists, skip to step 4, otherwise create the .user.ini file touch .user.ini Step 4. Update the .user.ini file log_errors=on Step 5. For WordPress, update wp-config.php Save the file: Q &amp; A1. There are errors in my application, where do I find the error logs? First, ensure that logging is enabled for PHP in .user.ini as mentioned above in (1). Second, if you are searching for WordPress logs, verify step (2) is complete. By default, PHP Errors are located at d:\\home\\LogFiles\\php_errors.log and WordPress Debug Log is located at d:\\home\\site\\wwwroot\\wp-content\\debug.log 2. I have local cache enabled - what happened to my logs? If you have local cache enabled, check the d:\\home\\LogFiles\\xxxxx_timestamp folders. 3. I want to capture all logs in one file, not two - what should I do? WordPress stores errors logs within the wp-content folder. To integrate these messages into d:\\home\\LogFiles\\php_errors.log, edit d:\\home\\site\\wwwroot\\wp-includes\\load.php and comment the following line: ini_set (&#39;error_log&#39;, WP_CONTENT_DIR . &#39;/debug.Log&#39; ); The updated code should look like this: Once this change has been made, all subsequent WordPress logs will be saved at the default error_log location. 4. How do I verify my error log location? Create a .php file (example: myinfo.php) within the wwwroot directory and place the following code: &lt;?php phpinfo(); After you’ve saved the file, browse to http://sitename.azurewebsites.net/myinfo.php To find the location, search the page for “error_log”. Once the path has been located, remember to delete the myinfo.php file so others won’t have access to your environment configuration. 5. I want my local timezone in the logs - how do I update this? Click here for a list of Time Zones. Within .user.ini file, add the time zone relevant to your app: date.timezone = “US/Central” For WordPress logs, update the Time Zone through the WordPress admin interface. Click “settings” and then “general”. Select the proper Time Zone within the drop down: Save your changes.","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"},{"name":"WordPress","slug":"PHP/WordPress","permalink":"http://azureossd.github.io/categories/PHP/WordPress/"}],"tags":[{"name":"azure app service web app","slug":"azure-app-service-web-app","permalink":"http://azureossd.github.io/tags/azure-app-service-web-app/"},{"name":"wordpress","slug":"wordpress","permalink":"http://azureossd.github.io/tags/wordpress/"},{"name":"error-logs","slug":"error-logs","permalink":"http://azureossd.github.io/tags/error-logs/"},{"name":"PHP troubleshooting","slug":"PHP-troubleshooting","permalink":"http://azureossd.github.io/tags/PHP-troubleshooting/"},{"name":"local cache","slug":"local-cache","permalink":"http://azureossd.github.io/tags/local-cache/"},{"name":"phpinfo","slug":"phpinfo","permalink":"http://azureossd.github.io/tags/phpinfo/"},{"name":"timezone","slug":"timezone","permalink":"http://azureossd.github.io/tags/timezone/"}],"author":"msangapu"},{"title":" Setting environment variable and accessing it in Java program on Azure webapp\t\t","slug":"setting-environment-variable-and-accessing-it-in-java-program-on-azure-webapp","date":"2015-10-09T19:25:00.000Z","updated":"2019-03-26T19:41:59.833Z","comments":true,"path":"setting-environment-variable-and-accessing-it-in-java-program-on-azure-webapp/","link":"","permalink":"http://azureossd.github.io/setting-environment-variable-and-accessing-it-in-java-program-on-azure-webapp/","excerpt":"","text":"Sometimes, you want to set new environment variable and want to access it in your Java Program. You can do this by setting up the value in JAVA_OPTS either in web.config or in webapps App Setting. In web.config - &lt;httpPlatform processPath=”%AZURE_TOMCAT7_HOME%binstartup.bat” arguments=””&gt; &lt;environmentVariables&gt; &lt;environmentVariable name=”JAVA_OPTS” value=”-DmyNewEnvVar=Wow” /&gt; &lt;/environmentVariables&gt; &lt;/httpPlatform &gt; In App Setting - Note: Make sure you set the “-D” text before your variable name. Once you add the environment variable as mentioned above, you can access it in code using the System class in Java program. System.getProperty(“myNewEnvVar”); To list multiple variables use can delimit it by a space ” “. For eg. -DmyNewEnvVar=Wow -DmyAnotherEnvVar=Wowa If you want to list all the available environment variable you can use the getProperties() method call. Note: The web.config setting will override the app_setting way. Also, if you want to access the existing environment variable, you can use the “-D” way to set the value in the web.config. For eg, you want to use the %HTTP_PLATFORM_PORT% value, you can set JAVA_OPTS=”-Dhttp.port=%HTTP_PLATFORM_PORT%” Now, using the System.getProperty(“http.port”), you can access the port value for the platform.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Azure web app","slug":"Azure-web-app","permalink":"http://azureossd.github.io/tags/Azure-web-app/"},{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"java configuration","slug":"java-configuration","permalink":"http://azureossd.github.io/tags/java-configuration/"},{"name":"App Setting","slug":"App-Setting","permalink":"http://azureossd.github.io/tags/App-Setting/"},{"name":"Environment Variable","slug":"Environment-Variable","permalink":"http://azureossd.github.io/tags/Environment-Variable/"}],"author":"prasadker"},{"title":" Convert Apache .htaccess to IIS Web.Config\t\t","slug":"convert-apache-htaccess-to-iis-web-config","date":"2015-09-28T22:58:00.000Z","updated":"2019-03-26T06:10:17.673Z","comments":true,"path":"convert-apache-htaccess-to-iis-web-config/","link":"","permalink":"http://azureossd.github.io/convert-apache-htaccess-to-iis-web-config/","excerpt":"","text":"A web.config file is the settings and configuration for applications on IIS Server (ex: Azure Paas Websites ). But what if you’re coming from a Linux host – what then? Well, there are few options: 1) Online Conversion Tool http://www.htaccesstowebconfig.com/ As always, please verify the converted web.config rules on a development site before introducing them directly into production. 2) IIS Manager More on IIS Manager .htaccess conversions here: http://blogs.msdn.com/b/azureossds/archive/2015/04/23/converting-apache-htaccess-rules-to-web-config-using-iis-manager-for-azure-and-iis-websites.aspx 3) Manual Conversion There is a good article on the equivalent components. It can be found here: http://www.iis.net/learn/application-frameworks/install-and-configure-php-applications-on-iis/translate-htaccess-content-to-iis-webconfig Htaccess Component web.config equivalent FilesMatchExample:Order allow, deny&lt;\\/FilesMatch&gt; requestFilteringExample:&lt;security&gt;&lt;requestFiltering&gt;&lt;fileExtensions&gt;&lt;add fileExtension=”.gif” allowed=”true” /&gt;&lt;add fileExtension=”.jpg” allowed=”true” /&gt;&lt;add fileExtension=”.png” allowed=”false” /&gt;&lt;/requestFiltering&gt;&lt;/security&gt; Default Document# Set the default handlerDirectoryIndex index.php &lt;defaultDocument&gt;&lt;files&gt;&lt;remove value=”index.php” /&gt;&lt;add value=”index.php” /&gt; &lt;/files&gt;&lt;/defaultDocument&gt; URL RewritingRewriteCond %{HTTP_HOST} ^example.com$ [NC]RewriteRule ^(.)$ http://www.example.com/$1 [L,R=301] RewriteCond %{REQUEST_FILENAME} !-fRewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_URI} !=/favicon.ico RewriteRule ^(.)$ index.php?q=$1 [L,QSA] &lt;rewrite&gt;&lt;rules&gt;&lt;rule name=”Imported Rule 1″ stopProcessing=”true”&gt;&lt;match url=”^(.)$” ignoreCase=”false” /&gt; &lt;conditions&gt;&lt;add input=”{HTTP_HOST}” pattern=”^example.com$” /&gt;&lt;/conditions&gt;&lt;action type=”Redirect” redirectType=”Permanent” url=”http://www.example.com/{R:1}” /&gt;&lt;/rule&gt;&lt;rule name=”Imported Rule 2″ stopProcessing=”true”&gt;&lt;match url=”^(.)$” ignoreCase=”false” /&gt;&lt;conditions&gt; &lt;add input=”{REQUEST_FILENAME}” matchType=”IsFile” ignoreCase=”false” negate=”true” /&gt;&lt;add input=”{REQUEST_FILENAME}” matchType=”IsDirectory” ignoreCase=”false” negate=”true” /&gt;&lt;add input=”{URL}” pattern=”^/favicon.ico$” ignoreCase=”false” negate=”true” /&gt;&lt;/conditions&gt;&lt;action type=”Rewrite” url=”index.php?q={R:1}” appendQueryString=”true” /&gt;&lt;/rule&gt;&lt;/rules&gt; &lt;/rewrite&gt; Error Page Redirects / Handling# Make Application handle any 404 errors.ErrorDocument 404 /index.php &lt;!– HTTP Errors section should only be enabled if the “Error Pages” feature has been delegated as “Read/Write” at the Web Server level. &lt;httpErrors&gt;&lt;remove statusCode=”404″ subStatusCode=”-1″ /&gt; &gt;&lt;error statusCode=”404″ prefixLanguageFilePath=”” path=”/index.php” responseMode=”ExecuteURL” /&gt;&lt;/httpErrors&gt;–&gt; Directory BrowsingExample:# Don’t show directory listings for URLs which map to a directory. Options -Indexes| &lt;directoryBrowse enabled=”false” /&gt;","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"Azure web app","slug":"Azure-web-app","permalink":"http://azureossd.github.io/tags/Azure-web-app/"},{"name":"apache","slug":"apache","permalink":"http://azureossd.github.io/tags/apache/"},{"name":"web.config","slug":"web-config","permalink":"http://azureossd.github.io/tags/web-config/"},{"name":"Rewrite Rules","slug":"Rewrite-Rules","permalink":"http://azureossd.github.io/tags/Rewrite-Rules/"}],"author":"msangapu@outlook.com"},{"title":" Upload a service certificate to Azure VM using Azure SDK Java code\t\t","slug":"upload-a-service-certificate-to-azure-vm-using-azure-sdk-java-code","date":"2015-09-18T18:51:00.000Z","updated":"2019-03-26T20:21:23.216Z","comments":true,"path":"upload-a-service-certificate-to-azure-vm-using-azure-sdk-java-code/","link":"","permalink":"http://azureossd.github.io/upload-a-service-certificate-to-azure-vm-using-azure-sdk-java-code/","excerpt":"","text":"If you want to programmatically upload a service certificate to the Azure VM without remotely logging into the VM, you can use the following Java program template to achieve it. This is useful when you want to upload multiple certificate at same time and do not want to do it manually. Prerequisite - Azure sdk for Java. import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.net.URI; import java.net.URISyntaxException; import com.microsoft.windowsazure.Configuration; import com.microsoft.windowsazure.core.OperationStatusResponse; import com.microsoft.windowsazure.core.utils.KeyStoreType; import com.microsoft.windowsazure.exception.ServiceException; import com.microsoft.windowsazure.management.compute.ComputeManagementClient; import com.microsoft.windowsazure.management.compute.ComputeManagementService; import com.microsoft.windowsazure.management.compute.models.CertificateFormat; import com.microsoft.windowsazure.management.compute.models.ServiceCertificateCreateParameters; import com.microsoft.windowsazure.management.compute.models.ServiceCertificateListResponse; import com.microsoft.windowsazure.management.configuration.ManagementConfiguration; import com.sun.mail.iap.ByteArray; public class VMUploadCertificate { static String uri = &quot;[https://management.core.windows.net/](https://management.core.windows.net/)&quot;; static String subscriptionId = &quot;&lt;your subscription Id&gt;&quot;; static String keyStoreLocation = &quot;&lt;Your management certificate jks file path&gt;&quot;; static String keyStorePassword = &quot;&lt;Keystore password&gt;&quot;; public static void main(String\\[\\] args) throws IOException, URISyntaxException { Configuration config = ManagementConfiguration.configure( new URI(uri), subscriptionId, keyStoreLocation, // the file path to the JKS keyStorePassword, // the password for the JKS KeyStoreType.jks // flags that I&apos;m using a JKS key store ); // create a management client to call the API ComputeManagementClient client = ComputeManagementService.create(config); try { ServiceCertificateListResponse serviceCertificateListResponse = client.getServiceCertificatesOperations().list(&quot;&lt;serviceName&gt;&quot;); for ( ServiceCertificateListResponse.Certificate certificate : serviceCertificateListResponse.getCertificates()) { System.out.println(&quot;Cert URI = &quot;+certificate.getCertificateUri().toString() ); System.out.println(&quot;Thumprint = &quot;+certificate.getThumbprint()); } // loop on certificats to upload File folder = new File(&quot;C:\\\\\\certificates&quot;); try { for (File file : folder.listFiles() ) { if ( file.isFile() &amp;&amp; file.getName().endsWith(&quot;.pfx&quot;) ) { // if ( file.isFile() &amp;&amp; file.getName().endsWith(&quot;.cer&quot;) ) { // .cer specific System.out.println(&quot;File &quot; + file.getPath()); // Add Service Certificate ServiceCertificateCreateParameters serviceCertificateCreateParameters = new ServiceCertificateCreateParameters(); serviceCertificateCreateParameters.setCertificateFormat(CertificateFormat.Pfx); // serviceCertificateCreateParameters.setCertificateFormat(CertificateFormat.Cer); // .cer specific //String base64Key = null; // .cer specific byte \\[\\] byteKey = null; try { FileInputStream fis = new FileInputStream(file.getPath()); int size = fis.available(); byteKey = new byte\\[size\\]; fis.read(byteKey); fis.close(); // base64Key = javax.xml.bind.DatatypeConverter.printBase64Binary(byteKey); // .cer specific } catch(Exception e) { System.out.println(&quot;Cannot retrieve key.&quot; + file.getPath()); } //byte \\[\\] byteKey2 = base64Key.getBytes(); // .cer specific serviceCertificateCreateParameters.setData(byteKey ); serviceCertificateCreateParameters.setPassword(&quot;&lt;.pfx password&gt;&quot;); // .pfx specific OperationStatusResponse operationStatusResponse = client.getServiceCertificatesOperations().create(&quot;&lt;serviceName&gt;&quot;, serviceCertificateCreateParameters); System.out.println(operationStatusResponse); } } } catch ( SecurityException e ) { System.out.println(&quot;Cannot retrieve files.&quot; + e.getMessage()); } serviceCertificateListResponse = client.getServiceCertificatesOperations().list(&quot;&lt;serviceName&gt;&quot;); for ( ServiceCertificateListResponse.Certificate certificate : serviceCertificateListResponse.getCertificates()) { System.out.println(&quot;Thumprint = &quot;+certificate.getThumbprint()); } } catch (Exception e) { e.printStackTrace(); } } } You’ll have to modify the code according to the certificate type. If the certificate is “.cer” uncomment out few of the lines and you are good to go.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"Azure sdk","slug":"Azure-sdk","permalink":"http://azureossd.github.io/tags/Azure-sdk/"},{"name":"Azure VM","slug":"Azure-VM","permalink":"http://azureossd.github.io/tags/Azure-VM/"},{"name":".cer","slug":"cer","permalink":"http://azureossd.github.io/tags/cer/"},{"name":".pfx","slug":"pfx","permalink":"http://azureossd.github.io/tags/pfx/"},{"name":"certificate","slug":"certificate","permalink":"http://azureossd.github.io/tags/certificate/"},{"name":"service certificate","slug":"service-certificate","permalink":"http://azureossd.github.io/tags/service-certificate/"},{"name":"virtual machine","slug":"virtual-machine","permalink":"http://azureossd.github.io/tags/virtual-machine/"}],"author":"prasadker"},{"title":" Accessing the Tomcat manager console on Azure Java webapp\t\t","slug":"accessing-the-tomcat-manager-console-on-azure-java-webapp","date":"2015-09-18T18:28:53.000Z","updated":"2019-03-26T21:24:16.713Z","comments":true,"path":"accessing-the-tomcat-manager-console-on-azure-java-webapp/","link":"","permalink":"http://azureossd.github.io/accessing-the-tomcat-manager-console-on-azure-java-webapp/","excerpt":"","text":"If we want to manage different applications deployed on Tomcat server, we will require to setup the access to Tomcat admin console. This can be done if you are using the Marketplace Tomcat server or if you are uploading your custom version of Tomcat server. To check how can you use Marketplace tomcat and custom Tomcat version follow the links - http://azure.microsoft.com/en-us/marketplace/partnerrs/microsoft/apachetomcat7/ https://azure.microsoft.com/en-us/documentation/articles/web-sites-java-custom-upload/#application-configuration-examples To setup the Tomcat admin or manager console on Azure Java webapp, follow these settings - 1. Open the Kudu console using the “scm” text azure the webapp name. For eg https://sitename.scm.azurewebsites.net. 2. Using the Debug Console -> CMD prompt, browse to the Tomcat’s conf folder. Generally, it will be like D:\\home\\site\\wwwroot\\bin\\apache-tomcat-7.0.52\\conf. 3. Open the tomcat-users.xml file using the Pencil sign underlined in the figure. 4. Edit the tomcat-users.xml file to setup the role for manager and add user for it.] [ 5. So, now you can access the manager-gui using the username/password as tomcat/tomcat.] 6. Browse to the manager guid by adding “/manager” to your website URL. For eg http://sitename.azurewebsites.net/manager 7. It will prompt you for username and password. Just enter tomcat for both, you should see the admin screen like below - So, using this manager console, you can start/stop/deploy/undeploy applications. Basically, you can get complete control of the application that you have deployed. If you are deploying a huge war file using this method, you may get following exception - * The server encountered an internal error () that prevented it from fulfilling this request.* * Exception java.lang.IllegalStateException: org.apache.tomcat.util.http.fileupload.FileUploadBase\\$SizeLimitExceededException* To resolve this, please modify the web.xml under the manager application “manager/WEB-INF/web.xml” to increase the max file size \\&lt;multipart-config> * \\&lt;!– 50MB max –>* * \\&lt;max-file-size>52428800\\&lt;/max-file-size>* * \\&lt;max-request-size>52428800\\&lt;/max-request-size>* * \\&lt;file-size-threshold>0\\&lt;/file-size-threshold>* * \\&lt;/multipart-config>*","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"java configuration","slug":"java-configuration","permalink":"http://azureossd.github.io/tags/java-configuration/"},{"name":"apache","slug":"apache","permalink":"http://azureossd.github.io/tags/apache/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"deploy","slug":"deploy","permalink":"http://azureossd.github.io/tags/deploy/"},{"name":"manager","slug":"manager","permalink":"http://azureossd.github.io/tags/manager/"},{"name":"tomcat","slug":"tomcat","permalink":"http://azureossd.github.io/tags/tomcat/"},{"name":"webapp","slug":"webapp","permalink":"http://azureossd.github.io/tags/webapp/"}],"author":"prasadker"},{"title":" Taking a crash dump of node/java process using the procdump on Azure WebApp\t\t","slug":"taking-a-crash-dump-of-nodejava-process-using-the-procdump-on-azure-webapp","date":"2015-09-18T17:14:00.000Z","updated":"2019-03-26T20:03:17.280Z","comments":true,"path":"taking-a-crash-dump-of-nodejava-process-using-the-procdump-on-azure-webapp/","link":"","permalink":"http://azureossd.github.io/taking-a-crash-dump-of-nodejava-process-using-the-procdump-on-azure-webapp/","excerpt":"","text":"Azure provides built-in diagnostics to assist with debugging Web Applications hosted in Azure App Service Web Apps. In this article, you will learn how to enable procdump to further troubleshoot intermittent node/java process crash issues. We can analyze the process dump using Visual Studio to understand the root cause of the issue. Please follow below list of steps to enable procdump : 1. Set SCM_COMMAND_IDLE_TIMEOUT to a high value in azure portal -&gt; configure Tab of web app. More info :https://github.com/projectkudu/kudu/wiki/Configurable-settings#changing-the-timeout-before-external-commands-are-killed 2. Open your kudu console(https://Your_Webapp_name.scm.azurewebsites.net/DebugConsole). 3. Browse to the Process Explorer Page - 4. Note down the process id for the process like node.exe or java.exe. 5. Go to the DebugConsole by clicking on the Debug console menu option and select CMD in that. 6. Switch Kudu console to ‘use old console’ (there is a link in there to switch) Change the directory to D:\\devtools\\sysinternals using the command prompt. Run the below command - procdump -accepteula -ma &lt;proc id for your process&gt; -t D:\\home\\site\\wwwroot\\mydmp.dmp Here the option “t” stands for terminate. So whenever, your process crashes the dump will be generated in the mydmp.dmp file. For more options please refer - https://technet.microsoft.com/en-us/sysinternals/dd996900.aspx You can then download the dump file and open it using Visual studio to get more details for the root cause of the crash.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"Azure webapp","slug":"Azure-webapp","permalink":"http://azureossd.github.io/tags/Azure-webapp/"},{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"java troubleshooting","slug":"java-troubleshooting","permalink":"http://azureossd.github.io/tags/java-troubleshooting/"},{"name":"crash","slug":"crash","permalink":"http://azureossd.github.io/tags/crash/"},{"name":"node","slug":"node","permalink":"http://azureossd.github.io/tags/node/"},{"name":"node.exe","slug":"node-exe","permalink":"http://azureossd.github.io/tags/node-exe/"},{"name":"node.js","slug":"node-js","permalink":"http://azureossd.github.io/tags/node-js/"},{"name":"procdump","slug":"procdump","permalink":"http://azureossd.github.io/tags/procdump/"}],"author":"prasadker"},{"title":" NPM3 on Azure Web Apps\t\t","slug":"npm3-on-azure-web-apps","date":"2015-09-14T04:05:00.000Z","updated":"2019-03-26T17:29:27.398Z","comments":true,"path":"npm3-on-azure-web-apps/","link":"","permalink":"http://azureossd.github.io/npm3-on-azure-web-apps/","excerpt":"","text":"On Windows, the file system itself cannot seem to cope very well with too deeply nested node_modules directory used by NPM. This blog provides details on how to change npm version in Azure web apps which uses flat file system instead of Nested dependencies. In Azure web Apps, Every web app comes with a default npm version which co-relates to node.js version you have set in web app configure tab. Ex: Node 0.12.2 would use npm 2.7.4 Node 0.10.32 would use npm 1.4.28 npm@3 executable is available in azure web apps but they are not exposed yet (D:\\Program Files (x86)\\npm\\3.1.0\\npm) using node.js version as above. Below are different ways to deploy node.js application and ways to utilize npm 3 in it. Using Visual Studio Publish option:1) Delete npm_modules folder in your web app folder.2) Upgrade NPM in local environment using npm-windows-upgrade (https://github.com/felixrieseberg/npm-windows-upgrade).3) run npm install in your web app root folder where your package.json file exists. This would create npm_modules folder.4) Publish your web app using Visual Studio. Using Git Deployment :Azure GIT deployment process would involve below steps1) Moves content to azure web app2) Creates default deployment script, if there isn’t one in web app root folder3) Run’s deployment script where it install’s npm modules At Step 2, Instead of deployment process creating a default script. We can include custom deployment script and change it’s content to use npm@3 instead of default npm.Below steps would help you generate custom deployment script :- Install the azure-cli tool, it’ll also give you some cool features on managing azure related resources directly from the command-line: npm install azure-cli -g - Go to the root of your repository (from which you deploy your site).- Run the custom deployment script generator command: azure site deploymentscript --node - Above command will generate the files required to deploy your site, mainly: .deployment - Contains the command to run for deploying your site. deploy.cmd - Contains the deployment script. - In deployment.cmd file, replace line no 103 with below highlighted content to use [npm@3] :: 3. Install npm packages IF EXIST &quot;%DEPLOYMENT_TARGET%\\package.json&quot; ( pushd &quot;%DEPLOYMENT_TARGET%&quot; call :ExecuteCmd &quot;D:\\Program Files (x86)\\npm\\3.1.0\\npm&quot; install --production IF !ERRORLEVEL! NEQ 0 goto error popd ) Similar Links: - Finding Memory Leaks and CPU Usage in Azure Node.js Web App ( http://blogs.msdn.com/b/azureossds/archive/2015/08/23/troubleshoot-finding-memory-leaks-and-cpu-usage-in-node-js-azure-web-app.aspx ) - Debug Node.js Web Apps at Azure ( http://blogs.msdn.com/b/azureossds/archive/2015/08/19/detecting-memory-leak-in-node-js-web-apps-at-azure.aspx )","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"npm3","slug":"npm3","permalink":"http://azureossd.github.io/tags/npm3/"}],"author":"prashanthmadi"},{"title":" Accessing VM extensions like Chef using Azure sdk for Java programmatically\t\t","slug":"accessing-vm-extensions-like-chef-using-azure-sdk-for-java-programmatically","date":"2015-09-08T16:19:00.000Z","updated":"2019-03-26T05:13:37.492Z","comments":true,"path":"accessing-vm-extensions-like-chef-using-azure-sdk-for-java-programmatically/","link":"","permalink":"http://azureossd.github.io/accessing-vm-extensions-like-chef-using-azure-sdk-for-java-programmatically/","excerpt":"","text":"To access the VM extension reference like Chef programmatically, please follow the steps - This blog shows how can you access the Azure VMs and extensions using the Azure Management APIs programmatically. This version is for Java language. You can find Python version here. 1. Install the Azure sdk for Java using the link - https://azure.microsoft.com/en-us/documentation/articles/java-download-windows/. If you are using Eclipse, please scroll down on the same link for installing the plugin.]{style=”font-size: small;”} 2. Once it is install you can use the below code snippet to access your all VM extension reference.] import java.io.IOException; import java.net.URI; import java.net.URISyntaxException; import java.util.ArrayList; import javax.xml.parsers.ParserConfigurationException; import org.xml.sax.SAXException; import com.microsoft.windowsazure.Configuration; import com.microsoft.windowsazure.core.utils.KeyStoreType; import com.microsoft.windowsazure.exception.ServiceException; import com.microsoft.windowsazure.management.compute.ComputeManagementClient; import com.microsoft.windowsazure.management.compute.ComputeManagementService; import com.microsoft.windowsazure.management.compute.models.HostedServiceGetDetailedResponse; import com.microsoft.windowsazure.management.compute.models.HostedServiceListResponse; import com.microsoft.windowsazure.management.compute.models.ResourceExtensionReference; import com.microsoft.windowsazure.management.compute.models.Role; import com.microsoft.windowsazure.management.configuration.ManagementConfiguration; public class TestResourceExtensionRef { static String uri = “https://management.core.windows.net/“; static String subscriptionId = “&lt;your subscription id&gt;”; static String keyStoreLocation = “&lt;your keystore path&gt;”; static String keyStorePassword = “&lt;your keystore password&gt;”; public static void main(String[] args) throws IOException, URISyntaxException, ServiceException, ParserConfigurationException, SAXException { Configuration config = ManagementConfiguration.configure( new URI(uri), subscriptionId, keyStoreLocation, // the file path to the JKS keyStorePassword, // the password for the JKS KeyStoreType.jks // flags that I’m using a JKS key store ); // create a management client to call the API ComputeManagementClient client = ComputeManagementService.create(config); //ArrayList&lt;Role&gt; vmlist = new ArrayList&lt;Role&gt;(); HostedServiceListResponse hostedServiceListResponse = client.getHostedServicesOperations().list(); ArrayList&lt;HostedServiceListResponse.HostedService&gt; hostedServicelist = hostedServiceListResponse.getHostedServices(); for (HostedServiceListResponse.HostedService hostedService : hostedServicelist) { System.out.println(“Hosted Service : ” + hostedService.getServiceName()); HostedServiceGetDetailedResponse hostedServiceGetDetailedResponse = client.getHostedServicesOperations().getDetailed(hostedService.getServiceName()); ArrayList&lt;HostedServiceGetDetailedResponse.Deployment&gt; deploymentlist = hostedServiceGetDetailedResponse.getDeployments(); for (HostedServiceGetDetailedResponse.Deployment deployment : deploymentlist) { System.out.println(“Deployment : ” + deployment.getName()); ArrayList&lt;Role&gt; rolelist = deployment.getRoles(); for (Role role : rolelist) { System.out.println(“Role : ” + role.getRoleName()); ArrayList&lt;ResourceExtensionReference&gt; extnRefList = role.getResourceExtensionReferences(); for (ResourceExtensionReference extnRef : extnRefList) { System.out.println(“Resource Extension : ” + extnRef.getName()); } } } } } } 3. If you want to access the extension for a specific deployment slot, you can use - ComputeManagementClient client = ComputeManagementService.create(config); DeploymentGetResponse depResp = client.getDeploymentsOperations().getBySlot(&quot;azurechefnode&quot;, DeploymentSlot.**Production**); ArrayList\\&lt;Role\\&gt; roleList = depResp.getRoles(); **for**(Role rol : roleList){ ArrayList\\&lt;ResourceExtensionReference\\&gt; extList = rol.getResourceExtensionReferences(); **for**(ResourceExtensionReference extn : extList) System.**out**.println(extn.getName()); }","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Java azure sdk chef knife vm extension","slug":"Java-azure-sdk-chef-knife-vm-extension","permalink":"http://azureossd.github.io/tags/Java-azure-sdk-chef-knife-vm-extension/"}],"author":"prasadker@outlook.com"},{"title":" Finding Memory Leaks and CPU Usage in Azure Node.js Web App\t\t","slug":"finding-memory-leaks-and-cpu-usage-in-azure-node-js-web-app","date":"2015-08-23T19:15:00.000Z","updated":"2019-03-26T06:48:31.722Z","comments":true,"path":"finding-memory-leaks-and-cpu-usage-in-azure-node-js-web-app/","link":"","permalink":"http://azureossd.github.io/finding-memory-leaks-and-cpu-usage-in-azure-node-js-web-app/","excerpt":"","text":"Slow application performance issues tend to be challenging to troubleshoot regardless of the platform in which your application is running. This is due in great part to the sometimes random nature of these issues. These types of issues also often do not result in a specific error being logged. If you think your node.js application is running slow and takes more than few seconds to receive response. Below info may help you analyze where it’s taking longer time and also checks for memory leaks. There are many node.js modules to accomplish this(notably) v8-profiler nodetime(app dynamics) look If you analyze below sample code, I have included memory leak highlighted in Red and CPU intensive work in Amber colors. 12345678910111213141516171819202122232425262728293031/** * Created by prmadi on 8/20/2015. */ var http = require(&apos;http&apos;); var port = process.env.PORT || &apos;3000&apos;; // Memory Leak function LeakingClass() &#123; &#125; var leaks = []; setInterval(function() &#123; for (var i = 0; i &lt; 100; i++) &#123; leaks.push(new LeakingClass); &#125; console.error(&apos;Leaks: %d&apos;, leaks.length); &#125;, 1000); http.createServer(function (req, res) &#123; // CPU intensive work var fibonacci = function(n)&#123; if(n &lt; 1)&#123;return 0;&#125; else if(n == 1 || n == 2)&#123;return 1;&#125; else if(n &gt; 2)&#123;return fibonacci(n - 1) + fibonacci(n-2);&#125; &#125;; fibonacci(40); res.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;); res.end(&apos;Hello World\\n&apos;+ fibonaccif(40)); &#125;).listen(port, &apos;127.0.0.1&apos;); I would show you how to use v8-profiler on above sample code to find memory leaks and CPU Usage. More info on v8-profiler can be found @ https://github.com/node-inspector/v8-profiler Install v8-profiler module using below command in kudu console at webapp root(D:\\home\\site\\wwwroot) or enter it in package.json file before deploying to azure web apps. 1npm install v8-profiler Create a folder “debugdump” in your webapp root(D:\\home\\site\\wwwroot). Add below lines of code to get heap snapshot 123456789var fs = require(&apos;fs&apos;),ws = fs.createWriteStream(&apos;debugdump/&apos;+Date.now() + &apos;.heapsnapshot&apos;),profiler = require(&apos;v8-profiler&apos;),snapshot = profiler.takeSnapshot(),callback = ws.end.bind(ws);snapshot.serialize(function(data) &#123;ws.write(&apos;&apos; + data);&#125;, callback);//begin cpu profiling Add below lines of code to get CPU profile 1234567profiler.startProfiling();// code to be profiled herevar cpuProfile = profiler.stopProfiling();var serialized = JSON.stringify(cpuProfile, null, 2);fs.writeFileSync(&apos;debugdump/&apos;+Date.now() +&apos;.cpuprofile&apos;, serialized, &apos;utf8&apos;); After accessing your application, you would start seeing few files with cpuprofile and heapsnapshot extensoins in D:\\home\\site\\wwwroot\\debugdump folder. Download files in debugdump folder and analyze them using tools like chrome developer tools. Here is my sample code after adding profiler instructions listed above 123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * Created by prmadi on 8/20/2015. */ var http = require(&apos;http&apos;); var port = process.env.PORT || &apos;3000&apos;; function LeakingClass() &#123; &#125; var leaks = []; setInterval(function() &#123; for (var i = 0; i &lt; 100; i++) &#123; leaks.push(new LeakingClass); &#125; &#125;, 1000); http.createServer(function (req, res) &#123; var fs = require(&apos;fs&apos;), ws = fs.createWriteStream(&apos;debugdump/&apos;+Date.now() + &apos;.heapsnapshot&apos;), profiler = require(&apos;v8-profiler&apos;), snapshot = profiler.takeSnapshot(), callback = ws.end.bind(ws); snapshot.serialize(function(data) &#123; ws.write(&apos;&apos; + data); &#125;, callback);//begin cpu profiling var fibonacci = function(n)&#123; if(n &lt; 1)&#123;return 0;&#125; else if(n == 1 || n == 2)&#123;return 1;&#125; else if(n &gt; 2)&#123;return fibonacci(n - 1) + fibonacci(n-2);&#125; &#125;; profiler.startProfiling(); fibonacci(40); var cpuProfile = profiler.stopProfiling(); var serialized = JSON.stringify(cpuProfile, null, 2); fs.writeFileSync(&apos;debugdump/&apos;+Date.now() +&apos;.cpuprofile&apos;, serialized, &apos;utf8&apos;); res.writeHead(200, &#123;&apos;Content-Type&apos;: &apos;text/plain&apos;&#125;); res.end(&apos;Hello World\\n&apos;+ fibonacci(40)); &#125;).listen(port, &apos;127.0.0.1&apos;); – Above code has created few CPU profiles and heap snapshots in my debugdump folder as in below screenshot. – Load these files into chrome developer tools by selecting chrome developer tools &gt; profiles &gt; load – Below is a sample heap snapshot analysis screenshots. As you can see, Leakclass was the culprit in my above sample code which is visible in heap snapshot. – Below is a sample CPU Usage analysis. As you can see, calculating fibonanci number was CPU intensive operation in my request which is visible in CPU profile. Chart View : Heavy (Bottom Up) View :","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"troubleshoot","slug":"troubleshoot","permalink":"http://azureossd.github.io/tags/troubleshoot/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"WAWS","slug":"WAWS","permalink":"http://azureossd.github.io/tags/WAWS/"},{"name":"cpu-usage","slug":"cpu-usage","permalink":"http://azureossd.github.io/tags/cpu-usage/"},{"name":"memory-leaks","slug":"memory-leaks","permalink":"http://azureossd.github.io/tags/memory-leaks/"},{"name":"profiler","slug":"profiler","permalink":"http://azureossd.github.io/tags/profiler/"}],"author":"prashanthmadi"},{"title":" Debug Node.js Web Apps on Azure\t\t","slug":"debug-node-js-web-apps-on-azure","date":"2015-08-19T18:20:00.000Z","updated":"2019-03-26T06:37:33.540Z","comments":true,"path":"debug-node-js-web-apps-on-azure/","link":"","permalink":"http://azureossd.github.io/debug-node-js-web-apps-on-azure/","excerpt":"","text":"Azure provides built-in diagnostics to assist with debugging Node.js applications hosted in Azure App Service Web Apps. In this article, you will learn how to enable logging of stdout and stderr, display error information in the browser, and how to get heap and CPU profiles. Diagnostics for Node.js applications hosted on Azure is provided by IISNode. While this article discusses the most common settings for gathering diagnostics information, it does not provide a complete reference for working with IISNode. For more information on working with IISNode, see the IISNode Readme on GitHub. Finding Error Info: If you are receiving a 500 error on your node.js webapp, Here are few things which you can try to get more info 1) Watch error info on web page (not recommended for production app) Include below line of code in iisnode.yml file at webapp root folder(D:\\home\\site\\wwwroot). devErrorsEnabled: true After including above line, restart your web app and You would start seeing something like below on web browser. iisnode encountered an error when processing the request. HRESULT: 0x6d HTTP status: 500 HTTP subStatus: 1013 HTTP reason: Internal Server Error 2) Using Failed request tracing in azure webapps Select your web app in Azure portal(https://ms.portal.azure.com/). Click on Diagnostic logs in webapp settings and Turn On Failed Request Tracing in Diagnostic Logs Tab. After turning on Failed Request Tracing, Access your error page in browser. This would create new folders(W3SV**) containing failed request logs @ D:\\home\\LogFiles\\ in kudu console(https://Your_Website_name.scm.azurewebsites.net/DebugConsole). Failed request logs would provide you more meaningful info about application error. Below is a sample screenshot Useful Logs : To Troubleshoot above issue, below logs may help you - Uncaught Exception: All uncaught exceptions are by default written to logging-errors.txt file in D:\\home\\LogFiles\\Application folder. You can view them using kudu console(https://Your_Webapp_name.scm.azurewebsites.net/DebugConsole). - stdout and stderror: stdout : console.log(“log content”) - log content would be visible in XXX-stdout-xxx.txt file @ D:\\home\\LogFiles\\Application folder stderror: console.error(“error content”) - error content would be visible in XXX-stderr-xxx.txt file @ D:\\home\\LogFiles\\Application folder You can turn-on these stdout and stderr using below two ways 1) Using iisnode.yml file : Include below line of code in iisnode.yml file at webapp root folder(D:\\home\\site\\wwwroot). loggingEnabled: true 2) Using Azure Portal : Select your web app in Azure portal(https://ms.portal.azure.com/). Click on Diagnostic logs in settings option and Turn On Application logging in Diagnostic Logs Tab. Remote debug : Below content explains how to remotely debug your Node.js application deployed on Azure Web Apps using the node-inspector debugger. 1) Enter below line of code in iisnode.yml file at webapp root folder(D:\\home\\site\\wwwroot). debuggingEnabled: true 2) Check if your web.config file has below rule, else Include it. &lt;rule name=&quot;NodeInspector&quot; patternSyntax=&quot;ECMAScript&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^server.js\\/debug[\\/]?&quot; /&gt; &lt;/rule&gt; 3) Navigate to http://yourapp.azurewebsites.net/server.js/debug_._**This should bring up the familiar node-inspector interface for your application, which allows you to set breakpoints, inspect code, etc** For Advanced configuration on using custom debug url, please refer http://tomasz.janczuk.org/2013/07/debug-nodejs-applications-in-windows.html More Debug Info: 1) Enter below line of code in iisnode.yml file at webapp root folder(D:\\home\\site\\wwwroot). debugHeaderEnabled: true After making above change you would see a url in each response header as in below screen shot. It would provide us insights into state of node.js application. Sample Url : http://bit.ly/NsU2nd#iisnode_ver=0.2.19&amp;node=node.exe&amp;dns=RD000D3A7037D6&amp;worker_pid=6056&amp;node_pid=2556&amp;worker_mem_ws=9676&amp;worker_mem_pagefile=31928&amp;node_mem_ws=29872&amp;node_mem_pagefile=29372&amp;app_processes=1&amp;process_active_req=1&amp;app_active_req=1&amp;worker_total_req=21&amp;np_retry=0&amp;req_time=221&amp;hresult=0 Please find more details @ http://tomasz.janczuk.org/2012/11/diagnose-nodejs-apps-hosted-in-iis-with.html","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"troubleshoot","slug":"troubleshoot","permalink":"http://azureossd.github.io/tags/troubleshoot/"},{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"logging-errors","slug":"logging-errors","permalink":"http://azureossd.github.io/tags/logging-errors/"},{"name":"remote-debug","slug":"remote-debug","permalink":"http://azureossd.github.io/tags/remote-debug/"}]},{"title":" Debug Django Web Application in Azure Web Apps\t\t","slug":"debug-django-web-application-in-azure-web-apps","date":"2015-08-04T17:16:00.000Z","updated":"2019-03-26T06:34:09.938Z","comments":true,"path":"debug-django-web-application-in-azure-web-apps/","link":"","permalink":"http://azureossd.github.io/debug-django-web-application-in-azure-web-apps/","excerpt":"","text":"After creating a Azure Web/API app using Django Framework in Python, you may end-up getting Application errors at some point of your Application Development Process. [[This Blog describes how to enable Application logs for a Azure Web/API APP which uses Django Framework. Before starting debug process make sure that you have below two important files at Web/API APP Root folder. You can find them in wwwroot folder @ kudu console https://samplepythonapp.scm.azurewebsites.net/ 12web.config ptvs_virtualenv_proxy.py Please find more information on above files @ https://azure.microsoft.com/en-us/documentation/articles/web-sites-python-configure/#webconfig You can display Django Application errors using below three channels 1) Display Application Errors on Web Browser Open settings.py file in your Django Web App In Settings.py file change debug option to True as below 1DEBUG = True [[Output : As you can see in above screen shot, Application error info is shown on web page with error Traceback. It is highly recommended to Swtich DEBUG option to False when you move the site into Production. 2) Log Errors in a Azure File System. In settings.py file add below content for LOGGING variable 12345678910111213141516171819202122LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;filters&apos;: &#123; &apos;require_debug_false&apos;: &#123; &apos;()&apos;: &apos;django.utils.log.RequireDebugFalse&apos; &#125; &#125;, &apos;handlers&apos;: &#123; &apos;logfile&apos;: &#123; &apos;class&apos;: &apos;logging.handlers.WatchedFileHandler&apos;, &apos;filename&apos;: &apos;D:\\home\\site\\wwwroot\\myapp.log&apos; &#125; &#125;, &apos;loggers&apos;: &#123; &apos;django&apos;: &#123; &apos;handlers&apos;: [&apos;logfile&apos;], &apos;level&apos;: &apos;ERROR&apos;, &apos;propagate&apos;: False, &#125; &#125; &#125; You can find more information on LOGGING module @ https://docs.djangoproject.com/en/dev/topics/logging/ Output : [[After making above changes, You would see [myapp.log file in wwwroot folder]{style=”background-color: #ffff00”} as in Below screenshot. [Below Screenshot has the error message in myapp.log file. This option is highly suitable for websites in production. 3) Email Application Errors to Developers In settings.py file add below content for LOGGING variable. I have highlighted configuration which is required to send an Email in [RED] 123456789101112131415161718192021222324252627282930313233LOGGING = &#123; &apos;version&apos;: 1, &apos;disable_existing_loggers&apos;: False, &apos;filters&apos;: &#123; &apos;require_debug_false&apos;: &#123; &apos;()&apos;: &apos;django.utils.log.RequireDebugFalse&apos; &#125; &#125;, &apos;handlers&apos;: &#123; &apos;mail_admins&apos;: &#123; &apos;level&apos;: &apos;ERROR&apos;, &apos;filters&apos;: [&apos;require_debug_false&apos;], &apos;class&apos;: &apos;django.utils.log.AdminEmailHandler&apos;, &apos;include_html&apos;: True &#125;, &apos;logfile&apos;: &#123; &apos;class&apos;: &apos;logging.handlers.WatchedFileHandler&apos;, &apos;filename&apos;: &apos;D:\\home\\site\\wwwroot\\myapp.log&apos; &#125; &#125;, &apos;loggers&apos;: &#123; &apos;django.request&apos;: &#123; &apos;handlers&apos;: [&apos;mail_admins&apos;], &apos;level&apos;: &apos;ERROR&apos;, &apos;propagate&apos;: True, &#125;, &apos;django&apos;: &#123; &apos;handlers&apos;: [&apos;logfile&apos;], &apos;level&apos;: &apos;ERROR&apos;, &apos;propagate&apos;: False, &#125; &#125; &#125; Include smtp connection details in settings.py file as below 12345EMAIL_USE_TLS = TrueEMAIL_HOST = &apos;smtp.gmail.com&apos;EMAIL_PORT = 587EMAIL_HOST_USER = &apos;Your_GMAIL@gmail.com&apos;EMAIL_HOST_PASSWORD = &apos;Your_GMAIL_Password&apos; Change recipient email address in setting.py file as Below 123ADMINS = ( (&apos;Prashanth madi&apos;, &apos;prmadi@microsoft.com&apos;), ) Output : A email would be sent to recipients mentioned above when a application error occurs. Below is a Sample Application error message which I received for my website. You can also send an email in html format by including below line of code in logger handler. Below is a Sample Application error message which I received for my website in HTML format. 1&apos;include_html&apos;: True Find more details on using Python in Azure Web/API Apps at below links : Python Developer Center - http://azure.microsoft.com/en-us/develop/python/ Configuring Python in Azure Web Apps - https://azure.microsoft.com/en-us/documentation/articles/web-sites-python-configure/ Troubleshoot- logging Fatal Errors of Azure Web/API Apps in Python - http://blogs.msdn.com/b/azureossds/archive/2015/07/15/troubleshoot-logging-python-application-errors-on-azure-web-api-apps.aspx","categories":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/categories/python/"},{"name":"Uncategorized","slug":"python/Uncategorized","permalink":"http://azureossd.github.io/categories/python/Uncategorized/"}],"tags":[{"name":"troubleshoot","slug":"troubleshoot","permalink":"http://azureossd.github.io/tags/troubleshoot/"},{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"WAWS","slug":"WAWS","permalink":"http://azureossd.github.io/tags/WAWS/"},{"name":"python","slug":"python","permalink":"http://azureossd.github.io/tags/python/"},{"name":"APIAPP","slug":"APIAPP","permalink":"http://azureossd.github.io/tags/APIAPP/"},{"name":"error-logs","slug":"error-logs","permalink":"http://azureossd.github.io/tags/error-logs/"}],"author":"prashanthmadi@outlook.com"},{"title":" ClearDB (MySQL) Passwords and Azure Connection Strings\t\t","slug":"cleardb-mysql-passwords-and-azure-connection-strings","date":"2015-08-03T23:19:37.000Z","updated":"2019-03-26T06:00:47.971Z","comments":true,"path":"cleardb-mysql-passwords-and-azure-connection-strings/","link":"","permalink":"http://azureossd.github.io/cleardb-mysql-passwords-and-azure-connection-strings/","excerpt":"","text":"Many Open Source Web Applications on Azure make use of the ClearDB MySQL databases. This article will cover how to reset your ClearDB Database Password, including updating the connection string within Azure so existing processes such as database backups will continue to function. *Note* If you reset your database password, you will also have to update existing applications that are relying on this connection information. E.g: WordPress, Drupal, Joomla, etc. Changing your ClearDB Password The ClearDB subscription is linked to Azure accounts through the “Linked Resources” tab. 1) Linked Resources Click the ‘’”Linked Resources” Tab and select the database name 2) Endpoint Information Click the Endpoint Information Tab Click Reset to update the password 3) Password Prompt Click OK to generate new password. Now that the ClearDB password is updated, we will update your “Connection String” in the Azure Portal so your database backups and other site extensions (such as PHPMyAdmin) will work properly. Updating Azure Connection Strings 1) Connection Strings In Azure Portal - Configuration Tab, scroll to “Connection Strings” area Click “Show Connection Strings” 2) Copy Connection Strings Copy this string into your clipboard 3) Update Connection String Paste into a text-editor Update the password 4) Restore Connection String Once you have your string updated, paste it back into the portal 5) Save Settings Click the save icon Update Application-specific Configuration In this example, we’ll look at WordPress Database Configuration. In the file, wp-config.php, update ‘DB_PASSWORD’ to the newly generated password:","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"},{"name":"ClearDB","slug":"Azure-App-Service-Web-App/ClearDB","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/ClearDB/"}],"tags":[{"name":"ClearDB Troubleshooting","slug":"ClearDB-Troubleshooting","permalink":"http://azureossd.github.io/tags/ClearDB-Troubleshooting/"}],"author":"msangapu@outlook.com"},{"title":" Migrate Yii Framework Application to Azure Web App\t\t","slug":"migrate-yii-framework-application-to-azure-web-app","date":"2015-07-23T18:53:00.000Z","updated":"2019-03-26T17:16:25.003Z","comments":true,"path":"migrate-yii-framework-application-to-azure-web-app/","link":"","permalink":"http://azureossd.github.io/migrate-yii-framework-application-to-azure-web-app/","excerpt":"","text":"1. Create a PHP Empty Web App on Azure: [![](/wp-content/uploads/2019/03/1184.yii-0001.PNG)](/wp-content/uploads/2019/03/1184.yii-0001.PNG) [![](/wp-content/uploads/2019/03/6305.yii-0002.PNG)](/wp-content/uploads/2019/03/6305.yii-0002.PNG) 2. Copy the contents from Yii framework application root to wwwroot, e.g. [![](/wp-content/uploads/2019/03/3835.yii-002.PNG)](/wp-content/uploads/2019/03/3835.yii-002.PNG) Note: In this example, framework and application (assets, themes, index.php, etc.) are all in wwwroot. 3. Turn on error log, so that you can watch for errors in php_errors.log during migration: If log_errors is default to &quot;Off&quot;, create a .user.ini file in wwwroot, add this line in .user.ini: log_errors=On 4. Modify database connection criteria from main.php (in this demo, it is protected/config/main.php), link to right database. 5. If you have hiding index.php implemented, configure it in web.config (create web.config file under wwwroot if it is not there), add rewriting rules. Here is sample web.config: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;!--# otherwise forward it to index.php--&gt; &lt;rule name=&quot;Imported Rule 1&quot;&gt; &lt;match url=&quot;.&quot; ignoreCase=&quot;false&quot; /&gt; &lt;conditions&gt; &lt;!--# if a directory or a file exists, use it directly--&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsFile&quot; ignoreCase=&quot;false&quot; negate=&quot;true&quot; /&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsDirectory&quot; ignoreCase=&quot;false&quot; negate=&quot;true&quot; /&gt; &lt;/conditions&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;index.php&quot; /&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; 6. Check index.php, validate the paths for $yii and $config. If you included any php functions, validate file path as well. Test your site &lt;your-site-name&gt;.azurewebsites.net, it should point to site home page, e.g. [![](/wp-content/uploads/2019/03/5228.yii-003.PNG)](/wp-content/uploads/2019/03/5228.yii-003.PNG)","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Azure web app","slug":"Azure-web-app","permalink":"http://azureossd.github.io/tags/Azure-web-app/"},{"name":"web.config","slug":"web-config","permalink":"http://azureossd.github.io/tags/web-config/"},{"name":"Yii framework application","slug":"Yii-framework-application","permalink":"http://azureossd.github.io/tags/Yii-framework-application/"}],"author":"yiwang88"},{"title":" Troubleshooting PHPMyAdmin Site Extension\t\t","slug":"troubleshooting-phpmyadmin-site-extension","date":"2015-07-20T17:44:30.000Z","updated":"2019-03-26T20:20:10.391Z","comments":true,"path":"troubleshooting-phpmyadmin-site-extension/","link":"","permalink":"http://azureossd.github.io/troubleshooting-phpmyadmin-site-extension/","excerpt":"","text":"If you recently started having trouble (HTTP 500) with PHPMyAdmin (PMA) SiteExtension, it may be a problem with sessions. The errors look like this: Browser Screenshot of Error Text Description Chrome The page cannot be displayed because an internal server error has occurred. Internet Explorer The website cannot display the page This error (HTTP 500 Internal Server Error) means that the website you are visiting had a server problem which prevented the webpage from displaying. For more information about HTTP errors, see Help. We can force PMA to use files as session handler. To do this, follow these steps: 1. Launch Kudu Console (&lt;site&gt;.scm.azurewebsites.net) 2. Under Debug Console, select CMD, then click SiteExtensions 3. Click phpmyadmin 4. Click libraries 5. Once here, expand the list area by clicking the down arrow 6. Scroll down and find session.inc.php, open it by clicking the pencil icon 7. Search (ctrl-f) for save_handler 8. From the beginning of the line, remove the // characters So this should now read: ini_set(‘session.save_handler’, ‘files’); Notice the // characters have been removed. 9. Click save 10. Now startup PMA !","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"Azure web app","slug":"Azure-web-app","permalink":"http://azureossd.github.io/tags/Azure-web-app/"},{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"WAWS","slug":"WAWS","permalink":"http://azureossd.github.io/tags/WAWS/"},{"name":"PHP troubleshooting","slug":"PHP-troubleshooting","permalink":"http://azureossd.github.io/tags/PHP-troubleshooting/"},{"name":"mysql","slug":"mysql","permalink":"http://azureossd.github.io/tags/mysql/"},{"name":"php extension","slug":"php-extension","permalink":"http://azureossd.github.io/tags/php-extension/"},{"name":"PHPMyAdmin","slug":"PHPMyAdmin","permalink":"http://azureossd.github.io/tags/PHPMyAdmin/"}],"author":"msangapu"},{"title":" Migrate Zend Framework 2 Project to Azure Web App\t\t","slug":"migrate-zend-framework-2-project-to-azure-web-app","date":"2015-07-17T19:45:00.000Z","updated":"2019-03-26T17:17:36.611Z","comments":true,"path":"migrate-zend-framework-2-project-to-azure-web-app/","link":"","permalink":"http://azureossd.github.io/migrate-zend-framework-2-project-to-azure-web-app/","excerpt":"","text":"1. Create an empty web app on Azure 2. Check PHP runtime \\- Default PHP version on Azure web apps is PHP 5.4, you can change it from Azure portal &quot;CONFIGURE&quot; page. Change PHP version to match the version used in your ZF2 project \\- Create an info page at wwwroot, e.g. info.php, and check it from &lt;your-site-name&gt;.azurewebsites.net/info.php 3. Deploy Zend Framework 2 project to wwwroot There are different ways to deploy the project to Azure web app. When you deploy the project, copy the contents under ZF2 project root to wwwroot, e.g. [![](/wp-content/uploads/2019/03/8053.zend-02.PNG)](/wp-content/uploads/2019/03/8053.zend-02.PNG) 4. Modify web.config and set application root to wwwroot/public [http://blogs.msdn.com/b/azureossds/archive/2015/06/23/web-config-for-zend-framework-project-on-azure-apps.aspx](http://blogs.msdn.com/b/azureossds/archive/2015/06/23/web-config-for-zend-framework-project-on-azure-apps.aspx) 5. Compare customer PHP extensions Check PHP extensions from info.php, if your PHP extension(s) is not listed in the info page, find the matching window version of that extension, install it on Azure App 6. Create .user.ini in wwwroot/public Under wwwroot/public, create .user.ini file, turn on PHP error log, add this line to .user.ini: log_errors=On If you have any PHP package(s) installed with ZF2 project, add them to include_path in .user.ini 7. Test your site: &amp;lt;your-site-name&gt;.azurewebsite.net should link to the home page (wwwroot/public/index.php) of the site, e.g. [![](/wp-content/uploads/2019/03/3660.zend-03.PNG)](/wp-content/uploads/2019/03/3660.zend-03.PNG)","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Azure web app","slug":"Azure-web-app","permalink":"http://azureossd.github.io/tags/Azure-web-app/"},{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"Zend Framework 2","slug":"Zend-Framework-2","permalink":"http://azureossd.github.io/tags/Zend-Framework-2/"}],"author":"yiwang88"},{"title":" Troubleshoot- logging python Application errors on Azure Web/API Apps\t\t","slug":"troubleshoot-logging-python-application-errors-on-azure-webapi-apps","date":"2015-07-14T23:03:00.000Z","updated":"2019-03-26T20:12:47.745Z","comments":true,"path":"troubleshoot-logging-python-application-errors-on-azure-webapi-apps/","link":"","permalink":"http://azureossd.github.io/troubleshoot-logging-python-application-errors-on-azure-webapi-apps/","excerpt":"","text":"After creating a Azure Web/API app using python, you may end-up getting below 500 error at some point of your application development process. This Blog describes how to enable Application logs for a python Web/API APP on Azure. The page cannot be displayed because an internal server error has occurred. If you have worked earlier on Azure Web app, General tendency would be to look at LogFiles folder in kudu console(https://Your_Website.scm.azurewebsites.net) but that won’t provide you much info about python application issue. To overcome this, Please follow below set of instructions to receive application logs 1) Navigate to your new azure portal and click on settings in your Web app. 2) Click on Application Settings in Settings Tab 3) Enter Below Key/Value pair under App Settings in Application Settings Tab. Key : WSGI_LOG Value : D:\\home\\site\\wwwroot\\logs.txt - (Enter your choice of file name here) 4) Now you should be able to see logs.txt file in wwwroot folder as mentioned in above step Troubleshoot : If you still haven’t found that logs.txt file, check if ptvs_virtualenv_proxy.py file is similar to below link content. https://azure.microsoft.com/en-us/documentation/articles/web-sites-python-configure/#virtual-environment-proxy Find more details on using Python in Azure Web/API Apps at below links : - Python Developer Center - http://azure.microsoft.com/en-us/develop/python/ - Configuring Python in Azure Web Apps - https://azure.microsoft.com/en-us/documentation/articles/web-sites-python-configure/","categories":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/categories/python/"},{"name":"Uncategorized","slug":"python/Uncategorized","permalink":"http://azureossd.github.io/categories/python/Uncategorized/"}],"tags":[{"name":"troubleshoot","slug":"troubleshoot","permalink":"http://azureossd.github.io/tags/troubleshoot/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"WAWS","slug":"WAWS","permalink":"http://azureossd.github.io/tags/WAWS/"},{"name":"python","slug":"python","permalink":"http://azureossd.github.io/tags/python/"},{"name":"APIAPP","slug":"APIAPP","permalink":"http://azureossd.github.io/tags/APIAPP/"},{"name":"error-logs","slug":"error-logs","permalink":"http://azureossd.github.io/tags/error-logs/"}],"author":"prashanthmadi"},{"title":" Use Microsoft Azure Redis Cache with Drupal 7\t\t","slug":"use-microsoft-azure-redis-cache-with-drupal","date":"2015-07-14T19:58:00.000Z","updated":"2019-03-26T20:35:29.249Z","comments":true,"path":"use-microsoft-azure-redis-cache-with-drupal/","link":"","permalink":"http://azureossd.github.io/use-microsoft-azure-redis-cache-with-drupal/","excerpt":"","text":"1. Install Drupal Redis Module: https://www.drupal.org/project/redis 2. Subscribe Microsoft Azure Redis Cache: http://azure.microsoft.com/en-us/services/cache/ 3. Install Predis package:\\ Download: https://github.com/nrk/predis/\\ Install: Unzip predis-1.0.zip (downloaded from above link), create a folder “predis” at wwwroot, copy contents in “predis-1.0” to “wwwroot/predis”\\ Run “php composer.phar install” (in the same directory with composer.json) (If you do not have composer.phar installed, install it at wwwroot, download site: https://getcomposer.org/download/, you can use the curl command on Azure) - Modify include_path in .user.ini: add include_path=’.;D:\\home\\site\\wwwroot\\predis’ )\\ Require Predis package before use it: Add require(“predis/autoload.php”); in PHP code 4. Configure Redis in Drupal:\\In .settings.php, add following code to configure redis cache (sample code): require(“predis/autoload.php”); \\$conf[‘redis_client_interface’] = ‘Predis’;\\\\$conf[‘redis_client_host’] = ‘\\&lt;redisCacheName.redis.cache.windows.net>‘;\\\\$conf[‘redis_client_port’] = 6379;\\\\$conf[‘redis_client_password’] = ‘\\‘;\\\\$conf[‘lock_inc’] = ‘sites/all/modules/contrib/redis/redis.lock.inc’;\\\\$conf[‘cache_backends’][] = ‘sites/all/modules/contrib/redis/redis.autoload.inc’;\\\\$conf[‘cache_default_class’] = ‘Redis_Cache’; Note: If SSL port 6380 does not work, turn on NON-SSL PORT 6379 (change the value of “Allow access only via SSL” to “No”) 5. Test: - If the configuration works and connect to Azure Redis Cache, you should see the hostname and port populated in Drupal. - Turn on Diagnostic in your Microsoft Azure Redis Cache, check the data from Monitoring tool, example data: 6. Reference: https://redislabs.com/drupal-redis","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Drupal Redis Module","slug":"Drupal-Redis-Module","permalink":"http://azureossd.github.io/tags/Drupal-Redis-Module/"},{"name":"Microsoft Azure Redis Cache","slug":"Microsoft-Azure-Redis-Cache","permalink":"http://azureossd.github.io/tags/Microsoft-Azure-Redis-Cache/"},{"name":"Predis","slug":"Predis","permalink":"http://azureossd.github.io/tags/Predis/"}],"author":"yiwang88"},{"title":" Setup Azure CDN on Drupal\t\t","slug":"setup-azure-cdn-on-drupal","date":"2015-07-01T20:57:00.000Z","updated":"2019-03-26T19:44:36.412Z","comments":true,"path":"setup-azure-cdn-on-drupal/","link":"","permalink":"http://azureossd.github.io/setup-azure-cdn-on-drupal/","excerpt":"","text":"1. Create Azure CDN endpoint: From Azure portal, NEW-&gt;APP SERVICES-&gt;CDN-&gt;QUICK CREATE, select “Web Apps” for “ORIGIN TYPE”, select site URL for “ORIGIN URL” CDN endpoint is listed in “CDN” section after created: Note: It takes 60 min to populate the CDN. 2. Install CDN module on Drupal (https://www.drupal.org/project/CDN), and map to Azure CDN endpoint: Select “Origin Pull”, put the URL of Azure CDN endpoint to “CDN mapping” (note: no trailing / at the end of the URL), save the configuration. 3. To test, open developer tool from browser, check if img/css/js are pulling from Azure CDN endpoint 4. To check CDN integration statistics, turn on “Display statistics” , the result will be displayed for admin login.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Azure CDN","slug":"Azure-CDN","permalink":"http://azureossd.github.io/tags/Azure-CDN/"},{"name":"Drupal","slug":"Drupal","permalink":"http://azureossd.github.io/tags/Drupal/"}],"author":"yiwang88"},{"title":" Install Python Modules on Azure App Services\t\t","slug":"install-native-python-modules-on-azure-web-apps-api-apps","date":"2015-06-30T04:44:00.000Z","updated":"2019-03-26T16:28:26.347Z","comments":true,"path":"install-native-python-modules-on-azure-web-apps-api-apps/","link":"","permalink":"http://azureossd.github.io/install-native-python-modules-on-azure-web-apps-api-apps/","excerpt":"","text":"Installing Python packages in Azure App Services is little tricky using pip. In this blog, I would provide best practice to do that. Pip Install on Azure App Services might fail because It may simply be that the package is not available on the Python Package Index. It could be that a compiler is missing (Azure App Service is a sandbox environment and does not have all the modules/compilers installed inside it). Below is one such common scenario building &apos;Crypto.Random.OSRNG.winrandom&apos; extension warning: GMP or MPIR library not found; Not building Crypto.PublicKey._fastmath. error: Microsoft Visual C++ 9.0 is required (Unable to find vcvarsall.bat). Get it from https://aka.ms/vcpython27 It’s recommend to use wheels for installing Python dependencies. Many of the popular modules already provide wheel files listed in PyPI. Let’s say if I want to install below list of Python modules django&lt;2 pycrypto==2.6.1 pandas==0.18.1 numpy==1.11.1 Creating Wheel Files in Local EnvironmentI’m using Python 3.5.2 x64 for this blog. So i will create wheel files for Python35 x64. Note : You don’t have to create wheels for all the Python modules. Do this only for modules which have trouble installing in Azure App Services I have python35 x64 installed in my local environment @ C:\\Python35 folder Create a requirements.txt file and add above modules inside it. Install wheel module using below command (we would use this module to create wheels later) &gt; C:\\Python35\\python.exe -m pip install wheel Use Below Command to create wheel files inside wheelhouse folder in Local environment &gt; C:\\Python35\\python.exe -m pip wheel -r requirements.txt -w wheelhouse Above step would have created a wheelhouse folder with wheel files for modules listed in requirements.txt file (In my cases it created wheel files for Python35 arch as you can see in file names)\\\\ Alternatively, You can also Download wheel files available online @ http://www.lfd.uci.edu/~gohlke/pythonlibs/ Upgrade Python version on Web AppsDefault Python/Pip versions on Azure Web Apps are little old (as of 01/17 -This might change in future). Older version of Python/Pip have few known issues during deployment/run-time. Follow Below steps to update Python version on your web app. Navigate to Azure portal Click on App Service blade of Web App, select Extensions and then Add. From the list of extensions, scroll down until you spot the Python logos, then choose the version you need\\ For this blog I’m choosing Python 3.5.2 x64, It would install new version of python @ D:\\home\\Python35 Install requirements on Azure App Services While moving your code to Azure App services make sure to include below line of code as first line in requirements.txt file --find-links wheelhouse Install Manually using Kudu Navigate to kudu console of your app (https://Your_app_name.scm.azurewebsites.net/DebugConsole) Navigate to the folder where you have requirements.txt file and run bellow command &gt; D:\\home\\Python35\\python.exe -m pip install --upgrade -r requirements.txt After running above command, all the Python modules listed in requirements.txt file would be installed @ D:\\home\\Python35\\Lib\\ folder You might have different path for python.exe depending on python version you are using. Install using Deployment ScriptIf you are using Deployment script, Include below line of code in deploy.cmd :: 2. Install packages echo Pip install requirements. D:\\home\\Python35\\python.exe -m pip install --upgrade -r requirements.txt IF !ERRORLEVEL! NEQ 0 goto error For more details refer Django app with HttpPlatformHandler in Azure App Services - Windows Install modules in non-default folderAs I have mentioned earlier, running above command would install modules\\\\@ D:\\home\\Python35\\Lib\\ folder. Use -t option to install dependencies in non-default folder D:\\home\\Python35\\python.exe -m pip install --upgrade -r requirements.txt -t D:\\home\\site\\wwwroot\\pymodules Above Command would install Python modules @ D:\\home\\site\\wwwroot\\pymodules folder Set PYTHONPATH in App settings at Azure portal for web app I have seen few wheel files/Python modules having trouble installing with older version of Pip/Python. Try with newer version’s of Python/pip if you have any issues.","categories":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/categories/python/"},{"name":"Uncategorized","slug":"python/Uncategorized","permalink":"http://azureossd.github.io/categories/python/Uncategorized/"}],"tags":[{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"WAWS","slug":"WAWS","permalink":"http://azureossd.github.io/tags/WAWS/"},{"name":"python","slug":"python","permalink":"http://azureossd.github.io/tags/python/"},{"name":"APIAPP","slug":"APIAPP","permalink":"http://azureossd.github.io/tags/APIAPP/"},{"name":"pycrypto","slug":"pycrypto","permalink":"http://azureossd.github.io/tags/pycrypto/"},{"name":"Python-Wheel","slug":"Python-Wheel","permalink":"http://azureossd.github.io/tags/Python-Wheel/"}],"author":"prashanthmadi"},{"title":" Create a new Azure Apiapp in python supporting swagger 2.0\t\t","slug":"create-a-new-azure-apiapp-in-python-supporting-swagger-2-0","date":"2015-06-29T02:33:00.000Z","updated":"2019-03-26T06:18:16.591Z","comments":true,"path":"create-a-new-azure-apiapp-in-python-supporting-swagger-2-0/","link":"","permalink":"http://azureossd.github.io/create-a-new-azure-apiapp-in-python-supporting-swagger-2-0/","excerpt":"","text":"An API app is an App Service web app with additional features that enhance the experience of developing, deploying, publishing, consuming, managing, and monetizing RESTful web APIs. For More information Please refer : https://azure.microsoft.com/en-us/documentation/articles/app-service-api-apps-why-best-platform/ This Blog would provide steps to create a sample Azure API APP in Python using Flask-restplus 1) Add a new virtual environment proxy file(ptvs_virtualenv_proxy.py).sample file is available @https://azure.microsoft.com/en-us/documentation/articles/web-sites-python-configure/#virtual-environment-proxy 2) Create a requirements.txt file with below content. Find more details about package management @ https://azure.microsoft.com/en-us/documentation/articles/web-sites-python-configure/#package-management 1flask-restplus==0.7.2 3) Get a sample flask-restplus code available @ http://flask-restplus.readthedocs.org/en/latest/example.html. I have placed my code in [api.py] 4) Create a new folder and add a web.config file in your local workspace. You can find a sample @ https://azure.microsoft.com/en-us/documentation/articles/web-sites-python-configure/#webconfig Change value of WSGI_ALT_VIRTUALENV_HANDLER in web.config as required. I have mentioned it as api.app because my sample code was in api.py file with app as main method in it. 5) Create a new file apiapp.json at root folder 1234567891011121314&#123; &quot;$schema&quot;: &quot;http://json-schema.org/schemas/2014-11-01/apiapp.json#&quot;, &quot;id&quot;: &quot;Bumblebee&quot;, &quot;namespace&quot;: &quot;microsoft.com&quot;, &quot;gateway&quot;: &quot;2015-01-14&quot;, &quot;version&quot;: &quot;1.9.0&quot;, &quot;title&quot;: &quot;Bumblebee&quot;, &quot;summary&quot;: &quot;&quot;, &quot;author&quot;: &quot;&quot;, &quot;endpoints&quot;: &#123; &quot;apiDefinition&quot;: &quot;/swagger&quot;, &quot;status&quot;: null &#125;&#125; 6) At the end you would see below list of files Please find more details on creating and deploying Azure API app at below link https://azure.microsoft.com/en-us/documentation/articles/app-service-api-nodejs-api-app/ After deploying your app, you should be able to see app definition in portal as below Similar Links : Troubleshoot Azure API APP - http://blogs.msdn.com/b/azureossds/archive/2015/06/01/troubleshoot-azure-api-app.aspx Create a NodeJs API APP - http://blogs.msdn.com/b/azureossds/archive/2015/06/01/creating-a-nodejs-api-app.aspx","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"python","slug":"python","permalink":"http://azureossd.github.io/tags/python/"},{"name":"APIAPP","slug":"APIAPP","permalink":"http://azureossd.github.io/tags/APIAPP/"},{"name":"flask-restplus","slug":"flask-restplus","permalink":"http://azureossd.github.io/tags/flask-restplus/"}],"author":"prashanthmadi@outlook.com"},{"title":" Authenticating Azure Resource Management REST API requests using Java\t\t","slug":"authenticating-azure-resource-management-rest-api-requests-using-java","date":"2015-06-23T22:45:00.000Z","updated":"2019-03-26T05:13:05.402Z","comments":true,"path":"authenticating-azure-resource-management-rest-api-requests-using-java/","link":"","permalink":"http://azureossd.github.io/authenticating-azure-resource-management-rest-api-requests-using-java/","excerpt":"","text":"This blog talks about how to authenticate Azure Resource Manager requests through REST API using Java. All the tasks that are used to manage resources that are deployed in resource groups with the Azure Resource Manager will need to be authenticated using Azure Active Directory. There are multiple ways to setup authentication with .NET, but with java there are two ways, you can authenticate requests. Both require that you have co-administrator access to the Azure Account and also global admin access to the active directory which we will use to make REST API requests. You would first need to create a Service Principal with Azure Resource Manager. For this you will need to Download and configure Azure Active Directory Module for Windows PowerShell or CLI. Then follow instructions here to switch to Azure Resource Manager Mode. Once you are ready to use PowerShell/CLI with Azure Active Directory, follow the steps provided here to create a service principal. Note down the ApplicationID and the password used to create the service principal. Now you will need to download multiple java modules to make this work. Here is the list: ADAL for Java: This can be downloaded from here. This module has multiple dependencies, which are: oauth2-oidc-sdk (Nimbus) gson (Google) slf4j-api (Apache) httpclient (Apache) Once you download these and configure them in build path, add this code to request access tokens from Azure Resource Management REST API’s. You can add this code into a function and call the function to return the results. Please note that there are some parameters like tenant_id, password, client_id, subscription_id that will need to be replaced for this to work. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import java.io.BufferedReader; import java.io.InputStreamReader; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; import javax.naming.ServiceUnavailableException; import com.microsoft.aad.adal4j.AuthenticationContext; import com.microsoft.aad.adal4j.AuthenticationResult; import com.microsoft.aad.adal4j.ClientCredential; import org.apache.http.HttpResponse; import org.apache.http.client.HttpClient; import org.apache.http.client.methods.HttpGet; import org.apache.http.impl.client.DefaultHttpClient; public class PublicClient &#123; /*tenant_id can be found from your azure portal. Login into azure portal and browse to active directory and choose the directory you want to use. Then click on Applications tab and at the bottom you should see &quot;View EndPoints&quot;. In the endpoints, the tenant_id will show up like this in the endpoint url&apos;s: https://login.microsoftonline.com/&#123;tenant_id&#125; */ private final static String AUTHORITY = &quot;https://login.windows.net/&#123;tenant_id&#125;&quot;; public static void main(String args[]) throws Exception &#123; AuthenticationResult result = getAccessTokenFromUserCredentials(); System.out.println(&quot;Access Token - &quot; + result.getAccessToken()); HttpClient client = new DefaultHttpClient(); /* replace &#123;subscription_id&#125; with your subscription id and &#123;resourcegroupname&#125; with the resource group name for which you want to list the VM&apos;s. */ HttpGet request = new HttpGet(&quot;https://management.azure.com/subscriptions/&#123;subscription_id&#125;/resourceGroups/&#123;resourcegroupname&#125;/providers/Microsoft.ClassicCompute/virtualMachines?api-version=2014-06-01&quot;); request.addHeader(&quot;Authorization&quot;,&quot;Bearer &quot; + result.getAccessToken()); HttpResponse response = client.execute(request); BufferedReader rd = new BufferedReader (new InputStreamReader(response.getEntity().getContent())); String line = &quot;&quot;; while ((line = rd.readLine()) != null) &#123; System.out.println(line); &#125; &#125; private static AuthenticationResult getAccessTokenFromUserCredentials() throws Exception &#123; AuthenticationContext context = null; AuthenticationResult result = null; ExecutorService service = null; try &#123; service = Executors.newFixedThreadPool(1); context = new AuthenticationContext(AUTHORITY, false, service); /* Replace &#123;client_id&#125; with ApplicationID and &#123;password&#125; with password that were used to create Service Principal above. */ ClientCredential credential = new ClientCredential(&quot;&#123;client_id&#125;&quot;,&quot;&#123;password&#125;&quot;); Future&lt;AuthenticationResult&gt; future = context.acquireToken(&quot;https://management.azure.com/&quot;, credential, null); result = future.get(); &#125; finally &#123; service.shutdown(); &#125; if (result == null) &#123; throw new ServiceUnavailableException(&quot;authentication result was null&quot;); &#125; return result; &#125; &#125; The REST API endpoints can be found here which can be used to manage your resources on Azure Resource Manager.","categories":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/categories/Java/"}],"tags":[{"name":"java adal rest api arm","slug":"java-adal-rest-api-arm","permalink":"http://azureossd.github.io/tags/java-adal-rest-api-arm/"}],"author":"sureddy1@outlook.com"},{"title":" web.config for Zend Framework Project on Azure Apps\t\t","slug":"web-config-for-zend-framework-project-on-azure-apps","date":"2015-06-23T14:48:00.000Z","updated":"2019-03-26T20:49:34.628Z","comments":true,"path":"web-config-for-zend-framework-project-on-azure-apps/","link":"","permalink":"http://azureossd.github.io/web-config-for-zend-framework-project-on-azure-apps/","excerpt":"","text":"When you deploy Zend Framework project to Azure Apps, the web.config provided by Zend (http://framework.zend.com/manual/1.12/en/project-structure.rewrite.html) maybe not fit. Here is how to modify web.config and configure new application root: 1. Modify web.config: &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;rule name=&quot;Imported Rule 1&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^.*$&quot; /&gt; &lt;conditions logicalGrouping=&quot;MatchAny&quot;&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsFile&quot; pattern=&quot;&quot; ignoreCase=&quot;false&quot; /&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsDirectory&quot; pattern=&quot;&quot; ignoreCase=&quot;false&quot; /&gt; &lt;/conditions&gt; &lt;action type=&quot;None&quot; /&gt; &lt;/rule&gt; &lt;rule name=&quot;Imported Rule 2&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^.*$&quot; /&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;/index.php&quot; /&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; 2. From “virtual applications and directories” in Azure portal “CONFIGURE” tab, configure web root to site\\wwwroot\\public, this is the application root of Zend Framework project. [![](/wp-content/uploads/2019/03/0020.zendroot.PNG)](/wp-content/uploads/2019/03/0020.zendroot.PNG) 3. Copy web.config to site\\wwwroot\\public, the same location with index.php and old .htaccess .","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"web.config","slug":"web-config","permalink":"http://azureossd.github.io/tags/web-config/"},{"name":"Rewrite Rules","slug":"Rewrite-Rules","permalink":"http://azureossd.github.io/tags/Rewrite-Rules/"},{"name":"Zend Framework","slug":"Zend-Framework","permalink":"http://azureossd.github.io/tags/Zend-Framework/"}],"author":"yiwang88"},{"title":" Migrating data from On-Premise MySQL Database to ClearDB\t\t","slug":"migrating-data-from-on-premise-mysql-database-to-cleardb","date":"2015-06-18T22:25:00.000Z","updated":"2019-03-26T17:20:11.354Z","comments":true,"path":"migrating-data-from-on-premise-mysql-database-to-cleardb/","link":"","permalink":"http://azureossd.github.io/migrating-data-from-on-premise-mysql-database-to-cleardb/","excerpt":"","text":"Note: Please keep multiple copies of your database when migrating data, so you can fallback if any issues occur. This blog is to help customers migrate their data from On-Premise MySQL database to ClearDB. We will use a single self-contained file export to migrate your On-Premise database. You can only use Self-Contained File export for MySQL databases running InnoDB Storage engine. There are multiple ways to export data from your On-Premise Database: Using mysqldump command line utility. Using MySQL Workbench Data Export menu option. Using phpmyadmin, if your application is php based. Exporting data using mysqldump: You can run below command to export data from MySQL. mysqldump –set-gtid-purged=OFF –user=username –host=hostname –protocol=tcp –port=3306 –default-character-set=utf8 –single-transaction=TRUE –routines –events –password -r “\\path\\to\\dump\\file“ -n “dbschemaname“ All items that are in bold will need to be replaced by the actual values. Exporting data using MySQL Workbench Data Export menu option: You will need to download and install MySQL Workbench to export data using this option. Once MySQL Workbench is installed, you can open it and connect to your On-Premise Database and use Server –&gt; Data Export menu option. This should open up a window to select the schemas or tables that you want to export. Choose all the data you need to export and also select the options selected under “Export Options” and “Objects to Export” sections appropriately. Once you click on “Start Export”, this should generate a file specified in the “Export to Self-Contained File” section. Exporting data using phpmyadmin option: You can export data from phpmyadmin application using the Export tab. After selecting the database you want to export, select “Export Method” as “Custom – display all possible options”. Other than the default checked items, you will need to check only “Add Drop Table/View/Procedure/Function/Event/Trigger Statement” checkbox in “Object creation options”. Once you click on Go, it will export data and download a file to your PC. This is your database export file. Once you have exported your data, there are multiple ways to get your data into ClearDB. We will go over these three options: Using MySQL command line utility Using MySQL Workbench Using phpmyadmin, if your application is php based. Before importing data, you will need to create a ClearDB database from azure portal. Information about ClearDB connection can be found on management portal or the new preview portal. On Management Portal: On Preview Portal: All options will need you to modify the file that was created as part of the export. Open the .sql file created and add this line to the start of the file. use ‘databaseschemaname’; databaseschemaname should be the database name that will be created when you create a ClearDB database. You should be able to look it up on management portal under your website dashboard through “view connection strings” link. Importing data using MySQL command line utility: MySQL command line utility “mysql” is normally located in your MySQL installation or under MySQL workbench installation. Run below command with proper username, hostname and the path of the sql file created. Also modify the sql file to add use statement at the start. mysql –u username –p –h hostname &lt; /path/to/sql/file This should prompt you for the password. Your data should be populated in ClearDB on successful login. Importing data using MySQL Workbench: Connect to your ClearDB database using the information provided in Azure management portal. After successful login, open the sql file created during export and execute the file ( after adding use databaseschemaname line). Make sure you select all on the file and then click on execute or place the cursor at the start of the file before clicking on execute. This should import all your data into ClearDB. Importing data using phpmyadmin: Login into your phpmyadmin site and browse to Import tab. Browse to the file created during export and run the import. This should import all your data into ClearDB. This should migrate your data into ClearDB from On-Premise MySQL database.","categories":[{"name":"ClearDB","slug":"ClearDB","permalink":"http://azureossd.github.io/categories/ClearDB/"},{"name":"MySQL","slug":"ClearDB/MySQL","permalink":"http://azureossd.github.io/categories/ClearDB/MySQL/"}],"tags":[{"name":"ClearDB upgrade","slug":"ClearDB-upgrade","permalink":"http://azureossd.github.io/tags/ClearDB-upgrade/"},{"name":"MySQL upgrade","slug":"MySQL-upgrade","permalink":"http://azureossd.github.io/tags/MySQL-upgrade/"},{"name":"database migration","slug":"database-migration","permalink":"http://azureossd.github.io/tags/database-migration/"},{"name":"MySQL migrate","slug":"MySQL-migrate","permalink":"http://azureossd.github.io/tags/MySQL-migrate/"}],"author":"sureddy1"},{"title":" Verify Peer Certificate from PHP cURL for Azure Apps\t\t","slug":"verify-peer-certificate-from-php-curl-for-azure-apps","date":"2015-06-12T20:43:00.000Z","updated":"2019-03-26T20:48:38.561Z","comments":true,"path":"verify-peer-certificate-from-php-curl-for-azure-apps/","link":"","permalink":"http://azureossd.github.io/verify-peer-certificate-from-php-curl-for-azure-apps/","excerpt":"","text":"When you use PHP cURL extension, be aware that CURLOPT_SSL_VERIFYPEER option is set to TRUE by default as of cURL version 7.10 (Azure has cURL 7.40 installed). Common error messages related to SSL_VERIFYPEER option could be: SSL certificate problem, verify that the CA cert is OK SSL certificate problem: unable to get local issuer certificate The error is usually caused by missing or having invalid SSL certificate in cURL option. If you see these messages, consider to validate SSL certificate, and check the path to CA certificate file. CA certificate must be in PEM format, for more detail about CA extract, visit http://curl.haxx.se/docs/caextract.html Do not turn off CURLOPT_SSL_VERIFYPEER unless your cURL connect to non certificate protected server. There are two ways that you can specify certificate info for cURL in PHP environment. 1. Specify CURLOPT_CAINFO in cURL option: (sample code)curl_setopt($ch, CURLOPT_CAINFO, getcwd() . “\\cert\\ca-bundle.crt”); Note: getcwd() . “\\cert\\ca-bundle.crt” returns absolute path of your ca-bundle.crt. Make sure ca-bundle is installed at correct path. 2. Set curl.cainfo path in php.iniSince curl.cainfo is PHP_INI_SYSTEM directive, the value cannot be set in “.user.ini”. You can change the setting with PHP_INI_SCAN_DIR, follow the steps: In the Azure Portal, select your web app and go to “Application Settings”. Go to the App Settings section and add the following key and value and press save. KEY = PHP_INI_SCAN_DIR VALUE = D:\\home\\site\\ini Go to the KUDU site for your web app (https://&lt;sitename&gt;.scm.azurewebsites.net/debugconsole). Go to site directory and press the “+” button and create an “ini” directory. In the ini directory, create an “extensions.ini” file. Press the edit button next to the file. Add the following to the file and save. curl.cainfo=”%ProgramFiles(x86)%\\Git\\usr\\ssl\\certs\\ca-bundle.crt” Refer to this blog for PHP configuration on Azure, https://azure.microsoft.com/en-us/documentation/articles/web-sites-php-configure/ CURLOPT_SSL_VERIFYHOST option is used along with verify peer, default value of this option is 2, to check the existence of a common name and also verify that it matches the hostname provided (more detail at http://php.net/manual/en/function.curl-setopt.php)","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"},{"name":"Uncategorized","slug":"PHP/Uncategorized","permalink":"http://azureossd.github.io/categories/PHP/Uncategorized/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"cainfo","slug":"cainfo","permalink":"http://azureossd.github.io/tags/cainfo/"},{"name":"php curl ssl certificate azure","slug":"php-curl-ssl-certificate-azure","permalink":"http://azureossd.github.io/tags/php-curl-ssl-certificate-azure/"}],"author":"yiwang88"},{"title":" WordPress Scheduled Jobs (wp-cron.php) and Slowness\t\t","slug":"wordpress-scheduled-jobs-wp-cron-php-and-slowness","date":"2015-06-11T20:11:13.000Z","updated":"2019-03-26T21:04:12.589Z","comments":true,"path":"wordpress-scheduled-jobs-wp-cron-php-and-slowness/","link":"","permalink":"http://azureossd.github.io/wordpress-scheduled-jobs-wp-cron-php-and-slowness/","excerpt":"","text":"Overview In Unix/Linux, a cron job is a task that can be configured to run at specific times or intervals. This is no different than a Web Job in Azure. However, in regard to WordPress, crons are invoked from wp-cron.php. For every request, WordPress runs a check to see if it’s time to invoke a cron. This is an unnecessary call and should be avoided. In this article, we will look at the default crons shipped with WordPress and look at ways we can improve our site performance. Default WordPress Jobs By default, WordPress ships with several crons: Cron Name Codex Description wp_version_check Check WordPress version against the newest version. The WordPress version, PHP version, and Locale is sent. Checks against the WordPress server at api.wordpress.org server. Will only check if WordPress isn’t installing. wp_update_plugins Check plugin versions against the latest versions hosted on WordPress.org. The WordPress version, PHP version, and Locale is sent along with a list of all plugins installed. Checks against the WordPress server at api.wordpress.org. Will only check if WordPress isn’t installing. wp_update_themes Check theme versions against the latest versions hosted on WordPress.org. A list of all themes installed in sent to WP. Checks against the WordPress server at api.wordpress.org. Will only check if WordPress isn’t installing. wp_maybe_auto_update|Performs WordPress automatic background updates.||wp_scheduled_delete|Permanently deletes posts, pages, attachments, and comments which have been in the trash for EMPTY_TRASH_DAYS. However, these are not easily visible to the user. Never fear because just like “there’s an app for that”, in WordPress, there’s a Plugin for that! – WP Crontrol (https://wordpress.org/plugins/wp-crontrol/) This plugin can be used to view crons and modify their recurrence. [](/wp-content/uploads/2019/03/8156.5732.crontrol11_342B0ED5.png) WordPress Slowness An important thing to note is the time/date of when the crons are scheduled to run. If you ever happen to see slowness on your site during this time, you probably want to disable the cron event in question. To disable a cron event, click Edit, then clear the “Next run (UTC)” field (reverts to now) and change the “Event Schedule” to non-repeating like so: Remember that these events can always run as needed. Disable All Crons If you would like to disable all crons, you will need to add this line to your wp-config.php. define(‘DISABLE_WP_CRON’, true); Configuring WordPress Crons through Azure Web Jobs After you’ve disabled the crons by following the step in the previous section. Instead of having WordPress check at each and every request whether a job should run, an alternative solution is to create an Azure Web Job. Here’s a snippet that can be saved as a .bat file. Be sure to update the x to match your version of PHP. “D:\\Program Files (x86)\\PHP\\v5.x\\php.exe” D:\\home\\site\\wwwroot\\wp-cron.php cli/auto Once this .bat file is saved, compress as a .zip and upload your Azure Web Job. Since most of the cron events are scheduled every 12 hours, we recommend the same for this scheduled job. Now your WordPress website doesn’t have to worry about if/when the cron will get invoked on every single request.","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"},{"name":"WordPress","slug":"PHP/WordPress","permalink":"http://azureossd.github.io/categories/PHP/WordPress/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"WebJob","slug":"WebJob","permalink":"http://azureossd.github.io/tags/WebJob/"},{"name":"mysql","slug":"mysql","permalink":"http://azureossd.github.io/tags/mysql/"},{"name":"Web Jobs","slug":"Web-Jobs","permalink":"http://azureossd.github.io/tags/Web-Jobs/"},{"name":"wordpress troubleshooting","slug":"wordpress-troubleshooting","permalink":"http://azureossd.github.io/tags/wordpress-troubleshooting/"},{"name":"Azure Web Jobs","slug":"Azure-Web-Jobs","permalink":"http://azureossd.github.io/tags/Azure-Web-Jobs/"},{"name":"Cron Jobs","slug":"Cron-Jobs","permalink":"http://azureossd.github.io/tags/Cron-Jobs/"},{"name":"php wordpress troubleshooting wordpress","slug":"php-wordpress-troubleshooting-wordpress","permalink":"http://azureossd.github.io/tags/php-wordpress-troubleshooting-wordpress/"}],"author":"msangapu"},{"title":" Performance Tuning MySQL Database on Windows VMs\t\t","slug":"performance-tuning-mysql-database-on-windows-vms","date":"2015-06-09T21:27:41.000Z","updated":"2019-03-26T17:30:25.167Z","comments":true,"path":"performance-tuning-mysql-database-on-windows-vms/","link":"","permalink":"http://azureossd.github.io/performance-tuning-mysql-database-on-windows-vms/","excerpt":"","text":"This blog provides best practices for optimizing MySQL database performance in Azure Virtual Machines running Windows. Below are couple of quick steps that can be performed during virtual machine setup: Keep the storage account and Windows VM in the same region. Do not use OS or temporary disks for data or log folders. Stripe multiple data disks to get increased IO throughput (IOPS). Separate data and log file paths to obtain higher IOPS for data and log. Do not use any caching options on the data disks ( cache = none). Below are some of the settings that can be performed on MySQL database itself to get higher performance: skip-name-resolve : This disables DNS host name lookups. The server will use IP addresses only and not match host names to match connecting hosts. This option skims off about 5-10 sec taken to connect to the database immediately, if you are using ip addresses. innodb_buffer_pool_size: The amount of RAM allocated to innodb storage engine to cache data and indexes of tables. This can normally be set to 70-80 % of the RAM, if this VM is dedicated for MySQL. innodb_log_file_size: Size of the log file. The higher the log file size, the lesser checkpoints are done which saves disk I/O. Set this to 256/512 MB depending on the size of your database. There is a hard limit of 4GB on the size of this file. max_connections: Depending on how efficient your code is, you may not need higher connections, but the max limit is 10000. You can adjust this parameter based on your code. innodb_file_per_table: Set this to 1 so that innodb can create individual files for storing each tables data and indexes. If this is set to 0, tables data and indexes are stored in a shared file. This could lead to resource contention. innodb_flush_log_at_trx_commit: Default value is 1. Other options are 0 and 2. Default value of 1 is needed to get ACID compliance up to the second. You can achieve better performance by using 2, but there is a chance that you can lose 1 second of data in case of an OS crash or power outage. innodb_log_buffer_size: This enables innodb to store log information in cache before writing out to disk. In an oltp setting, this should be set to a higher size so that disk I/O is kept low. innodb_io_capacity: This can be set to match the IOPS of your data disks. innodb_thread_concurrency: You can play with this setting to achieve higher concurrency. Above settings can be changed in my.ini file (under mysqld section) that resides under your MySQL Installation. If you installed (MySQL 5.6) with default settings, it will be under %PROGRAMDATA%\\MySQL\\MySQL Server 5.6\\my.ini. Location may change based on the version installed. Another way of changing these settings is through MySQL Workbench ( Administration – Options File). You can run benchmark tests on your VM after tuning these parameters and create baseline tests and further tune the database to see if you are getting better performance. You can also turn on slow_query_log and use long_query_time to log slow queries taking more than the value set ( in seconds). This provides insights into which query is running slower and provides an opportunity to tune the query. Note: All these should be tested on your testing/staging environment before moving them to production.","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://azureossd.github.io/categories/MySQL/"}],"tags":[],"author":"sureddy1"},{"title":" Use Redis Cache Memcache Option on Azure with Drupal 7\t\t","slug":"use-redis-cache-memcache-option-on-azure-with-drupal","date":"2015-06-01T20:58:00.000Z","updated":"2019-03-26T20:38:54.527Z","comments":true,"path":"use-redis-cache-memcache-option-on-azure-with-drupal/","link":"","permalink":"http://azureossd.github.io/use-redis-cache-memcache-option-on-azure-with-drupal/","excerpt":"","text":"Memcache is commonly used with Drupal sites to improve performance. If you find memcache client not supporting “Memcached Cloud” or Memcachier on Azure, here is a workaround (refer to https://azure.microsoft.com/en-us/documentation/articles/web-sites-connect-to-redis-using-memcache-protocol/ ). 1. Setup Redis Cache Service on Azure: 2. Enable Memcache shim from Redis Cache: From Azure management portal, add following app settings in CONFIGURE: Copy REDIS_HOST, REDIS_KEY values from your Redis Cache subscription Set MEMCACHESHIM_REDIS_ENABLE to true Note: Enable NON-SSL port 6379 from Redis Cache if SSL port 6380 is not supported by client library. 3. Install PHP memcache extension (php_memcache.dll) for your website, (download memcache extension for windows from http://pecl.php.net/package/memcache/3.0.8/windows ) To add the PHP extension, copy the downloaded php_memcache.dll to wwwroot/bin/ folder, add PHP EXTENSIONS to “app settings” in Azure management portal. For more detail, refer to https://azure.microsoft.com/en-us/documentation/articles/web-sites-php-configure/ 4. Download and install memcache module on your Drupal site ( https://www.drupal.org/project/memcache ), and add configuration in Settings.php: \\$conf[‘memcache_servers’] = array(‘localhost:’.getenv(“MEMCACHESHIM_PORT”) => ‘default’); \\$conf[‘cache_backends’][] = ‘sites/all/modules/memcache/memcache.inc’; \\$conf[‘cache_default_class’] = ‘MemCacheDrupal’; \\$conf[‘cache_class_cache_form’] = ‘DrupalDatabaseCache’; \\$conf[‘memcache_key_prefix’] = ‘something_unique’; 5. To view cache hits, enable memcache from Drupal admin, and configure memcache statistic to show at bottom of pages, check the hit/miss ratio. View cache usage from Reids Cache account on Azure portal.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"memcache drupal","slug":"memcache-drupal","permalink":"http://azureossd.github.io/tags/memcache-drupal/"}],"author":"yiwang88"},{"title":" Create Nodejs API APP using Swaggerize-express and YO tool\t\t","slug":"create-nodejs-api-app-using-swaggerize-express-and-yo-tool","date":"2015-06-01T17:15:00.000Z","updated":"2019-03-26T06:20:33.663Z","comments":true,"path":"create-nodejs-api-app-using-swaggerize-express-and-yo-tool/","link":"","permalink":"http://azureossd.github.io/create-nodejs-api-app-using-swaggerize-express-and-yo-tool/","excerpt":"","text":"An API app is an App Service web app with additional features that enhance the experience of developing, deploying, publishing, consuming, managing, and monetizing RESTful web APIs. For More information Please refer : https://azure.microsoft.com/en-us/documentation/articles/app-service-api-apps-why-best-platform/ This Blog would provide steps to create a sample Azure API APP in NodeJS using Swaggerize-express Install generator-swaggeize(and yo if you haven’t already) - https://www.npmjs.com/package/swaggerize-express $ npm install -g yo$ npm install -g generator-swaggerize Now run the generator $ yo swaggerize It would ask you set of questions as in below screenshot you can find sample swagger document @ https://raw.githubusercontent.com/prashanthmadi/Azure-nodejs-API-APP/master/config/BumblebeeNodejsAPI.json At the end it would create a api app with required handlers and node_modules as in below screenshot After importing project into phpstorm, you can see that each path defined in swagger definition would get its own file Now Replace content in server.js at Root folder with below ‘use strict’; var port = process.env.PORT || 1337; var baseHost = process.env.WEBSITE_HOSTNAME || ‘localhost’; var http = require(‘http’); var express = require(‘express’); var bodyParser = require(‘body-parser’); var swaggerize = require(‘swaggerize-express’); var path = require(‘path’); var app = express(); var server = http.createServer(app); app.use(bodyParser.json()); app.get(‘/‘, function (req, res) { res.send(‘Hello World!’); }); app.use(swaggerize({ api: path.resolve(‘./config/BumblebeeNodejsAPI.json’), docspath: ‘/swagger’, handlers: path.resolve(‘./handlers’) })); server.listen(port, ‘localhost’, function () { if (baseHost === ‘localhost’) { app.setHost(baseHost + ‘:’ + port); } else { app.setHost(baseHost); } console.log(“Server started ..”); }); I have highlighted changes made in server.js file as red. Create a new file apiapp.json at root folder { “$schema”: “http://json-schema.org/schemas/2014-11-01/apiapp.json#&quot;, “id”: “Bumblebee”, “namespace”: “microsoft.com”, “gateway”: “2015-01-14”, “version”: “1.9.0”, “title”: “Bumblebee”, “summary”: “”, “author”: “”, “endpoints”: { “apiDefinition”: “/swagger”, “status”: null } } Start your nodejs api app in local env by using below command at root folder node server.js check if your api app is up : http://localhost:1337/ -> this url would return a hello world Api Defination file : http://localhost:1337/swagger -> this url would return json file with swagger spec of app. Please find more details on creating and deploying Azure API app at below link https://azure.microsoft.com/en-us/documentation/articles/app-service-api-nodejs-api-app/ After deploying your app, you should be able to see app definition in portal as below Troubleshoot Azure API APP - http://blogs.msdn.com/b/azureossds/archive/2015/06/01/troubleshoot-azure-api-app.aspx","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"http://azureossd.github.io/tags/nodejs/"},{"name":"APIAPP","slug":"APIAPP","permalink":"http://azureossd.github.io/tags/APIAPP/"},{"name":"express","slug":"express","permalink":"http://azureossd.github.io/tags/express/"},{"name":"Swagger","slug":"Swagger","permalink":"http://azureossd.github.io/tags/Swagger/"}],"author":"prashanthmadi@outlook.com"},{"title":" Troubleshoot - Azure Api App\t\t","slug":"troubleshoot-azure-api-app","date":"2015-06-01T15:26:00.000Z","updated":"2019-03-26T20:08:56.131Z","comments":true,"path":"troubleshoot-azure-api-app/","link":"","permalink":"http://azureossd.github.io/troubleshoot-azure-api-app/","excerpt":"","text":"An API app is an App Service web app with additional features that enhance the experience of developing, deploying, publishing, consuming, managing, and monetizing RESTful web APIs. For More information Please refer : https://azure.microsoft.com/en-us/documentation/articles/app-service-api-apps-why-best-platform/ This Blog would provide Troubleshoot techniques in API APP. 1) If you change your API definition file, than you have to manually restart gateway to reflect new API definition changes in portal. Below is a procedure for it Click on resource group in api app, It would open up a new blade Click on your gateway and restart I have added new operation using above procedure as in below image. 2) Use Swagger Editor to check if issue is with API App definition file or Azure API Service.Azure portal doesn’t provide enough info to troubleshoot Api app issue other than below error which has a link for un-related content. Even kudu logs won’t help you with this issue as it’s not an application specific. Error: Cannot get the API definition. it may require additional configuration or authentication on the API app. Sample api-defination url : https://microsoft-apiapp1b423cc9b3f6433692737d88d9d40511.azurewebsites.net/v1/api-docs Swagger editor Link: http://editor.swagger.io/#/ Open swagger editor link in browser and use import url option under file nav. I have provided my api-defination url above, if you wanna play around. If your definition file is not well-formed, you would see errors as in right column of below image.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"APIAPP","slug":"APIAPP","permalink":"http://azureossd.github.io/tags/APIAPP/"},{"name":"Swagger","slug":"Swagger","permalink":"http://azureossd.github.io/tags/Swagger/"}],"author":"prashanthmadi"},{"title":" How to disable php wincache extension from php.ini on Azure\t\t","slug":"how-to-disable-php-wincache-extension-from-php-ini-on-azure","date":"2015-05-18T14:58:00.000Z","updated":"2019-03-26T06:59:45.036Z","comments":true,"path":"how-to-disable-php-wincache-extension-from-php-ini-on-azure/","link":"","permalink":"http://azureossd.github.io/how-to-disable-php-wincache-extension-from-php-ini-on-azure/","excerpt":"","text":"To disable a PHP extension, such as wincache.dll, you will need to modify php.ini, here are the steps how to do it: (Reference https://github.com/projectkudu/kudu/wiki/Xdt-transform-samples#using-a-custom-phpini ) Create “applicationhost.xdt” file at “d:\\home\\site”, Copy the content to applicationhost.xdt (see from the above link) &lt;?xml version=“1.0“?&gt; &lt;configuration xmlns:xdt=“http://schemas.microsoft.com/XML-Document-Transform“&gt; &lt;system.webServer&gt; &lt;fastCgi&gt; &lt;application fullPath=“D:\\Program Files (x86)\\PHP\\v5.x\\php-cgi.exe“ xdt:Locator=“Match(fullPath)“&gt; &lt;environmentVariables&gt; &lt;environmentVariable name=“PHPRC“ xdt:Locator=“Match(name)“ value=“d:\\home\\site\\php.ini“ xdt:Transform=“SetAttributes(value)“ /&gt; &lt;/environmentVariables&gt; &lt;/application&gt; &lt;/fastCgi&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; Find your PHP version from kudu debug console, copy default php.ini to “d:\\home\\site”, location of default php.ini is “D:\\local\\Config\\PHP-5.x.xx” Edit your local “d:\\home\\site\\php.ini”, search for wincache and comment/remove all wincache related directives. Cleanup .user.ini, remove the directives that disable wincache cache options if there is any. Restart the site, check from phpinfo, validate custom PHP runtime Note: Match youe PHP version with “v5.x” and “v5.x.xx”.","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"},{"name":"Uncategorized","slug":"PHP/Uncategorized","permalink":"http://azureossd.github.io/categories/PHP/Uncategorized/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"php.ini wincache azure","slug":"php-ini-wincache-azure","permalink":"http://azureossd.github.io/tags/php-ini-wincache-azure/"}]},{"title":" Logging SQL Server JDBC driver operations for Java application related cloud service\t\t","slug":"logging-sql-server-jdbc-driver-operations-for-java-application-related-cloud-service","date":"2015-05-15T15:51:00.000Z","updated":"2019-03-26T16:53:31.465Z","comments":true,"path":"logging-sql-server-jdbc-driver-operations-for-java-application-related-cloud-service/","link":"","permalink":"http://azureossd.github.io/logging-sql-server-jdbc-driver-operations-for-java-application-related-cloud-service/","excerpt":"","text":"To enable the logging of JDBC driver, please follow these steps - 1. Select your cloud service on Azure portal and open the Instances tab. 2. Select the instance and click on the connect button to initiate the remote desktop session. 3. You can use the existing logging.properties file from default location or you can create a new one and use it for logging. Using the existing default logging.properties file - 1. Once you log in to your virtual machine, open the file explorer and traverse to JRE/lib in your environment. 2. You should find the logging.properties file. Just open it and edit it according to your logging needs. Sample properties file shown below. Using your own logging.properties file - 1. Create a new logging.properties and place in the folder of your choice. Make sure the folder has required permission for access. 2. Add the JVM parameter “-Djava.util.logging.config.file=&lt;drive&gt;:&lt;your folder path&gt;/logging.properties” in your server configuration for launching. After enabling these settings, you should see logs on console or a new log file is getting generated in your specified directory (default directory is your home directory. eg C:\\Users\\&lt;your login name&gt;\\), depending on the handler that you enabled in the properties file. Sample logging.properties file (Log file related settings are highlighted) - \\# The set of handlers to be loaded upon startup. \\# Comma-separated list of class names. **handlers=java.util.logging.FileHandler, java.util.logging.ConsoleHandler** \\# Default global logging level. \\# Loggers and Handlers may override this level **.level=ALL** \\# Loggers \\# ------------------------------------------ \\# Loggers are usually attached to packages. \\# Here, the level for each package is specified. \\# The global level is used by default, so levels \\# specified here simply act as an override. \\# myapp.ui.level=ALL \\# Handlers \\# ----------------------------------------- \\# --- ConsoleHandler --- \\# Override of global logging level **java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter** \\# --- FileHandler --- \\# Override of global logging level **java.util.logging.FileHandler.level=ALL** \\# Naming style for the output file: \\# (The output file is placed in the directory \\# defined by the &quot;user.home&quot; System property.) **java.util.logging.FileHandler.pattern=%h/java%u.log** \\# Limiting size of output file in bytes: **java.util.logging.FileHandler.limit=50000** \\# Number of output files to cycle through, by appending an \\# integer to the base file name: **java.util.logging.FileHandler.count=5** \\# Style of output (Simple or XML): java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter Sample Output - May 14, 2015 3:22:18 PM com.microsoft.sqlserver.jdbc.Util parseUrl FINE: Property:serverName Value:&lt;your Server name&gt; May 14, 2015 3:22:18 PM com.microsoft.sqlserver.jdbc.Util parseUrl FINE: Property:portNumber Value:1433 May 14, 2015 3:22:18 PM com.microsoft.sqlserver.jdbc.Util parseUrl FINE: Property:databaseName Value:&lt;your db name&gt; May 14, 2015 3:22:18 PM com.microsoft.sqlserver.jdbc.Util parseUrl FINE: Property:encrypt Value:true May 14, 2015 3:22:18 PM com.microsoft.sqlserver.jdbc.Util parseUrl FINE: Property:hostNameInCertificate Value:*.net May 14, 2015 3:22:18 PM com.microsoft.sqlserver.jdbc.Util parseUrl FINE: Property:loginTimeout Value:30 May 14, 2015 3:22:18 PM com.microsoft.sqlserver.jdbc.SQLServerConnection &lt;init&gt; FINE: ConnectionID:1 created by (SQLServerDriver:1) May 14, 2015 3:22:18 PM com.microsoft.sqlserver.jdbc.SQLServerConnection login FINE: ConnectionID:1 This attempt server name: &lt;your Server name&gt; port: 1433 InstanceName: null useParallel: false May 14, 2015 3:22:18 PM com.microsoft.sqlserver.jdbc.SQLServerConnection login FINE: ConnectionID:1 This attempt endtime: 1431634968867 May 14, 2015 3:22:18 PM com.microsoft.sqlserver.jdbc.SQLServerConnection login FINE: ConnectionID:1 This attempt No: 0 May 14, 2015 3:22:18 PM com.microsoft.sqlserver.jdbc.SQLServerConnection connectHelper FINE: ConnectionID:1 Connecting with server: &lt;your Server name&gt; port: 1433 Timeout slice: 30000 Timeout Full: 30 May 14, 2015 3:22:19 PM com.microsoft.sqlserver.jdbc.SQLServerConnection Prelogin FINE: ConnectionID:1 ClientConnectionId: e655dbf0-203e-4700-8b46-36a5de29039f Server returned major version:11","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"Cloud","slug":"Cloud","permalink":"http://azureossd.github.io/tags/Cloud/"},{"name":"JDBC","slug":"JDBC","permalink":"http://azureossd.github.io/tags/JDBC/"},{"name":"Log","slug":"Log","permalink":"http://azureossd.github.io/tags/Log/"},{"name":"SQL","slug":"SQL","permalink":"http://azureossd.github.io/tags/SQL/"},{"name":"SQL Server","slug":"SQL-Server","permalink":"http://azureossd.github.io/tags/SQL-Server/"}],"author":"prasadker"},{"title":" Connect to Microsoft Azure Redis Cache from WordPress site\t\t","slug":"connect-to-microsoft-azure-redis-cache-from-wordpress-site","date":"2015-05-14T21:50:00.000Z","updated":"2019-03-26T06:08:51.421Z","comments":true,"path":"connect-to-microsoft-azure-redis-cache-from-wordpress-site/","link":"","permalink":"http://azureossd.github.io/connect-to-microsoft-azure-redis-cache-from-wordpress-site/","excerpt":"","text":"Microsoft Azure Redis Cache is based on the popular open source Redis Cache. It gives users access to a secure, dedicated Redis Cache managed by Microsoft. You can use Microsoft Azure Redis Cache with WordPress site to improve performance. In this article, we cover how to setup Redis cache and connect to it fro WordPress. 1. Create Azure Redis Cache from Azre portal, http://azure.microsoft.com/en-us/services/cache/ 2. Install WordPress “Redis Object Cache” plugin, https://wordpress.org/plugins/redis-cache/ 3. Add following information in wp-config.php 12345define(&apos;WP_REDIS_SCHEME&apos;, &apos;tcp&apos;);define(&apos;WP_REDIS_HOST&apos;, &apos;&lt;your redis account name&gt;.redis.cache.windows.net&apos;);define(&apos;WP_REDIS_PORT&apos;, &apos;6379&apos;);define(&apos;WP_REDIS_DATABASE&apos;, &apos;0&apos;);define(&apos;WP_REDIS_PASSWORD&apos;, &apos;&lt;your primary access key&gt;&apos;); Note: Be sure to put the code above / Thant’s all, stop editing! Happy blogging / comment line (refer to https://wordpress.org/support/topic/enabling-with-predis-and-remote-redis ) Get Redis host name and Access key from Azre portal. If you need non-SSL port, enable it from “Access Ports”. Check from WordPress plugins, confirm that “Redis Object Cache” is connected to Microsoft Azure Redis Cache. There is another way to configure and use Redis Cache on WordPress: 1) Create Azure Redis Cache account 2) Download php_redis.dll from http://windows.php.net/downloads/pecl/releases/redis/2.2.7/. Download nts-vc11-x86.zip for php version being used. For php 5.5: http://windows.php.net/downloads/pecl/releases/redis/2.2.7/php_redis-2.2.7-5.5-nts-vc11-x86.zip For php 5.6: http://windows.php.net/downloads/pecl/releases/redis/2.2.7/php_redis-2.2.7-5.6-nts-vc11-x86.zip For php 5.4: http://windows.php.net/downloads/pecl/releases/redis/2.2.7/php_redis-2.2.7-5.4-nts-vc9-x86.zip 3) Extract php_redis.dll from the zip file. 4) Create D:\\home\\site\\ext folder from ftp/kudu and Copy extracted php_redis.dll to d:\\home\\site\\ext folder 5) Create D:\\home\\site\\ini folder from ftp/kudu and create extensions.ini file. add below lines to the file: ; Enable Extensions extension=d:\\home\\site\\ext\\php_redis.dll 6) Install WP Redis plugin from pantheon from WP dashboard. 7) Add these line above db information (above define(‘DB_NAME’, ‘abcdefg’)) in wp-config.php: \\$redis\\_server = array( &apos;host&apos; =\\&gt; &apos;abcd.redis.cache.windows.net&apos;, &apos;port&apos; =\\&gt; 6379, &apos;auth&apos; =\\&gt; &apos;key&apos;, ); 8) Copy d:/home/site/wwwroot/wp-content/plugins/wp-redis/object-cache.php file to d:/home/site/wwwroot/wp-content folder. 9) Once you enable the plugin from dashboard, and browse around you should see hits/misses on Azure Redis Cache dashboard.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"Redis Cache","slug":"Redis-Cache","permalink":"http://azureossd.github.io/tags/Redis-Cache/"},{"name":"WordPress Azure CDN","slug":"WordPress-Azure-CDN","permalink":"http://azureossd.github.io/tags/WordPress-Azure-CDN/"}],"author":"yiwang88@hotmail.com"},{"title":" Generating Shared access signature(SAS) on Azure Blob using PHP\t\t","slug":"generating-shared-access-signaturesas-on-azure-blob-using-php","date":"2015-05-12T21:33:00.000Z","updated":"2019-03-26T06:51:53.608Z","comments":true,"path":"generating-shared-access-signaturesas-on-azure-blob-using-php/","link":"","permalink":"http://azureossd.github.io/generating-shared-access-signaturesas-on-azure-blob-using-php/","excerpt":"","text":"As of 05/2015, Azure sdk for php doesn’t support shared access signature(SAS) and this Blog would provide a workaround for it. Note : For information on Shared Access Signature visit : http://azure.microsoft.com/en-us/documentation/articles/storage-dotnet-shared-access-signature-part-1/ Below details would be required to create a Shared Access Signature(SAS) for blob with read access - ACCOUNT_NAME - CONTAINER_NAME - BLOB_NAME - END_DATE - YOUR_ACCESS_KEY You can find more information about above params in my another blog http://blogs.msdn.com/b/azureossds/archive/2015/03/30/uploading-files-to-azure-storage-using-sas-shared-access-signature.aspx 1) Use Below function to create a shared access signature for blob in storage. 1234567891011121314151617181920212223function getSASForBlob($accountName,$container, $blob, $resourceType, $permissions, $expiry,$key) &#123; /* Create the signature */ $_arraysign = array(); $_arraysign[] = $permissions; $_arraysign[] = &apos;&apos;; $_arraysign[] = $expiry; $_arraysign[] = &apos;/&apos; . $accountName . &apos;/&apos; . $container . &apos;/&apos; . $blob; $_arraysign[] = &apos;&apos;; $_arraysign[] = &quot;2014-02-14&quot;; //the API version is now required $_arraysign[] = &apos;&apos;; $_arraysign[] = &apos;&apos;; $_arraysign[] = &apos;&apos;; $_arraysign[] = &apos;&apos;; $_arraysign[] = &apos;&apos;; $_str2sign = implode(&quot;\\n&quot;, $_arraysign); return base64_encode( hash_hmac(&apos;sha256&apos;, urldecode(utf8_encode($_str2sign)), base64_decode($key), true) ); &#125; 2) Use Below function to create a signed blob url using shared access signature which was generated from above function 12345678910111213141516171819function getBlobUrl($accountName,$container,$blob,$resourceType,$permissions,$expiry,$_signature) &#123; /* Create the signed query part */ $_parts = array(); $_parts[] = (!empty($expiry))?&apos;se=&apos; . urlencode($expiry):&apos;&apos;; $_parts[] = &apos;sr=&apos; . $resourceType; $_parts[] = (!empty($permissions))?&apos;sp=&apos; . $permissions:&apos;&apos;; $_parts[] = &apos;sig=&apos; . urlencode($_signature); $_parts[] = &apos;sv=2014-02-14&apos;; /* Create the signed blob URL */ $_url = &apos;https://&apos; .$accountName.&apos;.blob.core.windows.net/&apos; . $container . &apos;/&apos; . $blob . &apos;?&apos; . implode(&apos;&amp;&apos;, $_parts); return $_url; &#125; Simple test scenario using above two functions 12$_signature = getSASForBlob(ACCOUNT_NAME,CONTAINER_NAME,BLOB_NAME,&apos;b&apos;,&apos;r&apos;,END_DATE,YOUR_KEY);$_blobUrl = getBlobUrl(ACCOUNT_NAME,CONTAINER_NAME,BLOB_NAME,&apos;b&apos;,&apos;r&apos;,END_DATE,$_signature); Sample Blob url which I generated using above : https://samplemadi.blob.core.windows.net/samplecontainer/sample.txt?se=2016-10-12&amp;sr=b&amp;sp=r&amp;sig=it0j%2BJIfJK%2FZCn65AoGOHaIxMYamFidkPQroPAQMxwY%3D&amp;sv=2014-02-1.php","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"},{"name":"Uncategorized","slug":"PHP/Uncategorized","permalink":"http://azureossd.github.io/categories/PHP/Uncategorized/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"Azure Storage","slug":"Azure-Storage","permalink":"http://azureossd.github.io/tags/Azure-Storage/"},{"name":"SAS","slug":"SAS","permalink":"http://azureossd.github.io/tags/SAS/"}],"author":"prashanthmadi"},{"title":" Setting up Session Affinity/Sticky Sessions using Azure Java SDK for cloud service\t\t","slug":"setting-up-session-affinitysticky-sessions-using-azure-java-sdk-for-cloud-service","date":"2015-05-12T19:26:00.000Z","updated":"2019-03-26T19:43:21.637Z","comments":true,"path":"setting-up-session-affinitysticky-sessions-using-azure-java-sdk-for-cloud-service/","link":"","permalink":"http://azureossd.github.io/setting-up-session-affinitysticky-sessions-using-azure-java-sdk-for-cloud-service/","excerpt":"","text":"To setup the Session Affinity for your cloud service using Azure Java SDK, follow these steps - 1. Open eclipse and browse to your project. 2. Traverse to the WorkerRole in your project and click on Properties. 3. Check the enable http session affinity check box. 4. Open ServiceDefinition.csdef file for your project in Text Editor and you should see text as - 5. Install Web Platform Installer on your eclipse machine. 6. Copy following WebpiCmd files to your Azure .Net SDK plugin’s folder (Default directory is: C:\\Program Files\\Microsoft SDKs\\Azure\\.NET SDK\\v2.5\\bin\\plugins\\WebDeploy). It is possible that you have multiple versions of SDK present in your system, make sure you replace it in latest version. WebpiCmd files are located in the WebPI install directory (default directory is ‘C:\\Program Files\\Microsoft\\Web Platform Installer’). WebpiCmd-x64.exe WebpiCmd-x64.exe.config Microsoft.Web.PlatformInstaller.dll Microsoft.Web.PlatformInstaller.UI.dll 7. Browse to your eclipse cloud service deployment project from windows explorer. You should see a folder “ROLE/approot/.arrconfig”. ROLE can be WorkerRole1 or WebRole1 or a custom name you have given to your web/worker role. 8. In the .arrconfig folder, edit ConfigureARR.bat file and comment/delete the original line and add the new line for installing ARR 3.0: Original Line: %ROLEROOT%\\plugins\\WebDeploy\\WebpiCmd.exe/Install /accepteula /Products:ARR New: %ROLEROOT%\\plugins\\WebDeploy\\WebpiCmd-x64.exe/Install /accepteula /Products:ARRv3_0 9. Save the ConfigureARR.bat file and deploy the package with overwrite selected and you should see that ARR 3.0 is now successfully installed and configured.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"Affinity","slug":"Affinity","permalink":"http://azureossd.github.io/tags/Affinity/"},{"name":"ARR","slug":"ARR","permalink":"http://azureossd.github.io/tags/ARR/"},{"name":"SDK","slug":"SDK","permalink":"http://azureossd.github.io/tags/SDK/"},{"name":"Session","slug":"Session","permalink":"http://azureossd.github.io/tags/Session/"},{"name":"SSL Offloading","slug":"SSL-Offloading","permalink":"http://azureossd.github.io/tags/SSL-Offloading/"},{"name":"Sticky","slug":"Sticky","permalink":"http://azureossd.github.io/tags/Sticky/"}],"author":"prasadker"},{"title":" Running Java8 on Azure web apps\t\t","slug":"running-java8-on-azure-web-apps","date":"2015-05-08T16:27:00.000Z","updated":"2019-03-26T17:58:13.278Z","comments":true,"path":"running-java8-on-azure-web-apps/","link":"","permalink":"http://azureossd.github.io/running-java8-on-azure-web-apps/","excerpt":"","text":"Switching to Java 8 version has got easier in new Azure Portal. Below are list of instructions 1) Navigate to https://ms.portal.azure.com/ 2) Select your Java Web app and Click on settings 3) Click on Application Settings in Settings bar 4) You should see drop-down’s to select different java version and web container. ------------------------------------------------ Below content is deprecated in favor of New Azure Portal ——————————————————- Note : Please refer http://azure.microsoft.com/en-us/documentation/articles/web-sites-java-custom-upload/ for changing java version in application server. Java 1.8 binaries are pre-installed in Azure Web apps and Below are steps to activate it 1) Go to configure tab in your webapp 2) Add following content in app settings Key : JAVA_HOME Value : D:\\Program Files\\Java\\jdk1.8.0_25 3) Navigate to your website kudu console - https://yourWebsiteName.scm.azurewebsites.net/Env and check if you have below content JAVA_HOME = D:\\Program Files\\Java\\jdk1.8.0_25 4) Set java bin path in debug console set PATH=%PATH%;%JAVA_HOME%/bin 5) Check if changes are reflected Java –version Note : Please refer http://azure.microsoft.com/en-us/documentation/articles/web-sites-java-custom-upload/ for changing java version in application server. Troubleshoot : 1) You can skip setting PATH variable from step 4 above and run java directly using below command D:\\home&gt;&quot;%JAVA_HOME%&quot;\\bin\\java -version 2) If you would like to make this change at application server level, please use below config file for tomcat. You can find more details @ https://azure.microsoft.com/en-us/documentation/articles/web-sites-java-custom-upload/ &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;handlers&gt; &lt;add name=&quot;httpPlatformHandler&quot; path=&quot;*&quot; verb=&quot;*&quot; modules=&quot;httpPlatformHandler&quot; resourceType=&quot;Unspecified&quot; /&gt; &lt;/handlers&gt; &lt;httpPlatform processPath=&quot;%HOME%sitewwwrootbintomcatbinstartup.bat&quot; arguments=&quot;&quot;&gt; &lt;environmentVariables&gt; &lt;environmentVariable name=&quot;CATALINA_OPTS&quot; value=&quot;-Dport.http=%HTTP_PLATFORM_PORT%&quot; /&gt; &lt;environmentVariable name=&quot;CATALINA_HOME&quot; value=&quot;%HOME%sitewwwrootbintomcat&quot; /&gt; &lt;environmentVariable name=&quot;JRE_HOME&quot; value=&quot;%JAVA_HOME%&quot; /&gt; &lt;environmentVariable name=&quot;JAVA_OPTS&quot; value=&quot;-Djava.net.preferIPv4Stack=true&quot; /&gt; &lt;/environmentVariables&gt; &lt;/httpPlatform&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; As suggested by PERTU in comments try using JAVA_HOME1 if azure overrides value set in user interface","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"}],"author":"prashanthmadi"},{"title":" Troubleshooting MySQL Database on ClearDB\t\t","slug":"troubleshooting-mysql-database-on-cleardb","date":"2015-05-07T21:27:44.000Z","updated":"2019-03-26T20:15:43.203Z","comments":true,"path":"troubleshooting-mysql-database-on-cleardb/","link":"","permalink":"http://azureossd.github.io/troubleshooting-mysql-database-on-cleardb/","excerpt":"","text":"This article covers some common scenarios customers may run into using ClearDB with Microsoft Azure. For reference, here is a link to the ClearDB FAQ: https://www.cleardb.com/developers/help/faq As listed on the ClearDB FAQ, there are some general guidelines for using ClearDB. These guidelines include limitations on: Maximum Database Connections Maximum Database Size Maximum SELECT Query Execution Time * Maximum amounts vary depending on your subscription plan. Error Message Error establishing a database connection (displayed on web site) PHP Warning: mysqli_real_connect(): (HY000/1226): User ‘abcdefghijk79’ has exceeded the ‘max_user_connections’ resource (current value: 4) in D:\\home\\site\\wwwroot\\wp-includes\\wp-db.php on line 1454 (displayed in php_errors.log or WordPress debug.log) Source Web site, php_errors.log or debug.log Solution If you see this error in your debug.log or php_errors.log, then your application is exceeding the number of connections. If you’re hosting on ClearDB, please verify that number of connections available in your service plan. Error Message The management site for the database isn’t available right now. Please try again later. Source Microsoft Azure Dashboard &gt; Linked Resources &gt; Database Name Example Solution The link between Azure and ClearDB may have been broken or was never linked to begin with. Email support@cleardb.com and provide the Subscription ID located within the Azure Dashboard (lower-right corner). Error Message Operation failed: There was an error while applying the SQL script to the database. ERROR 1142: 1142: UPDATE command denied to user ‘name@ip’ for table ‘table_name’. Source MySQL Client/ DB Server Response in Application Code Example Solution There are multiple reasons this may occur, but a common one is due to the subscription quota being exceeded. See the question below “How do I check the current size of my MySQL Database on ClearDB?” If you have in-fact gone over your limit, please upgrade or read tips below on how to reduce your disk usage. Error Message Error Code: 1142. INSERT command denied to user ‘name@ip’ for table ‘table_name’. Source MySQL Client/ DB Server Response in Application Code Example Solution This may also point to the subscription quota being exceeded. Read below on how to check your current size on the MySQL database. If you have in-fact gone over your limit, please upgrade or read tips below on how to reduce your disk usage. How do I check the current size of my MySQL database on ClearDB? There are multiple options to check your current size. One solution is through the Azure Portal and the other is to run a query on your database instance: 1) Using Azure Portal 2) Using a MySQL Client, run a query on your ClearDB Database SELECT table_schema &quot;Data Base Name&quot;, sum( data\\_length + index\\_length ) / 1024 / 1024 &quot;Data Base Size in MB&quot; FROM information_schema.TABLES GROUP BY table_schema; My ClearDB MySQL Database quota is exceeded, now what? The simplest solution is to upgrade to the recommended subscription on ClearDB, especially if you’re on the Mercury Tier. If you are still developing your app and want to remain on the free, Mercury Tier, then you will need to get rid of extra data. Use the following query to find which tables are taking up space: SELECT table_name AS &quot;Table&quot;, round(((data\\_length + index\\_length) / 1024 / 1024), 2) MB FROM information_schema.TABLES WHERE table_schema = &quot;**&lt;SCHEMA/DATABASE NAME HERE&gt;&quot;** ORDER BY MB desc; Where do I find my MySQL connection details? Through the Azure Dashboard, click on “View Connection Strings” This will pop-up a window with the following connection information: Database (AKA Schema) Data Source (Host Name) UserID Password How do I connect to my MySQL Database on ClearDB? 1) Use a MySQL Client. 2) Use the PHP My Admin site extension Step 1. Go to your website with the following URL format: http://&lt;sitename&gt;.scm.azurewebsites.net Step 2. Click “Site Extension” Step 3. Select “Gallery” Step 4. Find phpMyAdmin and click the plus button. Once installed, launch the extension by clicking the play button.","categories":[{"name":"ClearDB","slug":"ClearDB","permalink":"http://azureossd.github.io/categories/ClearDB/"}],"tags":[{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"ClearDB Troubleshooting","slug":"ClearDB-Troubleshooting","permalink":"http://azureossd.github.io/tags/ClearDB-Troubleshooting/"},{"name":"cleardb","slug":"cleardb","permalink":"http://azureossd.github.io/tags/cleardb/"},{"name":"mysql","slug":"mysql","permalink":"http://azureossd.github.io/tags/mysql/"},{"name":"wordpress troubleshooting","slug":"wordpress-troubleshooting","permalink":"http://azureossd.github.io/tags/wordpress-troubleshooting/"}],"author":"msangapu"},{"title":" Magento Web.Config for Azure and IIS\t\t","slug":"magento-web-config-for-azure-and-iis","date":"2015-05-01T16:12:00.000Z","updated":"2019-03-26T17:03:00.014Z","comments":true,"path":"magento-web-config-for-azure-and-iis/","link":"","permalink":"http://azureossd.github.io/magento-web-config-for-azure-and-iis/","excerpt":"","text":"After installing Magento on Azure, here is the web.config file that should be within the wwwroot folder. &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;!--## rewrite API2 calls to api.php (by now it is REST only)--&gt; &lt;rule name=&quot;Rewrite API2 calls to api.php&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^api/rest&quot; ignoreCase=&quot;false&quot; /&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;api.php?type=rest&quot; appendQueryString=&quot;true&quot; /&gt; &lt;/rule&gt; &lt;!--## HTTP_AUTHORIZATION variable removed—&gt; &lt;rule name=&quot;TRACE and TRACK HTTP methods&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;.*&quot; ignoreCase=&quot;false&quot; /&gt; &lt;conditions&gt; &lt;!--## TRACE and TRACK HTTP methods disabled to prevent XSS attacks--&gt; &lt;add input=&quot;{REQUEST_METHOD}&quot; pattern=&quot;^TRAC\\[EK\\]&quot; ignoreCase=&quot;false&quot; /&gt; &lt;/conditions&gt; &lt;action type=&quot;Redirect&quot; redirectType=&quot;Temporary&quot; url=&quot;{R:0}&quot; /&gt; &lt;/rule&gt; &lt;!--## rewrite everything else to index.php--&gt; &lt;rule name=&quot;Rewrite everything to index.php&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;.*&quot; ignoreCase=&quot;false&quot; /&gt; &lt;conditions&gt; &lt;add input=&quot;{URL}&quot; pattern=&quot;^/(media|skin|js)/&quot; ignoreCase=&quot;false&quot; negate=&quot;true&quot; /&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsFile&quot; ignoreCase=&quot;false&quot; negate=&quot;true&quot; /&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsDirectory&quot; ignoreCase=&quot;false&quot; negate=&quot;true&quot; /&gt; &lt;!\\-\\- Symbolic link filetype does not exists in Windows/IIS --&gt; &lt;/conditions&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;index.php&quot; /&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; There are multiple ways to upload the web.config file to the wwwroot folder. Here is an example using Microsoft WebMatrix: 1) Launch WebMatrix and connect to your Magento site 2) Your file structure will look something like this If web.config already exists, you may not need to complete these steps. If you are certain that you want to overwrite this file. As a general rule of thumb, make a backup of existing web.config file. 3) Add a new file and name it web.config 4) Copy-paste the web.config text from above 5) Test the site by clicking ‘Run’ If your page loads, then we know that our web.config has been installed without errors.","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"azure app service web app","slug":"azure-app-service-web-app","permalink":"http://azureossd.github.io/tags/azure-app-service-web-app/"},{"name":"web.config","slug":"web-config","permalink":"http://azureossd.github.io/tags/web-config/"},{"name":".htaccess","slug":"htaccess","permalink":"http://azureossd.github.io/tags/htaccess/"},{"name":"iis","slug":"iis","permalink":"http://azureossd.github.io/tags/iis/"},{"name":"Magento","slug":"Magento","permalink":"http://azureossd.github.io/tags/Magento/"}]},{"title":" Executing Java Web Jobs on Azure\t\t","slug":"executing-java-web-jobs-on-azure","date":"2015-04-28T21:48:00.000Z","updated":"2019-03-26T06:46:37.804Z","comments":true,"path":"executing-java-web-jobs-on-azure/","link":"","permalink":"http://azureossd.github.io/executing-java-web-jobs-on-azure/","excerpt":"","text":"To execute the Java web jobs on Azure, follow the below steps : 1. Open Eclipse and create a Java Project and Java program for your application in your eclipse workspace. 2. After creating your application, create a batch file with following text - set PATH=%PATH%;%JAVA\\_HOME%/bin java &lt;Your Main Class name&gt; 3. Bundle the batch file and your class files in a compressed zip file. 4. Create a Web App on Azure portal and upload your zip file to Azure using the steps mentioned at - http://azure.microsoft.com/en-us/documentation/articles/web-sites-create-web-jobs/ You can set the desired execution frequency for the web job as mentioned in the above blog.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://azureossd.github.io/tags/Java/"},{"name":"java configuration","slug":"java-configuration","permalink":"http://azureossd.github.io/tags/java-configuration/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"WebJob","slug":"WebJob","permalink":"http://azureossd.github.io/tags/WebJob/"}],"author":"prasadker"},{"title":" Use Azure CDN for WordPress site on Azure App\t\t","slug":"improving-wordpress-performance-use-azure-cdn","date":"2015-04-27T20:15:00.000Z","updated":"2019-03-26T07:09:48.813Z","comments":true,"path":"improving-wordpress-performance-use-azure-cdn/","link":"","permalink":"http://azureossd.github.io/improving-wordpress-performance-use-azure-cdn/","excerpt":"","text":"You can use CDN to store static contents such as images, audios, and files. Speed of fetching from CDN is much faster than access these contents locally. Azure CDN could help to improve performance of your WordPress site running on Azure cloud. In this blog, we will cover how to integrate Azure CDN in WP Super Cache and CDN Enabler. 1. Create CDN profile: From NEW, search for CDN 2. Create CDN Endpoint: From the CDN profile, click “+Endpoint” to add an endpoint, choose the web site for Origin hostname, e.g. Once the Endpoint is created, you see the \\&lt;cdn-endpoint-name>.azureedge.net running, e.g. If you have WP Super Cache plugin installed on your WordPress site, you can use WP Super Cache to integrate with Azure CDN: Edit from WP Super Cache “Settings”, select “CDN” tab, put the URL of Azure CDN endpoint in “Off site URL”, save the change. Check from developer tool, you should see js/css/images loaded from CDN endpoint, for example: 4. CDN Enabler is another good tool, while you install and activate this plugin, put your CDN endpoint in CDN URL, save it, Use developer tool in your browser to validate that CDN is working. 5. Removing CDN - You can disconnect Azure CDN from WordPress easily by removing the link from your plugin when the CDN is not needed. Delete the CDN endpoint from your Azure portal after you disconnect it from WordPress.","categories":[{"name":"WordPress","slug":"WordPress","permalink":"http://azureossd.github.io/categories/WordPress/"}],"tags":[{"name":"WordPress Azure CDN","slug":"WordPress-Azure-CDN","permalink":"http://azureossd.github.io/tags/WordPress-Azure-CDN/"}],"author":"yiwang88"},{"title":" Converting Apache .htaccess rules to IIS web.config using IIS Manager for Azure Websites\t\t","slug":"converting-apache-htaccess-rules-to-iis-web-config-using-iis-manager-for-azure-websites","date":"2015-04-23T16:36:32.000Z","updated":"2019-03-26T06:15:04.887Z","comments":true,"path":"converting-apache-htaccess-rules-to-iis-web-config-using-iis-manager-for-azure-websites/","link":"","permalink":"http://azureossd.github.io/converting-apache-htaccess-rules-to-iis-web-config-using-iis-manager-for-azure-websites/","excerpt":"","text":"Web.config - the settings and configuration file for a Windows IIS Web Application..htaccess - the default filename of the directory-level configuration file for a Linux Apache Web Application. Disclaimer: The URL Rewrite tool by IIS Manager gives you suggested web.config rules. Since it is not a one-to-one conversion, the recommendation is to test these rules in a development environment. If you’re looking to create rewrite rules for the URL Rewrite Module,please see the article here These screenshots were taken from IIS Manager 8.6.9600 and assume you have URL Rewrite Installed. To convert .htaccess rules to web.config, launch IIS Manager. Step 1. In the connections pane, select your site %20Manager.png) Step 2. Double-click on URL Rewrite %20Manager.png) Step 3. On the right, select “Import Rules” %20Manager.png) Step 4. Copy-paste your .htaccess file or select it under “Configuration file” %20Manager.png) Step 5. Click the “Xml view” to view in the web.config format %20Manager.png) Now that you have the rules in web.config format, validate and verify the rules on a development server.","categories":[{"name":"Azure App Service Web App","slug":"Azure-App-Service-Web-App","permalink":"http://azureossd.github.io/categories/Azure-App-Service-Web-App/"}],"tags":[{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"web.config","slug":"web-config","permalink":"http://azureossd.github.io/tags/web-config/"},{"name":".htaccess","slug":"htaccess","permalink":"http://azureossd.github.io/tags/htaccess/"},{"name":"iis","slug":"iis","permalink":"http://azureossd.github.io/tags/iis/"}],"author":"msangapu@outlook.com"},{"title":" Magento Indexing and Root Category on Microsoft Azure\t\t","slug":"magento-indexing-and-root-category-on-microsoft-azure","date":"2015-04-16T15:48:28.000Z","updated":"2019-03-26T17:00:36.182Z","comments":true,"path":"magento-indexing-and-root-category-on-microsoft-azure/","link":"","permalink":"http://azureossd.github.io/magento-indexing-and-root-category-on-microsoft-azure/","excerpt":"","text":"Overview If you recently installed Magento through the Azure Portal and found that reindexing is not working properly, you will want to ensure that the Root Category is selected. If the root category is not set, you will encounter this message when trying to reindex: “There was a problem with reindexing process.” which can often result in the exception shown below. 2015-04-16T13:31:17+00:00 DEBUG (7): Exception message: SQLSTATE[42000]: Syntax error or access violation: 1103 Incorrect table name ” Trace: #0 D:homesitewwwrootlibVarienDbStatementPdoMysql.php(110): Zend_Db_Statement_Pdo-&gt;_execute(Array) #1 D:homesitewwwrootappcodecoreZendDbStatement.php(291): Varien_Db_Statement_Pdo_Mysql-&gt;_execute(Array) #2 D:homesitewwwrootlibZendDbAdapterAbstract.php(480): Zend_Db_Statement-&gt;execute(Array) #3 D:homesitewwwrootlibZendDbAdapterPdoAbstract.php(238): Zend_Db_Adapter_Abstract-&gt;query(‘DELETE FROM “’, Array) #4 D:homesitewwwrootlibVarienDbAdapterPdoMysql.php(428): Zend_Db_Adapter_Pdo_Abstract-&gt;query(‘DELETE FROM “’, Array) #5 D:homesitewwwrootlibZendDbAdapterAbstract.php(664): Varien_Db_Adapter_Pdo_Mysql-&gt;query(‘DELETE FROM “’) #6 D:homesitewwwrootappcodecoreMageCatalogModelResourceCategoryIndexerProduct.php(941): Zend_Db_Adapter_Abstract-&gt;delete(NULL) #7 D:homesitewwwrootappcodecoreMageIndexModelIndexerAbstract.php(143): Mage_Catalog_Model_Resource_Category_Indexer_Product-&gt;reindexAll() #8 D:homesitewwwrootappcodecoreMageIndexModelProcess.php(210): Mage_Index_Model_Indexer_Abstract-&gt;reindexAll() #9 D:homesitewwwrootappcodecoreMageIndexModelProcess.php(258): Mage_Index_Model_Process-&gt;reindexAll() #10 D:homesitewwwrootappcodecoreMageIndexcontrollersAdminhtmlProcessController.php(127): Mage_Index_Model_Process-&gt;reindexEverything() #11 D:homesitewwwrootappcodecoreMageCoreControllerVarienAction.php(418): Mage_Index_Adminhtml_ProcessController-&gt;reindexProcessAction() #12 D:homesitewwwrootappcodecoreMageCoreControllerVarienRouterStandard.php(250): Mage_Core_Controller_Varien_Action-&gt;dispatch(‘reindexProcess’) #13 D:homesitewwwrootappcodecoreMageCoreControllerVarienFront.php(172): Mage_Core_Controller_Varien_Router_Standard-&gt;match(Object(Mage_Core_Controller_Request_Http)) #14 D:homesitewwwrootappcodecoreMageCoreModelApp.php(354): Mage_Core_Controller_Varien_Front-&gt;dispatch() #15 D:homesitewwwrootappMage.php(684): Mage_Core_Model_App-&gt;run(Array) #16 D:homesitewwwrootindex.php(87): Mage::run(”, ‘store’) #17 {main} To solve this issue, make sure your Root Category is selected. To select your Root Category, follow these steps: Step 1. In the System Menu, select Configuration Step 2. Click on “Manage Stores” You can find it at the top-left, under “Current Configuration Scope”. Step 3. Select Main Website Store Step 4. Set the Root Category Select the drop-down for “Root Category” and select “Default Category” Step 5. Save the store Click “Save Store” at the top-right corner Step 6. Verify indexing works! Select System –&gt;Index Management Step 7. Select Indexes Select “Catalog URL Rewrites” and “Category Products” Step 8. Reindex Data At this point, your index management should be successful without errors. Here’s a feedback page for Azure. Please let us know how we can improve Azure! Technorati Tags: There was a problem with reindexing process,syntax error or access violation,Incorrect table name,magento,Azure","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"Magento","slug":"Magento","permalink":"http://azureossd.github.io/tags/Magento/"},{"name":"indexing","slug":"indexing","permalink":"http://azureossd.github.io/tags/indexing/"},{"name":"magento root category","slug":"magento-root-category","permalink":"http://azureossd.github.io/tags/magento-root-category/"}],"author":"msangapu"},{"title":" PHP Error Log on Azure Website\t\t","slug":"info-about-php-fatal-error-and-error-log-on-azure-website","date":"2015-04-15T14:54:00.000Z","updated":"2019-03-26T16:25:26.950Z","comments":true,"path":"info-about-php-fatal-error-and-error-log-on-azure-website/","link":"","permalink":"http://azureossd.github.io/info-about-php-fatal-error-and-error-log-on-azure-website/","excerpt":"","text":"1. E_ERROR - Fatal run-time errors. These are the errors that can not be recovered, execution of the script is halted (http://php.net/manual/en/errorfunc.constants.php) 2. When fatal errors happen, you could see http 500 internal server error or a blank page on your browser PHP error log is an important log file for troubleshooting. if you use default php runtime environment on Azure website, this log file is default to “php_errors.log”, in LogFiles directory, it is predefined in pnp.ini, you can see it in phpinfo page, eg. 4. Broadly used directives for error display and error logging include: error_reporting - set the error reporting level, see predefined constants for values (http://php.net/manual/en/errorfunc.constants.php) display_errors - determines if errors should be displayed to screen, it takes string value “On” or “Off” display_startup_errors - Errors that occur during PHP startup are not displayed even display_errors is turned on. This could happen when there are parse errors. You need to turn on display_startup_errors for these cases. This option is recommended for debugging only. log_errors - determines whether script error messages should be logged to server’s error log error_log - It defines the path where script errors should be logged. Refer to http://php.net/manual/en/errorfunc.configuration.php for more detail. 5. How to enable error log Most errors and logging options can be set in user script using ini_set() or user level ini file. When you see log_errors is Off from phpinfo, you can turn it on in D:\\home\\site\\wwwroot\\.user.ini, eg. log_errors=On\\ Manage error log file By default, PHP log all types of errors (E_ALL, integer value 32767). With current implementation on Azure, php_errors.log is not managed by system, you need to maintain it to proper size. You can reduce the volume of log message by changing error log level. In production environment, it is reasonable to stop logging E_NOTICE, E_STRICT, E_DEPRECATED, to exclude these errors, reset the value of error_reporting in D:\\home\\site\\wwwroot\\.user.ini, eg. error_reporting = E_ALL &amp; ~E_NOTICE &amp; ~E_STRICT &amp; ~E_DEPRECATED Check phpinfo to confirm the change:","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"PHP troubleshooting","slug":"PHP-troubleshooting","permalink":"http://azureossd.github.io/tags/PHP-troubleshooting/"},{"name":"php error log azure webapps","slug":"php-error-log-azure-webapps","permalink":"http://azureossd.github.io/tags/php-error-log-azure-webapps/"}],"author":"yiwang88"},{"title":" Magento Cron Jobs to Azure Web Jobs\t\t","slug":"magento-cron-jobs-on-azure","date":"2015-04-13T19:23:00.000Z","updated":"2019-03-26T16:57:40.753Z","comments":true,"path":"magento-cron-jobs-on-azure/","link":"","permalink":"http://azureossd.github.io/magento-cron-jobs-on-azure/","excerpt":"","text":"Magento Cron Jobs Crons are essential to Magento as they perform maintenance tasks and essential duties to keep your E-commerce store running. If you’re coming from a Linux environment, you’re probably used to Magento’s crons working out-of-the-box. Due to Azure’s enhanced, scheduling system, Magento from Azure Gallery requires Azure Web Jobs to initiate the crons. This article will show you just that – get your crons up and running in no time! Overview We’re going to create a windows batch file, compress into zip format and then upload it to the Azure Web Jobs. Once there, you can configure the schedule interval for crons. Magento recommends a 5-minute interval. Let’s get started! Step 1. Create a new file in a text editor Step 2. Create the batch script to initiate Magento’s main cron Copy/paste this into your text file. Change the PHP version accordingly: “D:\\Program Files (x86)\\PHP\\v5.4\\php.exe” D:\\home\\site\\wwwroot\\cron.php cli/auto Step 3. Save the script Save the file with the extension of .bat (batch file) Step 4. Compress the script into a zip file Now compress the file into a compressed zip format Now that the .zip file is created, we will setup a Web Job within Azure Step 5. Select your Magento Instance on the Azure Portal and click on WebJobs Step 6). Click the ADD button located at the bottom Step 7. Configure the New Job and upload the zip file created from step 4 8) Define a schedule That’s it, you’re finished! After completing these steps, your Magento Crons will be running per the set schedule. If you’re expecting emails from Magento, be sure that you’ve setup your SMTP server. One option is to use a 3rd-party tool like Windows Live or SendGrid. If you would like to provide feedback on Azure, please do so here.","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"Magento","slug":"Magento","permalink":"http://azureossd.github.io/tags/Magento/"},{"name":"Web Jobs","slug":"Web-Jobs","permalink":"http://azureossd.github.io/tags/Web-Jobs/"}],"author":"msangapu"},{"title":" LAMP Migration to Web Apps (Previously known as Websites)\t\t","slug":"lamp-migration-to-web-apps-previously-known-as-websites","date":"2015-04-07T21:29:00.000Z","updated":"2019-03-26T16:45:09.097Z","comments":true,"path":"lamp-migration-to-web-apps-previously-known-as-websites/","link":"","permalink":"http://azureossd.github.io/lamp-migration-to-web-apps-previously-known-as-websites/","excerpt":"","text":"NOTE: Please take a full backup of your code and database before performing any changes to your site. This document talks about steps involved in migrating LAMP/WAMP stack from on premise to Azure using Web Apps and a MySQL Database hosted by ClearDB or on an IaaS VM. There are different steps involved in moving an on premise LAMP/WAMP stack to the Azure platform. Those can be divided into the following: 1) Data Migration 2) Content Migration 3) Change Settings Data Migration: There are two options for MySQL databases on Azure platforms. You can use either a MySQL instance provided by ClearDB (SaaS) or host your own MySQL database (IaaS VM). The first step in data migration involves exporting your current database. This can be done using the mysqldump (available in your mysql server installation bin folder) executable or through the MySQL Workbench tool. Here is a sample of the mysqldump command through the command line. mysqldump --user=username --password --host=hostname --protocol=tcp --port=3306 --add-drop-table –create-options --default-character=utf8 --single-transaction=TRUE --routines --events &quot;SCHEMANAME&quot; &gt; /path/to/myschemadump.sql The above command will dump a Single Self-Contained sql file called “myschemadump.sql” in the path you specified. Based on which offering (SaaS or IaaS) you are using, you have to do the following: 1) SaaS (Software as a Service) is provided through ClearDB. They have different offerings which can be seen here: https://www.cleardb.com/store/azure. Steps for creating a ClearDB MySQL database are listed here: http://azure.microsoft.com/en-us/documentation/articles/store-php-create-mysql-database/ a. Once a ClearDB MySQL database is created, you can view the connection info which will have this information: Database ( Schema Name) Data Source (Server Host Name) User Id ( User Id to use for connecting to MySQL) Password (Password to use for connecting to MySQL) b. You can connect to the database using MySQL Workbench and import data into your database. You can use the Single Self-Contained sql file created above to import the data into this new database. c. Before importing, you will need to change the schema name to the appropriate database name created with ClearDB. i. For example: if the export included the create database option, then the first two lines of the sql file will be like this: Comment out the first line and keep the second line. In the second line, ‘schemaname’ should be replaced with the ClearDB schema name. d. Run all the sql statements at one go. This will create all tables/views etc from your on premise database. e. When using a ClearDB MySQL database, there is only one database user id that is permitted to connect, so you will need to change your application to use this userid. f. Code references for database connections should be updated to point to this ClearDB instance. 2) IaaS (Infrastructure as a Service): You can create your own VM (Linux) and install a MySQL database server on it. Please follow this article to create your own VM and open connectivity to the database from a remote host: http://azure.microsoft.com/blog/2014/09/02/create-your-own-dedicated-mysql-server-for-your-azure-websites/. The article describes how to create a MySQL server on an Ubuntu server. You can use your own flavor or Linux and install MySQL. a. Once your VM is created and a MySQL server is installed/configured and opened for remote access, you can connect to it through MySQL Workbench. b. After connecting, you can directly import data using the data import tool. This will create the schema along with the data that was exported from your on premise database. c. You will need to create users that were present on your on premise database separately. The data import tool will not create them. d. Code references for database connections should be updated to point to this VM. Content Migration: Before you migrate your content, you will need to find out the version of PHP you will be using with the Web Apps. You can quick create a website using the Azure Portal and after creation set the PHP version which matches your code. After creating the website, you can deploy your code from source control tools like GitHub, Dropbox, Bitbucket, Codeplex or Visual Studio Online. If you don’t use these, you can also FTP your code. Different deployment choices are listed here: http://azure.microsoft.com/en-us/documentation/articles/web-sites-deploy/ If you are FTPing your code to a website, you can use this article: http://blogs.msdn.com/b/waws/archive/2014/02/20/how-to-ftp-into-a-waws-site.aspx and upload your website code under site/wwwroot. This is the root directory for Web Apps. You can change any references to the old on premise website/database and point to the new website address and database address. Settings Migration: Any settings pertaining to SSL certificates, database connections, file system references etc. will need to be changed accordingly. These can be on file system or database or a combination of both. Example: We will look into migrating an on premise wordpress install to Azure using Web Apps and a ClearDB database. WordPress Migration Export data from on premise database: Check all the options selected above and click Start Export. This will create a Single Self-Contained sql file in C:\\Dumps\\wordpress.sql. Now create a Web App using the Azure Management Portal: Once you click on Create Web App, a Web App is created and it should enter into running status. The list should show up like this: Click on the Web App we just created with name “onpremlampmigrate”. It should have several menu options. You can click on Dashboard which will take you to below page which has all FTP and connection strings information. At this point, you can click on Linked Resources to check if there are any databases associated with the Web App. There should be none at this time. Click on Link a Resource and it will ask you to create or link an existing resource. Click on create a new resource and select MySQL Database resource. It will give you the following screen to create a new database with ClearDB. Once you agree to ClearDB’s legal terms, you can complete this linkage. Once the database is created, you will see a ClearDB database link from Linked Resource page. If you click on the database name ‘onpremlAS4vrR020’, it will take you to ClearDB dashboard where you can view the database information: You can schedule backups or jobs from this site. If you go back to the Azure portal and browse to the dashboard page of the Web App , you can view the connection strings: With these settings you can connect to the database using MySQL Workbench and execute the wordpress.sql that was created earlier. You will need to comment out the first line and change the schema name to match the ClearDB database name like below: You will need to find and replace references to your old site URL with the new site URL. You can use either the .azurewebsites.net URL or the custom domain name URL. We will use .azurewebsites.net URL for this example. You can now select all the statements and execute the statements at one go. This should create the tables and import all the data which was exported from on premise database. You should see tables like below: At this point, you have all the data exported from on premise to the ClearDB database. You will now need to migrate your code from on premise to the Web App. If your on premise code is running on LAMP (Ubuntu/Redhat/Centos etc), you can find the code under /var/www/html. You can directly FTP the code to Azure like below: Once you have copied all your code (wordpress code) from on premise to Azure, you can open the files using WebMatrix (on windows) or download the code to local machine using FTP and modify and upload the file back. In our Wordpress migration, we will need to modify one file which is under site/wwwroot. The file name is wp-config.php. You will need to modify all four of these values to match what we got in connection string. DB_NAME is the Database, DB_USER is the User Id, DB_PASSWORD is the Password and DB_HOST is the Data Source from ClearDB Connection String. This would differ if you have an IaaS VM hosting a MySQL database. There is another setting for multi-site WordPress, which we are not covering here that also needs to be changed to look at the right URL. Once you make these changes, you will need to go into Configure portion of your website and change the PHP version accordingly. In this case, I used PHP 5.5 version, so I choose 5.5. If you are changing versions, you will need to save your settings to the portal. Once these changes are done, you can restart the Web App Website from management portal and browse to the URL and you should be able to login. The below is an example: http://onpremlampmigrate.azurewebsites.net/wp-login.php NOTE: Any customizations like header, footer, background, permalink settings etc. will need to be changed to match the on premise settings. These will not be migrated.","categories":[{"name":"ClearDB","slug":"ClearDB","permalink":"http://azureossd.github.io/categories/ClearDB/"},{"name":"MySQL","slug":"ClearDB/MySQL","permalink":"http://azureossd.github.io/categories/ClearDB/MySQL/"},{"name":"PHP","slug":"ClearDB/MySQL/PHP","permalink":"http://azureossd.github.io/categories/ClearDB/MySQL/PHP/"},{"name":"WordPress","slug":"ClearDB/MySQL/PHP/WordPress","permalink":"http://azureossd.github.io/categories/ClearDB/MySQL/PHP/WordPress/"}],"tags":[],"author":"sureddy1"},{"title":" Giving your existing WordPress MultiSite a new domain name on Microsoft Azure\t\t","slug":"giving-your-existing-wordpress-multisite-a-new-domain-name-on-microsoft-azure","date":"2015-04-06T18:50:00.000Z","updated":"2019-03-26T06:53:58.778Z","comments":true,"path":"giving-your-existing-wordpress-multisite-a-new-domain-name-on-microsoft-azure/","link":"","permalink":"http://azureossd.github.io/giving-your-existing-wordpress-multisite-a-new-domain-name-on-microsoft-azure/","excerpt":"","text":"Prerequisites: This article assumes you acquired a new domain name and have configured the DNS Zones.If you haven’t already done so, see the article here: Configuring a custom domain name for a Microsoft Azure Web Site Problem: You installed WordPress through the MS Azure Gallery and setup a MultiSite (WP feature).\\However, now that you’re ready for launch, you decide you want to change the name from: http://\\&lt;sitename>.azurewebsites.net while remaining hosted on Azure. If you already have your custom domain name pointing to your WP instance and now want to enable MultiSites, then please follow this article here: Convert Azure WordPress MultiSite If you do not have MultiSites enabled, there are easier solutions you should be following. Make a backup! [Before we get started, I kindly ask that you make a backup of both your Azure Website. Here is a link that show you how to accomplish this. Azure Web Sites Backup Getting Started: Using a MySQL client, connect to your MySQL database. Verify that WordPress is the only application using the database. If there are other tables unrelated to WordPress on your database, you’ll have to ensure you do not modify those in anyway. Step 1. Export your MySQL database Using MySQL Workbench or similar MySQL client, select the Export menu. {width=”342” height=”228”} Select all the WP tables for exporting and be sure to select “Export to Self-Contained File”. Step 2. Find / Replace in Notepad Open the .SQL file in notepad. Do not open this file up in something like MS Word or some fancy editor.\\We want a simple editor that will not modify end-of-line characters or anything of that sort. Do a find->replace of \\&lt;sitename>.azurewebsites.net to newsite.com. Replace All. Save this file with a new name (so you don’t overwrite your backup) Import your newly modified MySQL Database\\ Step 3. Modify wp-config: Update DOMAIN_CURRENT_SITE\\ Use WebMatrix to connect to your site\\ Edit wp.config In wp.config change the DOMAIN_CURRENT_SITE to your new site Step 4. Verify your website! Before you log into your wordpress admin, be sure to clear your cookies. Go to your website: [http://newsite.com/]{style=&quot;color: #800080;text-decoration: underline”} Log into WordPress!","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"},{"name":"WordPress","slug":"PHP/WordPress","permalink":"http://azureossd.github.io/categories/PHP/WordPress/"}],"tags":[{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"},{"name":"wordpress","slug":"wordpress","permalink":"http://azureossd.github.io/tags/wordpress/"},{"name":"domain name","slug":"domain-name","permalink":"http://azureossd.github.io/tags/domain-name/"},{"name":"multisite","slug":"multisite","permalink":"http://azureossd.github.io/tags/multisite/"}],"author":"msangapu"},{"title":" Installing PHP Package on Azure Website Using PEAR Package Manager\t\t","slug":"installing-php-package-on-azure-website-using-pear-package-manager","date":"2015-04-03T14:03:00.000Z","updated":"2019-03-26T16:30:21.287Z","comments":true,"path":"installing-php-package-on-azure-website-using-pear-package-manager/","link":"","permalink":"http://azureossd.github.io/installing-php-package-on-azure-website-using-pear-package-manager/","excerpt":"","text":"1. Download go-pear.phar for Windows from https://pear.php.net/manual/en/installation.getting.php 2. Copy “go-pear.phar” file to website root (/site/wwwroot) 3. Run “php go-pear.phar“ at website root. Navigate to Kudu console (https://.scm.azurewebsites.net/DebugConsole ), select a command interface from “Debug console”: Select “local” to install a local copy, confirm your selection You may see some warning message, and ask you to alter php.ini file, enter “n” for not altering php.ini You should see “Thanks for using go-pears!” message at the end of installation. 4. Use “pear list“ command to check if the package(s) you need is installed. Run “pear install “ to install more packages. Installation option “-a” (–alldeps) will install all required and optional dependencies, for example, Mail package has dependency with Auth_SASL, Net_SMTP, “pear install -a Mail“ will help you solve the dependencies, so that you do not need to install them separately. Note: To make “pear install” use current pear.ini, add -c option, eg. “pear -c D:\\home\\site\\wwwroot\\pear.ini install -a Mail“ You can use installation option “-f” (–force) to overwrite newer installed packages, use it when needed. Check your packages with the command “pear list” again after installation to make sure they are installed properly. All installed packages are located under “/wwwroot/pear”, you can find them from there. 5. In the case you use default PHP runtime environment on Azure, you cannot modify php.ini to include pear path, you will need to do this in .user.ini, add following line in your .user.ini: include_path=”.;D:\\home\\site\\wwwroot\\pear” 6. When use the package in your php code, you should give the partial path name as well, for example: require_once “pear/Mail.php”; Note: To use composer, refer to http://blogs.msdn.com/b/azureossds/archive/2015/04/02/setting-up-email-client-in-wediamiki.aspx","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"},{"name":"Uncategorized","slug":"PHP/Uncategorized","permalink":"http://azureossd.github.io/categories/PHP/Uncategorized/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"Mail package","slug":"Mail-package","permalink":"http://azureossd.github.io/tags/Mail-package/"},{"name":"pear","slug":"pear","permalink":"http://azureossd.github.io/tags/pear/"}],"author":"prashanthmadi"},{"title":" Azure App Service Web Apps  - Install Mail package using composer\t\t","slug":"azure-app-service-web-apps-install-mail-package-using-composer","date":"2015-04-02T18:04:00.000Z","updated":"2019-03-26T05:36:41.584Z","comments":true,"path":"azure-app-service-web-apps-install-mail-package-using-composer/","link":"","permalink":"http://azureossd.github.io/azure-app-service-web-apps-install-mail-package-using-composer/","excerpt":"","text":"For Information about installing MediaWiki on Azure : http://blogs.msdn.com/b/benjguin/archive/2012/09/25/installing-mediawiki-to-free-windows-azure-web-sites-installation-de-mediawiki-vers-les-windows-azure-web-sites-gratuits.aspx [This Blog provides an easy way of setting the email client on mediawiki. Below are step by step instructions for doing this: 1) We need to edit the compose.json file located in the root folder of your website. You can edit your site using WebMatrix. Please add the following in the composer.json file and save the file 12345678910111213141516&#123; &quot;repositories&quot;: [ &#123; &quot;type&quot;: &quot;pear&quot;, &quot;url&quot;: &quot;http://pear.php.net&quot; &#125; ], &quot;require&quot;: &#123; &quot;php&quot;: &quot;&gt;=5.3.2&quot;, &quot;psr/log&quot;: &quot;1.0.0&quot;, &quot;pear-pear.php.net/PEAR&quot;: &quot;1.9.4&quot;, &quot;pear-pear.php.net/Mail&quot;: &quot;1.2.0&quot;, &quot;pear-pear.php.net/Mail_Mime&quot;: &quot;1.8.5&quot;, &quot;pear-pear.php.net/Net_SMTP&quot;: &quot;1.6.1&quot; &#125; &#125; The edited file should look like this: 2) Download the composer.phar file from http://getcomposer.org/composer.phar Save this file in the wwwroot folder of your site using an FTP client. 3) Please connect to the “Debug Console” for your site in Kudu by browsing to: https://YourSiteName.scm.azurewebsites.net/Debugconsole [4) Install packages in composer.json using below command 1php composer.phar install 5) If you are using Gmail account, please add the following code at the end of localsettings.php file in the root folder and replace the IDHost, username and password with your credentials: 12345678$wgSMTP = array( &apos;host&apos; =&gt; &quot;ssl://smtp.gmail.com&quot;, // could also be an IP address. Where the SMTP server is located &apos;IDHost&apos; =&gt; &quot;YourSiteName.azurewebsites.net&quot;, // generally this will be the domain name of your website (aka mywiki.org) &apos;port&apos; =&gt; 465, // Port to use when connecting to the SMTP server &apos;auth&apos; =&gt; true, // Should we use SMTP authentication (true or false) &apos;username&apos; =&gt; &quot;YourID@gmail.com&quot;, // Username to use for SMTP authentication (if being used) &apos;password&apos; =&gt; &quot;YourPassword&quot; // Password to use for SMTP authentication (if being used) ); 6) Restart Your website by clicking on Restart in the Azure portal. Testing :1) Browse to your website’s main page. For example: http://samplemediawiki.azurewebsites.net/index.php?title=Main_Page 2) Click “Create account” on top right 3) Enter details on the account creation page and click Submit. 4) Check if you received an email. Troubleshooting:If you haven’t received any email, include the lines of code below in LocalSettings.php to check errors on the webpage. Make sure to remove them before moving to production. 12error_reporting( -1 );ini_set( &apos;display_errors&apos;, 1 ); Note: Please note that PEAR extensions are not officially supported for Web Apps. It would be great to have a feedback item open for voting so we can evaluate overall priority for customers. You can post on this subject on the feedback forum here.","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"Web Apps","slug":"Web-Apps","permalink":"http://azureossd.github.io/tags/Web-Apps/"},{"name":"azure","slug":"azure","permalink":"http://azureossd.github.io/tags/azure/"}],"author":"prashanthmadi@outlook.com"},{"title":" Uploading files to Azure Storage using SAS(shared access signature) - Python\t\t","slug":"uploading-files-to-azure-storage-using-sasshared-access-signature","date":"2015-03-30T21:13:00.000Z","updated":"2019-03-26T20:23:50.229Z","comments":true,"path":"uploading-files-to-azure-storage-using-sasshared-access-signature/","link":"","permalink":"http://azureossd.github.io/uploading-files-to-azure-storage-using-sasshared-access-signature/","excerpt":"","text":"For information on Shared Access Signature visit : http://azure.microsoft.com/en-us/documentation/articles/storage-dotnet-shared-access-signature-part-1/ This Blog would help you upload images into azure storage using Azure SDK(Python). 1) Download Azure python SDK - https://github.com/Azure/azure-sdk-for-python 2) Create a storage in Azure portal and make note of account name, access key and storage url. 3) Create a new container inside storage and make a note of container name. 4) Use below code along with azure sdk downloaded in step 1 to generate SAS 5) Use Below code to upload content to blob import urllib2 def put_blob(storage_url,container_name, blob_name,qry_string,x_ms_blob_type): opener = urllib2.build_opener(urllib2.HTTPHandler) request = urllib2.Request(storage_url+container_name + &apos;/&apos; + blob_name+&apos;?&apos;+qry_string, data=&apos;Hello World!!&apos;) request.add_header(&apos;x-ms-blob-type&apos;, x_ms_blob_type) request.get_method = lambda: &apos;PUT&apos; opener.open(request) uploading a sample blob to azure storage put_blob(STORAGE_URL,CONTAINER_NAME,”sample.txt”,sas_url,”BlockBlob”) Special Thanks to @laurent for helping me fix this issue : https://github.com/Azure/azure-sdk-for-python/issues/651","categories":[{"name":"Uncategorized","slug":"Uncategorized","permalink":"http://azureossd.github.io/categories/Uncategorized/"}],"tags":[{"name":"SAS","slug":"SAS","permalink":"http://azureossd.github.io/tags/SAS/"},{"name":"python","slug":"python","permalink":"http://azureossd.github.io/tags/python/"}],"author":"prashanthmadi"},{"title":" Performance Tuning MySQL Database on Azure Linux VM’s\t\t","slug":"performance-tuning-mysql-database-on-azure-linux-vms","date":"2015-03-27T14:53:00.000Z","updated":"2019-03-26T17:29:56.989Z","comments":true,"path":"performance-tuning-mysql-database-on-azure-linux-vms/","link":"","permalink":"http://azureossd.github.io/performance-tuning-mysql-database-on-azure-linux-vms/","excerpt":"","text":"Please tune these settings in your Test/Staging environments and simulate load to see if it increases performance. These settings should not be applied directly in Production environment. In addition to the settings mentioned in below article: http://azure.microsoft.com/en-us/documentation/articles/virtual-machines-linux-optimize-mysql-perf/ You can also tune some of these settings to obtain higher performance if you are using Raid 0 (Following the instructions provided in above article) and are using innodb storage engine. You can use innodb_flush_method = O_DIRECT to get higher performance when using Raid 0 configuration with Azure Storage disks presented to your linux VM’s. On some flavors of Linux setting innodb_flush_method = O_DSYNC also can give you improved performance. You can use innodb_io_capacity to match with IOPS settings that Azure offers for Basic/Standard storage. IOPS limits for Basic Storage account is 300 IOPS and for Standard is 500 IOPS. If you are using multiple storage disks to configure your RAID 0, then you can stack your IOPS based on number of storage disks in the RAID group. For ex: if you have a VM which has 4 storage disks presented which are associated with Basic Tier Storage, you can get iops of 1200. (4 x 300 IOPS). If you have a VM which has 8 storage disks presented which are associated with Standard Tier Storage, you can iops of 4000. (8 x 500 IOPS). There is an option for premium storage as well which provides much higher IOPS. Please check this article for information on premium storage: http://azure.microsoft.com/en-us/documentation/articles/storage-premium-storage-preview-portal/#overview There is a limit to the number of storage disks that can be attached to a VM. Please refer to this document for disk limits: https://msdn.microsoft.com/library/azure/dn197896.aspx Other settings that can be tuned when using innodb storage engine are below: You can play with innodb_thread_concurrency settings to get more performance when concurrent user count is high. Please refer to documentation provided here to play with this setting on your VM. http://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_thread_concurrency You can set innodb_doublewrite = 0 when using a MySQL DB mainly for read heavy operations only. Setting this on a transactional database can lead to data integrity issues. You can set innodb_flush_log_at_trx_commit = 2, when using MySQL DB mainly for read heavy operations. Setting this on a transactional database can lead to it not being ACID compliant and hence lead to data integrity issues. Consider using innodb_file_per_table = 1 setting. This will force each table and its indexes into its own data file. On Linux VM’s thread_concurrency setting has no effect. So you can comment out this setting. Also consider having your data files and logs files on different file systems which are not on same storage drive. This will avoid IO contention for log writers and data writers on a database which is under heavy usage. Please tune these settings in your Test/Staging environments and simulate load to see if it increases performance. These settings should not be applied directly in Production environment.","categories":[{"name":"MySQL","slug":"MySQL","permalink":"http://azureossd.github.io/categories/MySQL/"}],"tags":[{"name":"azure mysql performance tuning","slug":"azure-mysql-performance-tuning","permalink":"http://azureossd.github.io/tags/azure-mysql-performance-tuning/"}],"author":"sureddy1"},{"title":" Finding Correct Version of PHP Extension for Azure Web Site\t\t","slug":"finding-correct-version-of-php-extension-for-azure-web-site","date":"2015-03-24T16:21:00.000Z","updated":"2019-03-26T06:47:32.417Z","comments":true,"path":"finding-correct-version-of-php-extension-for-azure-web-site/","link":"","permalink":"http://azureossd.github.io/finding-correct-version-of-php-extension-for-azure-web-site/","excerpt":"","text":"While working with websites on Azure, sometimes you may need to install additional extensions. It is important to find the right extension that matches the PHP running on Azure website. PHP function “phpinfo()” collects PHP version and runtime environment information, you can call the function in code (&lt;?php phpinfo(); ?&gt;), (to quickly get the same information, you can run “php -I” from command line), for example, PHP version is 5.5.18 in this example. Since extension .dll files could be compiled by different C++ compiler, the compiler version should be matching, in this example, it is MS VC11. The last one is Architecture information, in this example it is x86. Further more, you can find PHP (and Zend) extension build is NTS (Non-Thread Safe). From http://windows.php.net/downloads/releases/archives/, find the matching PHP version in nts (Non-Thread Safe ), download and decompress the .zip file, core extensions are listed in /ext, get the one you need from there. In the case the functionality you need is not available in core extensions, you will find and download the extension from PECL (PHP Extension Community Library), versions should be matched in the same way. For more details about how to add customer PHP extensions on Azure web site, refer to these documents: http://azure.microsoft.com/en-us/documentation/articles/web-sites-php-configure/ http://blogs.msdn.com/b/silverlining/archive/2012/09/17/using-custom-php-extensions-in-windows-azure-web-sites.aspx","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"},{"name":"Uncategorized","slug":"PHP/Uncategorized","permalink":"http://azureossd.github.io/categories/PHP/Uncategorized/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"php extension Azure Webapps","slug":"php-extension-Azure-Webapps","permalink":"http://azureossd.github.io/tags/php-extension-Azure-Webapps/"},{"name":"PHP troubleshooting","slug":"PHP-troubleshooting","permalink":"http://azureossd.github.io/tags/PHP-troubleshooting/"}]},{"title":" Running Nodejs and php on Same Azure website\t\t","slug":"running-nodejs-and-php-on-same-azure-website","date":"2015-03-23T22:31:00.000Z","updated":"2019-03-26T18:01:29.737Z","comments":true,"path":"running-nodejs-and-php-on-same-azure-website/","link":"","permalink":"http://azureossd.github.io/running-nodejs-and-php-on-same-azure-website/","excerpt":"","text":"In this Blog we would try to create a php+nodejs application using iisnode 1. Create a new azure website: 2. Integrate source control using azure portal - Go to website default page and click on setup deployment from source control Above step would create a Git repository and you can access its url using Deployments tab. 3. Download the chat exampleFor this project, we will use the chat example from the Socket.IO GitHub repository. Perform the following steps to download the example and add it to the project you previously created. Download a ZIP or GZ archived release of the Socket.IO project (version 1.3.5 was used for this document) Extract the archive and copy the examples\\chat directory to a new location. For example, \\node\\chat. 4. Include socket.io as dependency in package.json file or replace it with below content { &quot;name&quot;: &quot;socket.io-chat&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;description&quot;: &quot;A simple chat client using socket.io&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;author&quot;: &quot;Grant Timmerman&quot;, &quot;private&quot;: true, &quot;license&quot;: &quot;BSD&quot;, &quot;dependencies&quot;: { &quot;express&quot;: &quot;3.4.8&quot;, &quot;socket.io&quot;: &quot;^1.3.4&quot; } } 5. open index.js at root folder and change line containing var io = require(‘../..’)(server); to below var io =require(&apos;socket.io&apos;)(server); 6. insert below content in web.config file at root folder of project &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;!-- Visit http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx for more information on WebSocket support --&gt; &lt;webSocket enabled=&quot;false&quot; /&gt; &lt;handlers&gt; &lt;!-- Indicates that the server.js file is a node.js site to be handled by the iisnode module --&gt; &lt;add name=&quot;iisnode&quot; path=&quot;index.js&quot; verb=&quot;*&quot; modules=&quot;iisnode&quot;/&gt; &lt;/handlers&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;!-- check if its root url and navigate to default page --&gt; &lt;rule name=&quot;Index Request&quot; enabled=&quot;true&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^$&quot; /&gt; &lt;action type=&quot;Redirect&quot; url=&quot;/index.php&quot; logRewrittenUrl=&quot;true&quot; /&gt; &lt;/rule&gt; &lt;!-- Do not interfere with requests for node-inspector debugging --&gt; &lt;rule name=&quot;NodeInspector&quot; patternSyntax=&quot;ECMAScript&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;^index.js/debug[/]?&quot; /&gt; &lt;/rule&gt; &lt;!-- consider whether the incoming URL matches a physical file in the /public folder --&gt; &lt;rule name=&quot;StaticContent&quot;&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;public{REQUEST_URI}&quot;/&gt; &lt;/rule&gt; &lt;!-- All other URLs are mapped to the node.js site entry point --&gt; &lt;rule name=&quot;DynamicContent&quot;&gt; &lt;conditions&gt; &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsFile&quot; negate=&quot;True&quot;/&gt; &lt;/conditions&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;index.js&quot;/&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;!-- &apos;bin&apos; directory has no special meaning in node.js and apps can be placed in it --&gt; &lt;security&gt; &lt;requestFiltering&gt; &lt;hiddenSegments&gt; &lt;remove segment=&quot;bin&quot;/&gt; &lt;/hiddenSegments&gt; &lt;/requestFiltering&gt; &lt;/security&gt; &lt;!-- Make sure error responses are left untouched --&gt; &lt;httpErrors existingResponse=&quot;PassThrough&quot; /&gt; &lt;/system.webServer&gt; &lt;/configuration&gt; 7. Insert sample php file in public folder to test if it works &lt;html&gt; &lt;body&gt; &lt;?php echo &quot;Hello World form php&quot;; ?&gt; &lt;br&gt;&lt;br&gt; Chat application using nodejs - &lt;a href=&quot;http://blogs.msdn.com/index.html&quot;&gt;link&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; 8. Commit your changes to Azure website using any git client using the git repository url from deployment tab in Azure portal Above commit process would also download all the required modules listed in package.json file into node_modules folder. Php Application : http://nodephpsample.azurewebsites.net chat Application using nodejs : http://nodephpsample.azurewebsites.net/index.html Troubleshooting : 1. Application crashed as /socket.io/socket.io.js is not found check if socket.io is installed and available in node_modules folder.","categories":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"http://azureossd.github.io/tags/PHP/"},{"name":"php nodejs","slug":"php-nodejs","permalink":"http://azureossd.github.io/tags/php-nodejs/"}],"author":"prashanthmadi"}]}